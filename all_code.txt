from logging.config import fileConfig

from sqlalchemy import engine_from_config, create_engine
from sqlalchemy import pool

from alembic import context
import os
import sys
from dotenv import load_dotenv

sys.path.append(os.getcwd())

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
from app.models import Base
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    load_dotenv()
    TURSO_DATABASE_URL = os.getenv("TURSO_DATABASE_URL")
    TURSO_AUTH_TOKEN = os.getenv("TURSO_AUTH_TOKEN")

    # Use the same format as in database.py
    db_url = f"sqlite+libsql://{TURSO_DATABASE_URL}?secure=true"

    connectable = create_engine(
        db_url,
        poolclass=pool.NullPool,
        connect_args={
            "auth_token": TURSO_AUTH_TOKEN
        }
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ConvoCart - Chat Commerce Solutions</title>
    <meta name="description" content="ConvoCart helps businesses sell directly through WhatsApp with automated ordering, payments, and customer management.">
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#e5f7eb',
                            100: '#c1ebce',
                            200: '#9cdfb0',
                            300: '#77d391',
                            400: '#52c773',
                            500: '#25b350', // Main brand color
                            600: '#20a049',
                            700: '#1b8c40',
                            800: '#167938',
                            900: '#115c2c',
                        },
                        secondary: {
                            50: '#e6f5fb',
                            100: '#cceaf8',
                            200: '#99d5f0',
                            300: '#66c0e9',
                            400: '#33aae1',
                            500: '#0095da',
                            600: '#0084c2',
                            700: '#0072a9',
                            800: '#006191',
                            900: '#004f78',
                        },
                        whatsapp: {
                            light: '#dcf8c6',
                            DEFAULT: '#25d366',
                            dark: '#128c7e',
                        }
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                        display: ['Poppins', 'sans-serif'],
                    },
                },
            },
        }
    </script>
    <!-- Font imports -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@500;600;700;800&display=swap" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Custom styles -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        .font-display {
            font-family: 'Poppins', sans-serif;
        }

        .hero-gradient {
            background: linear-gradient(90deg, rgba(37, 179, 80, 0.1) 0%, rgba(0, 149, 218, 0.1) 100%);
        }

        .feature-card:hover {
            transform: translateY(-5px);
        }

        .coming-soon-badge {
            position: absolute;
            top: 12px;
            right: 12px;
            padding: 4px 10px;
            background-color: #0095da;
            color: white;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
        }
    </style>
</head>
<body class="bg-white text-gray-800">
    <!-- Navigation -->
    <nav class="bg-white shadow-sm fixed w-full z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <a href="#" class="flex items-center">
                        <div class="flex items-center space-x-1 text-primary-500">
                            <i class="fa-brands fa-whatsapp text-xl"></i>
                            <span class="font-display font-bold text-xl">ConvoCart</span>
                        </div>
                    </a>
                </div>
                <div class="hidden md:flex md:items-center md:space-x-8">
                    <a href="#features" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">Features</a>
                    <a href="#how-it-works" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">How It Works</a>
                    <a href="#services" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">Services</a>
                    <a href="#pricing" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">Pricing</a>
                    <a href="#contact" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">Contact</a>
                    <a href="#" class="bg-primary-500 text-white py-2 px-4 rounded-lg font-medium text-sm hover:bg-primary-600 ml-3 transition-all duration-200">Get Started</a>
                </div>
                <div class="flex items-center md:hidden">
                    <button id="mobile-menu-button" class="text-gray-500 hover:text-gray-700 focus:outline-none">
                        <i class="fas fa-bars text-xl"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Mobile menu, show/hide based on menu state -->
        <div id="mobile-menu" class="hidden md:hidden bg-white shadow-md">
            <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                <a href="#features" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">Features</a>
                <a href="#how-it-works" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">How It Works</a>
                <a href="#services" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">Services</a>
                <a href="#pricing" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">Pricing</a>
                <a href="#contact" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">Contact</a>
                <a href="#" class="block px-3 py-2 mt-4 rounded-md text-base font-medium bg-primary-500 text-white hover:bg-primary-600">Get Started</a>
            </div>
        </div>
    </nav>

    <!-- Hero Section -->
    <section class="pt-24 pb-16 hero-gradient">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex flex-col lg:flex-row items-center">
                <div class="lg:w-1/2 lg:pr-12 mb-8 lg:mb-0">
                    <span class="inline-block bg-secondary-100 text-secondary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Simple. Seamless. Scalable.</span>
                    <h1 class="text-4xl md:text-5xl lg:text-6xl font-display font-bold mb-6 leading-tight">Sell Directly Through WhatsApp</h1>
                    <p class="text-lg text-gray-600 mb-8">ConvoCart turns your WhatsApp account into a powerful sales channel. Accept orders, process payments, and grow your business - all through simple chat conversations.</p>
                    <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4">
                        <a href="#" class="inline-flex items-center justify-center bg-primary-500 text-white py-3 px-6 rounded-lg font-medium text-base hover:bg-primary-600 transition-all duration-200">
                            Start Free Trial
                            <i class="fas fa-arrow-right ml-2"></i>
                        </a>
                        <a href="#" class="inline-flex items-center justify-center border border-gray-300 bg-white text-gray-700 py-3 px-6 rounded-lg font-medium text-base hover:bg-gray-50 transition-all duration-200">
                            <i class="fas fa-play-circle mr-2 text-primary-500"></i>
                            Watch Demo
                        </a>
                    </div>
                    <div class="mt-8 flex items-center">
                        <div class="flex -space-x-2">
                            <img src="https://randomuser.me/api/portraits/women/32.jpg" alt="Customer" class="w-8 h-8 rounded-full border-2 border-white">
                            <img src="https://randomuser.me/api/portraits/men/43.jpg" alt="Customer" class="w-8 h-8 rounded-full border-2 border-white">
                            <img src="https://randomuser.me/api/portraits/women/21.jpg" alt="Customer" class="w-8 h-8 rounded-full border-2 border-white">
                            <img src="https://randomuser.me/api/portraits/men/16.jpg" alt="Customer" class="w-8 h-8 rounded-full border-2 border-white">
                        </div>
                        <div class="ml-3">
                            <div class="flex items-center">
                                <div class="flex items-center">
                                    <i class="fas fa-star text-yellow-400"></i>
                                    <i class="fas fa-star text-yellow-400"></i>
                                    <i class="fas fa-star text-yellow-400"></i>
                                    <i class="fas fa-star text-yellow-400"></i>
                                    <i class="fas fa-star-half-alt text-yellow-400"></i>
                                </div>
                                <span class="ml-1 text-sm font-medium">4.8/5</span>
                            </div>
                            <p class="text-xs text-gray-500">Trusted by 500+ businesses</p>
                        </div>
                    </div>
                </div>
                <div class="lg:w-1/2">
                    <div class="relative">
                        <div class="absolute inset-0 bg-gradient-to-r from-primary-200 to-secondary-200 rounded-3xl transform rotate-3 scale-105 opacity-30"></div>
                        <div class="relative bg-white rounded-3xl shadow-xl overflow-hidden border border-gray-100">
                            <div class="bg-whatsapp-dark text-white p-4 flex items-center">
                                <i class="fa-brands fa-whatsapp text-2xl mr-3"></i>
                                <div>
                                    <p class="font-medium">WhatsApp Business</p>
                                    <p class="text-xs text-white/80">Online</p>
                                </div>
                            </div>
                            <div class="bg-gray-100 p-4 h-96 overflow-y-auto">
                                <div class="bg-white rounded-lg p-3 mb-3 max-w-xs shadow-sm">
                                    <p class="text-sm">Hi! I'd like to order from your store.</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:32 AM</p>
                                </div>
                                <div class="bg-whatsapp-light rounded-lg p-3 mb-3 ml-auto max-w-xs shadow-sm">
                                    <p class="text-sm">Welcome to ConvoCart Demo Store! 👋 What would you like to order today?</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:33 AM</p>
                                </div>
                                <div class="bg-white rounded-lg p-3 mb-3 max-w-xs shadow-sm">
                                    <p class="text-sm">I want to order a large pepperoni pizza and a bottle of cola.</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:34 AM</p>
                                </div>
                                <div class="bg-whatsapp-light rounded-lg p-3 mb-3 ml-auto max-w-xs shadow-sm">
                                    <p class="text-sm">Great choice! Your order summary:</p>
                                    <p class="text-sm">• 1x Large Pepperoni Pizza: $12.99</p>
                                    <p class="text-sm">• 1x Cola (1L): $2.50</p>
                                    <p class="text-sm font-medium">Total: $15.49</p>
                                    <p class="text-sm mt-2">Would you like to confirm this order?</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:35 AM</p>
                                </div>
                                <div class="flex space-x-2 mb-3">
                                    <button class="bg-primary-500 text-white rounded-lg px-4 py-2 text-sm font-medium">Confirm Order</button>
                                    <button class="bg-gray-200 text-gray-800 rounded-lg px-4 py-2 text-sm font-medium">Edit Order</button>
                                </div>
                                <div class="bg-white rounded-lg p-3 mb-3 max-w-xs shadow-sm">
                                    <p class="text-sm">Confirm Order</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:36 AM</p>
                                </div>
                                <div class="bg-whatsapp-light rounded-lg p-3 ml-auto max-w-xs shadow-sm">
                                    <p class="text-sm">🎉 Your order has been confirmed!</p>
                                    <p class="text-sm">Order #1234</p>
                                    <p class="text-sm mt-2">Your order will be ready in 30 minutes. You can pay at delivery.</p>
                                    <p class="text-sm mt-2">Thank you for shopping with ConvoCart Demo Store!</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:36 AM</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Trusted By -->
    <!-- <section class="py-8 bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <p class="text-center text-gray-500 text-sm font-medium mb-6">TRUSTED BY INNOVATIVE COMPANIES</p>
            <div class="flex flex-wrap justify-center items-center gap-8 sm:gap-12 opacity-80">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
            </div>
        </div>
    </section> -->

    <!-- Features Section -->
    <section id="features" class="py-16">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-primary-100 text-primary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Features</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Everything You Need to Sell Via WhatsApp</h2>
                <p class="text-lg text-gray-600">Our powerful platform lets you accept orders, manage inventory, and delight customers - all through WhatsApp.</p>
            </div>

            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                <!-- Feature 1 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-shopping-cart text-primary-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Order Management</h3>
                    <p class="text-gray-600 mb-4">Receive, process, and track orders automatically through WhatsApp. No more missed sales opportunities.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 2 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-secondary-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-credit-card text-secondary-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Payment Processing</h3>
                    <p class="text-gray-600 mb-4">Accept payments securely via multiple methods, including mobile money, credit cards, and bank transfers.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 3 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-boxes text-yellow-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Inventory Management</h3>
                    <p class="text-gray-600 mb-4">Track your inventory in real-time. Get alerts when stock is low and manage products easily.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 4 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-chart-bar text-green-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Analytics Dashboard</h3>
                    <p class="text-gray-600 mb-4">Gain insights into your sales, customer behavior, and business performance with detailed analytics.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 5 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-users text-purple-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Customer Management</h3>
                    <p class="text-gray-600 mb-4">Build and manage your customer database, track purchase history, and send personalized offers.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 6 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-robot text-red-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Automated Responses</h3>
                    <p class="text-gray-600 mb-4">Set up automated responses for common queries, order confirmations, and shipping updates.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>
            </div>
        </div>
    </section>

<!-- How It Works - Redesigned -->
<section id="how-it-works" class="py-20 bg-gradient-to-br from-gray-50 to-white relative overflow-hidden">
    <!-- Background Elements -->
    <div class="absolute top-0 right-0 w-64 h-64 bg-primary-50 rounded-full opacity-70 -mr-32 -mt-16"></div>
    <div class="absolute bottom-0 left-0 w-48 h-48 bg-secondary-50 rounded-full opacity-70 -ml-20 -mb-20"></div>
    
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div class="text-center max-w-3xl mx-auto mb-16">
            <span class="inline-block bg-secondary-100 text-secondary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">How It Works</span>
            <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Sell on WhatsApp in 3 Simple Steps</h2>
            <p class="text-lg text-gray-600">Our streamlined process gets you from signup to sales in minutes, not days</p>
        </div>
        
        <!-- Process Timeline -->
        <div class="hidden lg:block absolute left-1/2 top-1/2 w-[calc(100%-240px)] h-2 bg-gray-200 -translate-x-1/2 -translate-y-20 rounded-full z-0">
            <div class="absolute left-0 h-full w-1/3 bg-primary-500 rounded-l-full"></div>
            <div class="absolute left-1/3 h-full w-1/3 bg-primary-400"></div>
            <div class="absolute left-2/3 h-full w-1/3 bg-primary-300 rounded-r-full"></div>
        </div>
        
        <div class="grid lg:grid-cols-3 gap-10 lg:gap-8 relative z-10">
            <!-- Step 1 -->
            <div class="group">
                <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-8 h-full border border-gray-100 relative overflow-hidden transform group-hover:-translate-y-2">
                    <!-- Step Number -->
                    <div class="absolute -right-4 -top-4 w-24 h-24 bg-primary-500 opacity-10 rounded-full"></div>
                    <div class="absolute right-4 top-4 text-4xl font-bold text-primary-500 opacity-30">01</div>
                    
                    <!-- Icon -->
                    <div class="w-16 h-16 bg-primary-100 rounded-2xl flex items-center justify-center mb-6 transform transition-transform group-hover:rotate-6">
                        <i class="fas fa-link text-primary-600 text-2xl"></i>
                    </div>
                    
                    <h3 class="text-xl font-semibold mb-4">Get Your WhatsApp Link</h3>
                    <p class="text-gray-600 mb-6">After signing up, we generate a custom click-to-chat link specifically for your business. This link will connect customers directly to your WhatsApp ordering bot.</p>
                    
                    <div class="bg-gray-50 border border-gray-100 rounded-lg p-4 mb-4">
                        <div class="flex items-center text-xs text-gray-500">
                            <i class="fas fa-code text-primary-400 mr-2"></i>
                            <code>https://wa.me/1234567890?text=order+from+group:yourstore</code>
                        </div>
                    </div>
                    
                    <ul class="space-y-2 text-sm">
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Custom link with your business name</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Pre-filled welcome message</span>
                        </li>
                    </ul>
                </div>
            </div>
            
            <!-- Step 2 -->
            <div class="group">
                <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-8 h-full border border-gray-100 relative overflow-hidden transform group-hover:-translate-y-2">
                    <!-- Step Number -->
                    <div class="absolute -right-4 -top-4 w-24 h-24 bg-primary-500 opacity-10 rounded-full"></div>
                    <div class="absolute right-4 top-4 text-4xl font-bold text-primary-500 opacity-30">02</div>
                    
                    <!-- Icon -->
                    <div class="w-16 h-16 bg-primary-100 rounded-2xl flex items-center justify-center mb-6 transform transition-transform group-hover:rotate-6">
                        <i class="fas fa-thumbtack text-primary-600 text-2xl"></i>
                    </div>
                    
                    <h3 class="text-xl font-semibold mb-4">Pin It to Your Commerce Group</h3>
                    <p class="text-gray-600 mb-6">Share your link by pinning it to your WhatsApp group where customers browse products. This creates a seamless shopping experience from browsing to ordering.</p>
                    
                    <div class="bg-whatsapp-light border border-green-200 rounded-lg p-4 mb-4">
                        <div class="flex items-start text-sm">
                            <div class="flex-shrink-0 w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white">
                                <i class="fas fa-store text-xs"></i>
                            </div>
                            <div class="ml-3">
                                <p class="font-medium text-gray-800">Fashion Store Group</p>
                                <p class="text-xs text-gray-600 mt-1">Click here to place your order: <span class="text-blue-500">https://wa.me/1234...</span></p>
                                <p class="text-xs text-gray-400 mt-1">📌 Pinned message</p>
                            </div>
                        </div>
                    </div>
                    
                    <ul class="space-y-2 text-sm">
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Increased visibility for your customers</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>One-click access to ordering</span>
                        </li>
                    </ul>
                </div>
            </div>
            
            <!-- Step 3 -->
            <div class="group">
                <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-8 h-full border border-gray-100 relative overflow-hidden transform group-hover:-translate-y-2">
                    <!-- Step Number -->
                    <div class="absolute -right-4 -top-4 w-24 h-24 bg-primary-500 opacity-10 rounded-full"></div>
                    <div class="absolute right-4 top-4 text-4xl font-bold text-primary-500 opacity-30">03</div>
                    
                    <!-- Icon -->
                    <div class="w-16 h-16 bg-primary-100 rounded-2xl flex items-center justify-center mb-6 transform transition-transform group-hover:rotate-6">
                        <i class="fas fa-shopping-bag text-primary-600 text-2xl"></i>
                    </div>
                    
                    <h3 class="text-xl font-semibold mb-4">Start Receiving Orders</h3>
                    <p class="text-gray-600 mb-6">When customers click your link, our AI-powered bot guides them through the ordering process. You receive structured orders that are easy to manage.</p>
                    
                    <div class="flex justify-center mb-4">
                        <div class="flex flex-col items-center space-y-1">
                            <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-user text-green-600"></i>
                            </div>
                            <div class="text-xs text-gray-500">Customer</div>
                            <i class="fas fa-arrow-down text-gray-400"></i>
                        </div>
                        <div class="w-14 h-0.5 bg-gray-200 self-center mx-1 mt-4"></div>
                        <div class="flex flex-col items-center space-y-1">
                            <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-robot text-blue-600"></i>
                            </div>
                            <div class="text-xs text-gray-500">Bot</div>
                            <i class="fas fa-arrow-down text-gray-400"></i>
                        </div>
                        <div class="w-14 h-0.5 bg-gray-200 self-center mx-1 mt-4"></div>
                        <div class="flex flex-col items-center space-y-1">
                            <div class="w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-store text-primary-600"></i>
                            </div>
                            <div class="text-xs text-gray-500">You</div>
                        </div>
                    </div>
                    
                    <ul class="space-y-2 text-sm">
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Automated order processing</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Instant customer notifications</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="mt-14 flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-6">
            <a href="#" class="bg-primary-500 text-white py-3 px-8 rounded-lg font-medium text-base hover:bg-primary-600 transition-all duration-200 inline-flex items-center shadow-lg shadow-primary-500/20 transform hover:-translate-y-1">
                <i class="fas fa-rocket mr-2"></i>
                Get Started Now
            </a>
            <a href="#" class="text-gray-700 py-3 px-6 rounded-lg font-medium text-base hover:text-primary-600 transition-all duration-200 inline-flex items-center">
                <i class="fas fa-play-circle mr-2 text-primary-500"></i>
                Watch Demo
            </a>
        </div>
        
        <!-- Stats -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-16">
            <div class="bg-white/80 backdrop-blur-sm rounded-xl border border-gray-100 shadow-sm p-6 text-center">
                <div class="text-3xl font-bold text-primary-500 mb-2">
                    <span class="inline-block bg-primary-100 w-12 h-12 rounded-full flex items-center justify-center mb-3 mx-auto">
                        <i class="fas fa-bolt text-primary-600"></i>
                    </span>
                    <span>2 min</span>
                </div>
                <p class="text-gray-600">Average setup time</p>
            </div>
            
            <div class="bg-white/80 backdrop-blur-sm rounded-xl border border-gray-100 shadow-sm p-6 text-center">
                <div class="text-3xl font-bold text-primary-500 mb-2">
                    <span class="inline-block bg-primary-100 w-12 h-12 rounded-full flex items-center justify-center mb-3 mx-auto">
                        <i class="fas fa-shopping-cart text-primary-600"></i>
                    </span>
                    <span>30%</span>
                </div>
                <p class="text-gray-600">Average sales increase</p>
            </div>
            
            <div class="bg-white/80 backdrop-blur-sm rounded-xl border border-gray-100 shadow-sm p-6 text-center">
                <div class="text-3xl font-bold text-primary-500 mb-2">
                    <span class="inline-block bg-primary-100 w-12 h-12 rounded-full flex items-center justify-center mb-3 mx-auto">
                        <i class="fas fa-headset text-primary-600"></i>
                    </span>
                    <span>24/7</span>
                </div>
                <p class="text-gray-600">Automated order taking</p>
            </div>
        </div>
    </div>
</section>

    <!-- Services Section -->
    <section id="services" class="py-16">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-primary-100 text-primary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Our Services</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Comprehensive Commerce Solutions</h2>
                <p class="text-lg text-gray-600">We're building a complete ecosystem for chat-based commerce.</p>
            </div>

            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                <!-- Service 1: Main Service -->
                <div class="bg-white rounded-xl shadow-sm border border-primary-200 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fa-brands fa-whatsapp text-primary-600 text-2xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">WhatsApp Order Bot</h3>
                    <p class="text-gray-600 mb-4">Our flagship service that turns your WhatsApp into a complete ordering system for your business.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                            <span class="text-gray-600">Automated order processing</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                            <span class="text-gray-600">Customer management system</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                            <span class="text-gray-600">Payment integrations</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                            <span class="text-gray-600">Analytics dashboard</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-primary-500 text-white py-2 px-4 rounded-lg font-medium text-sm hover:bg-primary-600 inline-block transition-all duration-200">
                        Learn More
                    </a>
                </div>

                <!-- Service 2: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-secondary-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-mobile-alt text-secondary-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Multi-Channel Chat Commerce</h3>
                    <p class="text-gray-600 mb-4">Expand your business to Messenger, Telegram, and Instagram DMs with a unified management platform.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Single dashboard for all platforms</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Cross-platform analytics</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Unified customer database</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Automated cross-channel marketing</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Join Waitlist
                    </a>
                </div>

                <!-- Service 3: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-chart-pie text-purple-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Advanced Analytics Suite</h3>
                    <p class="text-gray-600 mb-4">Gain deeper insights into your business with our comprehensive analytics and reporting tools.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Custom reporting dashboards</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Customer behavior analysis</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Sales forecasting</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Performance benchmarking</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Join Waitlist
                    </a>
                </div>

                <!-- Service 4: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-truck text-green-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Logistics Integration</h3>
                    <p class="text-gray-600 mb-4">Seamlessly connect your orders with delivery services for end-to-end order management.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Automatic delivery dispatch</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Real-time delivery tracking</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Delivery partner management</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Delivery cost optimization</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Join Waitlist
                    </a>
                </div>

                <!-- Service 5: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-bullhorn text-yellow-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Marketing Automation</h3>
                    <p class="text-gray-600 mb-4">Create targeted marketing campaigns to engage customers and drive more sales.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Customer segmentation</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Scheduled broadcast messages</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Automated follow-ups</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Campaign performance tracking</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Join Waitlist
                    </a>
                </div>

                <!-- Service 6: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-sitemap text-red-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Enterprise Solutions</h3>
                    <p class="text-gray-600 mb-4">Custom solutions for large businesses with complex requirements and multiple locations.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Multi-location management</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Advanced user roles & permissions</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Custom integrations</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Dedicated account management</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Contact Sales
                    </a>
                </div>
            </div>
        </div>
    </section>

    <!-- Pricing Section -->
    <section id="pricing" class="py-16 bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-secondary-100 text-secondary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Pricing</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Simple, Transparent Pricing</h2>
                <p class="text-lg text-gray-600">Choose the plan that's right for your business. No hidden fees or long-term contracts.</p>
            </div>

            <div class="grid md:grid-cols-3 gap-8">
                <!-- Basic Plan -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="p-6">
                        <h3 class="text-xl font-semibold mb-2">Basic</h3>
                        <p class="text-gray-600 mb-6">Perfect for small businesses just getting started</p>
                        <div class="flex items-baseline mb-6">
                            <span class="text-4xl font-bold">$29</span>
                            <span class="text-gray-500 ml-2">/month</span>
                        </div>
                        <ul class="space-y-3 mb-6">
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Up to 300 orders/month</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Basic analytics</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">1 WhatsApp number</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Email support</span>
                            </li>
                            <li class="flex items-start text-gray-400">
                                <i class="fas fa-times mt-1 mr-2"></i>
                                <span>Advanced features</span>
                            </li>
                        </ul>
                    </div>
                    <div class="px-6 pb-6">
                        <a href="#" class="block w-full py-3 px-4 rounded-lg border border-primary-500 text-primary-500 font-medium text-center hover:bg-primary-50 transition-all duration-200">
                            Choose Basic
                        </a>
                    </div>
                </div>

                <!-- Pro Plan -->
                <div class="bg-white rounded-xl shadow-xl border-2 border-primary-500 overflow-hidden relative transform md:-translate-y-4">
                    <div class="bg-primary-500 text-white text-sm font-semibold py-1 text-center">
                        MOST POPULAR
                    </div>
                    <div class="p-6">
                        <h3 class="text-xl font-semibold mb-2">Professional</h3>
                        <p class="text-gray-600 mb-6">Ideal for growing businesses with regular orders</p>
                        <div class="flex items-baseline mb-6">
                            <span class="text-4xl font-bold">$79</span>
                            <span class="text-gray-500 ml-2">/month</span>
                        </div>
                        <ul class="space-y-3 mb-6">
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Up to 1,000 orders/month</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Advanced analytics</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">2 WhatsApp numbers</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Priority email & chat support</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">All advanced features</span>
                            </li>
                        </ul>
                    </div>
                    <div class="px-6 pb-6">
                        <a href="#" class="block w-full py-3 px-4 rounded-lg bg-primary-500 text-white font-medium text-center hover:bg-primary-600 transition-all duration-200">
                            Choose Professional
                        </a>
                    </div>
                </div>

                <!-- Enterprise Plan -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="p-6">
                        <h3 class="text-xl font-semibold mb-2">Enterprise</h3>
                        <p class="text-gray-600 mb-6">For large businesses with high volume needs</p>
                        <div class="flex items-baseline mb-6">
                            <span class="text-4xl font-bold">$199</span>
                            <span class="text-gray-500 ml-2">/month</span>
                        </div>
                        <ul class="space-y-3 mb-6">
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Unlimited orders</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Custom analytics & reporting</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">5 WhatsApp numbers</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">24/7 priority support</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Custom integrations</span>
                            </li>
                        </ul>
                    </div>
                    <div class="px-6 pb-6">
                        <a href="#" class="block w-full py-3 px-4 rounded-lg border border-primary-500 text-primary-500 font-medium text-center hover:bg-primary-50 transition-all duration-200">
                            Contact Sales
                        </a>
                    </div>
                </div>
            </div>

            <div class="bg-white rounded-xl shadow-sm mt-12 p-8 text-center">
                <h3 class="text-xl font-semibold mb-3">Need a custom solution?</h3>
                <p class="text-gray-600 mb-6 max-w-2xl mx-auto">We offer tailored solutions for businesses with specific requirements. Contact our sales team to discuss your needs.</p>
                <a href="#" class="bg-primary-500 text-white py-3 px-6 rounded-lg font-medium text-base hover:bg-primary-600 transition-all duration-200 inline-flex items-center">
                    <i class="fas fa-envelope mr-2"></i>
                    Contact Sales
                </a>
            </div>
        </div>
    </section>

    <!-- Testimonials Section -->
    <section class="py-16">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-primary-100 text-primary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Testimonials</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">What Our Customers Say</h2>
                <p class="text-lg text-gray-600">Don't just take our word for it. Here's what businesses like yours have achieved with ConvoCart.</p>
            </div>

            <div class="grid md:grid-cols-3 gap-8">
                <!-- Testimonial 1 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                    <div class="flex items-center mb-4">
                        <div class="flex text-yellow-400">
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                        </div>
                        <span class="text-gray-500 ml-2">5.0</span>
                    </div>
                    <p class="text-gray-600 mb-6">"Since implementing ConvoCart, our orders have increased by 40%. Customers love the simplicity of ordering through WhatsApp, and we've significantly reduced our operational costs."</p>
                    <div class="flex items-center">
                        <img src="https://randomuser.me/api/portraits/women/32.jpg" alt="Customer" class="w-12 h-12 rounded-full">
                        <div class="ml-3">
                            <h4 class="font-semibold">Sarah Johnson</h4>
                            <p class="text-sm text-gray-500">Cafe Owner</p>
                        </div>
                    </div>
                </div>

                <!-- Testimonial 2 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                    <div class="flex items-center mb-4">
                        <div class="flex text-yellow-400">
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                        </div>
                        <span class="text-gray-500 ml-2">5.0</span>
                    </div>
                    <p class="text-gray-600 mb-6">"As a small boutique, we were struggling with customer outreach. ConvoCart has transformed our business by making it easy for customers to browse our catalog and place orders directly through WhatsApp."</p>
                    <div class="flex items-center">
                        <img src="https://randomuser.me/api/portraits/men/43.jpg" alt="Customer" class="w-12 h-12 rounded-full">
                        <div class="ml-3">
                            <h4 class="font-semibold">Michael Chen</h4>
                            <p class="text-sm text-gray-500">Fashion Retailer</p>
                        </div>
                    </div>
                </div>

                <!-- Testimonial 3 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                    <div class="flex items-center mb-4">
                        <div class="flex text-yellow-400">
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star-half-alt"></i>
                        </div>
                        <span class="text-gray-500 ml-2">4.5</span>
                    </div>
                    <p class="text-gray-600 mb-6">"The analytics provided by ConvoCart have been invaluable for understanding our customers better. We've been able to tailor our offerings based on real data, resulting in a 25% increase in repeat purchases."</p>
                    <div class="flex items-center">
                        <img src="https://randomuser.me/api/portraits/women/21.jpg" alt="Customer" class="w-12 h-12 rounded-full">
                        <div class="ml-3">
                            <h4 class="font-semibold">Priya Patel</h4>
                            <p class="text-sm text-gray-500">Grocery Store Manager</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- FAQ Section -->
    <section class="py-16 bg-gray-50">
        <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-secondary-100 text-secondary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">FAQ</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Frequently Asked Questions</h2>
                <p class="text-lg text-gray-600">Have questions? We're here to help.</p>
            </div>

            <div class="bg-white rounded-xl shadow-sm border border-gray-100 divide-y divide-gray-200">
                <!-- FAQ Item 1 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(1)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">How does ConvoCart work with my WhatsApp Business account?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-1" class="mt-3 text-gray-600 hidden">
                        <p>ConvoCart integrates seamlessly with your WhatsApp Business API account. After a simple setup process, our platform handles all incoming messages, processes orders automatically, and provides you with a dashboard to manage everything. Your customers interact with your business through WhatsApp just like they normally would, but behind the scenes, our system is organizing and processing their orders.</p>
                    </div>
                </div>

                <!-- FAQ Item 2 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(2)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">Do I need technical knowledge to set up ConvoCart?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-2" class="mt-3 text-gray-600 hidden">
                        <p>Not at all! We've designed ConvoCart to be user-friendly and easy to set up, even if you have no technical background. Our step-by-step onboarding process guides you through connecting your WhatsApp account, setting up your product catalog, and customizing your automated responses. If you ever need help, our support team is always available to assist you.</p>
                    </div>
                </div>

                <!-- FAQ Item 3 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(3)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">What payment methods can my customers use?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-3" class="mt-3 text-gray-600 hidden">
                        <p>ConvoCart supports a wide range of payment methods to give your customers flexibility. This includes major credit and debit cards, mobile money services, bank transfers, and cash on delivery. We're constantly adding new payment options to ensure you can serve customers regardless of their preferred payment method. All online payments are processed securely through our PCI-compliant payment system.</p>
                    </div>
                </div>

                <!-- FAQ Item 4 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(4)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">Can I customize the automated responses?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-4" class="mt-3 text-gray-600 hidden">
                        <p>Absolutely! ConvoCart allows you to fully customize all automated messages to match your brand voice and specific requirements. You can create custom welcome messages, order confirmations, follow-up messages, and more. Our system also supports dynamic content insertion, so you can personalize messages with customer names, order details, and other relevant information.</p>
                    </div>
                </div>

                <!-- FAQ Item 5 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(5)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">Is there a limit to how many orders I can process?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-5" class="mt-3 text-gray-600 hidden">
                        <p>Our Basic and Professional plans have monthly order limits as specified in our pricing section. If you consistently exceed these limits, we recommend upgrading to a higher tier or our Enterprise plan, which offers unlimited orders. Our system is built to scale with your business, so you can start with a lower tier and upgrade as your order volume grows.</p>
                    </div>
                </div>
            </div>

            <div class="text-center mt-8">
                <p class="text-gray-600">Still have questions?</p>
                <a href="#contact" class="text-primary-500 font-medium hover:text-primary-600">Contact our support team</a>
            </div>
        </div>
    </section>

    <!-- CTA Section -->
    <section class="py-16 bg-primary-500 text-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto">
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Ready to Transform Your Business?</h2>
                <p class="text-lg text-white/90 mb-8">Join thousands of businesses using ConvoCart to sell more and delight customers through WhatsApp.</p>
                <div class="flex flex-col sm:flex-row justify-center space-y-3 sm:space-y-0 sm:space-x-4">
                    <a href="#" class="bg-white text-primary-600 py-3 px-6 rounded-lg font-medium text-base hover:bg-gray-100 transition-all duration-200">
                        Start Free Trial
                    </a>
                    <a href="#" class="border border-white text-white py-3 px-6 rounded-lg font-medium text-base hover:bg-white/10 transition-all duration-200">
                        Schedule Demo
                    </a>
                </div>
                <p class="mt-6 text-white/80 text-sm">No credit card required. 14-day free trial.</p>
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="py-16">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="grid md:grid-cols-2 gap-12">
                <div>
                    <span class="inline-block bg-primary-100 text-primary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Contact Us</span>
                    <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Get in Touch</h2>
                    <p class="text-lg text-gray-600 mb-8">Have questions or ready to get started? Our team is here to help you implement the perfect WhatsApp commerce solution for your business.</p>
                    
                    <div class="space-y-6">
                        <div class="flex items-start">
                            <div class="bg-primary-100 rounded-full p-3 mr-4">
                                <i class="fas fa-envelope text-primary-600"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold mb-1">Email Us</h3>
                                <p class="text-gray-600">info@convocart.com</p>
                            </div>
                        </div>
                        
                        <div class="flex items-start">
                            <div class="bg-primary-100 rounded-full p-3 mr-4">
                                <i class="fas fa-phone-alt text-primary-600"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold mb-1">Call Us</h3>
                                <p class="text-gray-600">+254 712 345 678</p>
                            </div>
                        </div>
                        
                        <div class="flex items-start">
                            <div class="bg-primary-100 rounded-full p-3 mr-4">
                                <i class="fas fa-map-marker-alt text-primary-600"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold mb-1">Visit Us</h3>
                                <p class="text-gray-600">Westlands Business Park, Nairobi, Kenya</p>
                            </div>
                        </div>
                    </div>

                    <div class="mt-8">
                        <h3 class="font-semibold mb-3">Follow Us</h3>
                        <div class="flex space-x-4">
                            <a href="#" class="bg-gray-100 hover:bg-gray-200 text-gray-600 h-10 w-10 rounded-full flex items-center justify-center transition-all duration-200">
                                <i class="fab fa-facebook-f"></i>
                            </a>
                            <a href="#" class="bg-gray-100 hover:bg-gray-200 text-gray-600 h-10 w-10 rounded-full flex items-center justify-center transition-all duration-200">
                                <i class="fab fa-twitter"></i>
                            </a>
                            <a href="#" class="bg-gray-100 hover:bg-gray-200 text-gray-600 h-10 w-10 rounded-full flex items-center justify-center transition-all duration-200">
                                <i class="fab fa-instagram"></i>
                            </a>
                            <a href="#" class="bg-gray-100 hover:bg-gray-200 text-gray-600 h-10 w-10 rounded-full flex items-center justify-center transition-all duration-200">
                                <i class="fab fa-linkedin-in"></i>
                            </a>
                        </div>
                    </div>
                </div>
                
                <div>
                    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                        <h3 class="text-xl font-semibold mb-6">Send Us a Message</h3>
                        <form>
                            <div class="grid grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                                    <input type="text" id="name" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500">
                                </div>
                                <div>
                                    <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                                    <input type="email" id="email" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500">
                                </div>
                            </div>
                            <div class="mb-4">
                                <label for="company" class="block text-sm font-medium text-gray-700 mb-1">Company</label>
                                <input type="text" id="company" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500">
                            </div>
                            <div class="mb-4">
                                <label for="subject" class="block text-sm font-medium text-gray-700 mb-1">Subject</label>
                                <input type="text" id="subject" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500">
                            </div>
                            <div class="mb-4">
                                <label for="message" class="block text-sm font-medium text-gray-700 mb-1">Message</label>
                                <textarea id="message" rows="4" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500"></textarea>
                            </div>
                            <button type="submit" class="w-full bg-primary-500 text-white py-3 px-4 rounded-lg font-medium hover:bg-primary-600 transition-all duration-200">
                                Send Message
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8">
                <div class="lg:col-span-2">
                    <div class="flex items-center space-x-2 mb-4">
                        <i class="fa-brands fa-whatsapp text-xl"></i>
                        <span class="font-display font-bold text-xl">ConvoCart</span>
                    </div>
                    <p class="text-gray-400 mb-6 max-w-md">ConvoCart helps businesses sell directly through WhatsApp with automated ordering, payments, and customer management.</p>
                    <div class="flex space-x-4">
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">
                            <i class="fab fa-facebook-f"></i>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">
                            <i class="fab fa-twitter"></i>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">
                            <i class="fab fa-instagram"></i>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">
                            <i class="fab fa-linkedin-in"></i>
                        </a>
                    </div>
                </div>
                
                <div>
                    <h4 class="font-semibold text-lg mb-4">Company</h4>
                    <ul class="space-y-3">
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">About Us</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Blog</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Careers</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Press</a></li>
                    </ul>
                </div>
                
                <div>
                    <h4 class="font-semibold text-lg mb-4">Product</h4>
                    <ul class="space-y-3">
                        <li><a href="#features" class="text-gray-400 hover:text-white transition-colors">Features</a></li>
                        <li><a href="#pricing" class="text-gray-400 hover:text-white transition-colors">Pricing</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Documentation</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">API</a></li>
                    </ul>
                </div>
                
                <div>
                    <h4 class="font-semibold text-lg mb-4">Support</h4>
                    <ul class="space-y-3">
                        <li><a href="#contact" class="text-gray-400 hover:text-white transition-colors">Contact Us</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Help Center</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Privacy Policy</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Terms of Service</a></li>
                    </ul>
                </div>
            </div>
            
            <div class="mt-12 pt-8 border-t border-gray-700 flex flex-col md:flex-row md:justify-between md:items-center">
                <p class="text-gray-400">&copy; 2025 ConvoCart. All rights reserved.</p>
                <div class="mt-4 md:mt-0">
                    <select class="bg-gray-700 text-gray-300 rounded px-3 py-1 border border-gray-600">
                        <option>English</option>
                        <option>Français</option>
                        <option>Español</option>
                        <option>Swahili</option>
                    </select>
                </div>
            </div>
        </div>
    </footer>

    <script>
        // Mobile menu toggle
        document.getElementById('mobile-menu-button').addEventListener('click', function() {
            const menu = document.getElementById('mobile-menu');
            menu.classList.toggle('hidden');
        });
        
        // FAQ toggles
        function toggleFAQ(id) {
            const content = document.getElementById(`faq-${id}`);
            content.classList.toggle('hidden');
        }
    </script>
</body>
</html>from datetime import datetime, timedelta
import enum
import json
from sqlalchemy.orm import Session
from sqlalchemy import JSON, Column, Integer, String, Text, DateTime, Float, Boolean, ForeignKey, Enum, Table, TypeDecorator, UniqueConstraint,func
from sqlalchemy.orm import relationship, validates
from sqlalchemy.ext.declarative import declared_attr
from app.database import Base
import re
import secrets
import string


class JsonGettable(TypeDecorator):
    """
    Custom JSON type for SQLite compatibility.
    Strores data as a JSON string in a TEXT column.
    """
    impl = Text

    def process_bind_param(self, value, dialect):
        if value is not None:
            return json.dumps(value)

    def process_result_value(self, value, dialect):
        if value is not None:
            return json.loads(value)
        
        
# Base mixin for common fields
class TimestampMixin:
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

# User role enum
class UserRole(enum.Enum):
    CLIENT_ADMIN = "admin"
    SUPER_ADMIN = "super_admin"

# Order status enum
class OrderStatus(enum.Enum):
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    CANCELLED = "cancelled"
    REFUNDED = "refunded"

# Payment status enum
class PaymentStatus(enum.Enum):
    UNPAID = "unpaid"
    PAID = "paid"
    VERIFIED = "verified"
    FAILED = "failed"
    REFUNDED = "refunded"

# Payment method enum
class PaymentMethod(enum.Enum):
    MPESA = "mpesa"
    CASH_ON_DELIVERY = "cash_on_delivery"
    CARD = "card"

# Many-to-many relationship table for users and groups (for group memberships)
user_groups = Table(
    "user_groups",
    Base.metadata,
    Column("user_id", Integer, ForeignKey("users.id"), primary_key=True),
    Column("group_id", Integer, ForeignKey("groups.id"), primary_key=True)
)

class User(Base, TimestampMixin):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, index=True, nullable=False)
    email = Column(String(100), unique=True, index=True, nullable=True)
    phone_number = Column(String(20), unique=True, index=True, nullable=True)
    password_hash = Column(String(255), nullable=False)
    full_name = Column(String(100), nullable=True)
    role = Column(Enum(UserRole), default=UserRole.CLIENT_ADMIN, nullable=False)
    is_active = Column(Boolean, default=True, nullable=False)
    last_login = Column(DateTime, nullable=True)
    account_verified = Column(Boolean, default=False, nullable=False)
    verification_token = Column(String(100), nullable=True)
    reset_token = Column(String(100), nullable=True)
    reset_token_expires_at = Column(DateTime, nullable=True)
    
    # Relationships
    groups = relationship("Group", secondary=user_groups, back_populates="users")
    
    @validates('email')
    def validate_email(self, key, email):
        if email is not None:
            # Basic email validation
            if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
                raise ValueError("Invalid email address")
        return email
    
    @validates('phone_number')
    def validate_phone(self, key, phone):
        if phone is not None:
            # Remove any non-digit characters
            clean_phone = re.sub(r'\D', '', phone)
            # Ensure it's a valid length (adjust as needed for your country)
            if len(clean_phone) < 9 or len(clean_phone) > 15:
                raise ValueError("Phone number must be between 9 and 15 digits")
            return clean_phone
        return phone
    
    def generate_verification_token(self):
        """Generate a random token for email verification"""
        alphabet = string.ascii_letters + string.digits
        token = ''.join(secrets.choice(alphabet) for _ in range(50))
        self.verification_token = token
        return token
    
    def generate_reset_token(self, expires_in_hours=24):
        """Generate a password reset token"""
        alphabet = string.ascii_letters + string.digits
        token = ''.join(secrets.choice(alphabet) for _ in range(50))
        self.reset_token = token
        self.reset_token_expires_at = datetime.utcnow() + timedelta(hours=expires_in_hours)
        return token

class Customer(Base, TimestampMixin):
    """Customer model for storing customer information. Each customer is tied to a group."""
    __tablename__ = "customers"
    
    id = Column(Integer, primary_key=True, index=True)
    group_id = Column(Integer, ForeignKey("groups.id"), nullable=False, index=True)
    name = Column(String(100), nullable=False)
    phone_number = Column(String(20), nullable=False, index=True)
    
    # New field to track the current session group context
    active_group_id = Column(Integer, ForeignKey("groups.id"), nullable=True)
    
    # Relationships - specify foreign_keys explicitly to resolve ambiguity
    group = relationship("Group", back_populates="customers", foreign_keys=[group_id])
    active_group = relationship("Group", foreign_keys=[active_group_id])
    orders = relationship("Order", back_populates="customer")
    conversation_sessions = relationship("ConversationSession", back_populates="customer", order_by="desc(ConversationSession.last_interaction)")

    @validates('phone_number')
    def validate_phone(self, key, phone):
        if phone is not None:
            # Remove any non-digit characters
            clean_phone = re.sub(r'\D', '', phone)
            # Ensure it's a valid length
            if len(clean_phone) < 9 or len(clean_phone) > 15:
                raise ValueError("Phone number must be between 9 and 15 digits")
            return clean_phone
        return phone
    
    class Meta:
        # Define table constraints
        __table_args__ = (
            # Ensure phone_number is unique within a group
            UniqueConstraint('group_id', 'phone_number', name='uix_customer_group_phone'),
        )


class Group(Base, TimestampMixin):
    __tablename__ = "groups"
    
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String(100), nullable=False)
    identifier = Column(String(50), unique=True, index=True, nullable=False)
    description = Column(Text, nullable=True)
    category = Column(String(50), nullable=True)
    welcome_message = Column(Text, nullable=True)
    logo_url = Column(String(255), nullable=True)
    contact_email = Column(String(100), nullable=True)
    contact_phone = Column(String(20), nullable=True)
    is_active = Column(Boolean, default=True, nullable=False)
    
    # Relationships - specify foreign_keys in the Customer relationship
    users = relationship("User", secondary=user_groups, back_populates="groups")
    customers = relationship("Customer", back_populates="group", foreign_keys=[Customer.group_id])
    orders = relationship("Order", back_populates="group")
    
    @validates('identifier')
    def validate_identifier(self, key, identifier):
        # Ensure identifier is URL-friendly
        if not re.match(r'^[a-z0-9_-]+$', identifier):
            raise ValueError("Identifier can only contain lowercase letters, numbers, underscores, and dashes")
        return identifier

class Configuration(Base):
    """
    System configuration settings stored as key-value pairs
    """
    __tablename__ = "configurations"
    
    id = Column(Integer, primary_key=True, index=True)
    key = Column(String(255), unique=True, index=True, nullable=False)
    value = Column(Text, nullable=True)
    description = Column(Text, nullable=True)
    created_at = Column(DateTime, default=func.now(), nullable=False)
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now(), nullable=False)
    
    @staticmethod
    def get_value(db: Session, key: str, default_value: str = None) -> str:
        """
        Get a configuration value by key
        """
        config = db.query(Configuration).filter(Configuration.key == key).first()
        if config and config.value:
            return config.value
        return default_value
    
    @staticmethod
    def set_value(db: Session, key: str, value: str, description: str = None) -> 'Configuration':
        """
        Set a configuration value (create or update)
        """
        config = db.query(Configuration).filter(Configuration.key == key).first()
        if config:
            config.value = value
            if description:
                config.description = description
        else:
            config = Configuration(key=key, value=value, description=description)
            db.add(config)
        
        db.commit()
        return config


class Order(Base, TimestampMixin):
    __tablename__ = "orders"

    id = Column(Integer, primary_key=True, index=True)
    order_number = Column(String(20), unique=True, index=True, nullable=False)
    customer_id = Column(Integer, ForeignKey("customers.id"), nullable=False, index=True)
    group_id = Column(Integer, ForeignKey("groups.id"), index=True, nullable=False)
    order_details = Column(Text, nullable=True)  # JSON data of order items
    status = Column(Enum(OrderStatus), default=OrderStatus.PENDING, nullable=False)
    total_amount = Column(Float, default=0.0, nullable=False)
    payment_method = Column(Enum(PaymentMethod), nullable=True)
    payment_ref = Column(String(50), nullable=True)     # Payment reference/transaction code i.e MPESA code
    payment_status = Column(Enum(PaymentStatus), default=PaymentStatus.UNPAID, nullable=False)
    last_notification_sent = Column(DateTime, nullable=True)
    notification_count = Column(Integer, default=0)
    
    # Relationships
    customer = relationship("Customer", back_populates="orders")
    group = relationship("Group", back_populates="orders")
    
    def __init__(self, **kwargs):
        super(Order, self).__init__(**kwargs)
        if not self.order_number:
            self.order_number = self.generate_order_number()
    
    def generate_order_number(self):
        """Generate a unique order number"""
        timestamp = datetime.utcnow().strftime('%Y%m%d')
        random_part = ''.join(secrets.choice(string.digits) for _ in range(4))
        return f"ORD-{timestamp}-{random_part}"

    def can_send_notification(self, interval_minutes=5):
        """Check if a notification can be sent to avoid spamming."""
        if not self.last_notification_sent:
            return True
        
        time_since_last_sent = datetime.utcnow() - self.last_notification_sent
        if time_since_last_sent > timedelta(minutes=interval_minutes):
            return True
        
        return False

    def record_notification(self):
        """Record that a notification has been sent."""
        self.last_notification_sent = datetime.utcnow()
        self.notification_count = (self.notification_count or 0) + 1


class ConversationState(str, Enum):
    """
    Enum for tracking conversation states
    """
    INITIAL = "initial"
    WELCOME = "welcome"
    AWAITING_ORDER_DETAILS = "awaiting_order_details"
    AWAITING_PAYMENT = "awaiting_payment"
    AWAITING_PAYMENT_CONFIRMATION = "awaiting_payment_confirmation"
    TRACKING_ORDER = "tracking_order"
    WAITING_FOR_SUPPORT = "waiting_for_support"
    IDLE = "idle"

class ConversationSession(Base):
    """
    Model for tracking customer conversation sessions
    """
    __tablename__ = "conversation_sessions"
    
    id = Column(Integer, primary_key=True, index=True)
    customer_id = Column(Integer, ForeignKey("customers.id"), nullable=False)
    current_state = Column(String(50), default=ConversationState.INITIAL)
    context_data = Column(JsonGettable, nullable=True) # Stores JSON data related to current conversation
    last_interaction = Column(DateTime, default=datetime.utcnow)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    # Relationships
    customer = relationship("Customer", back_populates="conversation_sessions")
    
    def update_state(self, new_state, context=None):
        """
        Update the conversation state and context
        """
        self.current_state = new_state.value if isinstance(new_state, ConversationState) else new_state
        
        if context:
            # Update only the provided context fields, preserving existing ones
            current_context = self.get_context() or {}
            current_context.update(context)
            self.context_data = current_context
            
        self.last_interaction = datetime.utcnow()
        
    def get_context(self):
        """
        Get the current context data as a Python dict
        """
        if self.context_data:
            if isinstance(self.context_data, str):
                return json.loads(self.context_data)
            return self.context_data
        return {}
        
    def is_expired(self, expiry_minutes=30):
        """
        Check if the conversation has expired (inactive for too long)
        """
        if not self.is_active:
            return True
            
        expiry_time = datetime.utcnow() - timedelta(minutes=expiry_minutes)
        return self.last_interaction < expiry_time
    
    @classmethod
    def get_or_create_session(cls, db, customer_id):
        """
        Get the active session for a customer or create a new one
        """
        # Find active session
        session = db.query(cls).filter(
            cls.customer_id == customer_id,
            cls.is_active == True
        ).order_by(cls.last_interaction.desc()).first()
        
        # If no active session or session expired, create new one
        if not session or session.is_expired():
            if session:
                # Deactivate expired session
                session.is_active = False
                db.commit()
                
            # Create new session
            session = cls(
                customer_id=customer_id,
                current_state=ConversationState.INITIAL,
                is_active=True
            )
            db.add(session)
            db.commit()
            db.refresh(session)
            
        return sessionfrom sqlalchemy import event, text, create_engine
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.ext.declarative import declarative_base
import sqlalchemy_libsql.libsql  # noqa: F401
from sqlalchemy.exc import SQLAlchemyError
import logging
from app.config import get_settings

settings = get_settings()

# Configure logging
logger = logging.getLogger(__name__)

# Construct the URL without auth parameters
SQLALCHEMY_DATABASE_URL = f"sqlite+libsql://{settings.turso_database_url}?secure=true"

# Create synchronous engine with auth token in connect_args
engine = create_engine(
    SQLALCHEMY_DATABASE_URL, 
    echo=True,
    connect_args={
        "auth_token": settings.turso_auth_token
    }
)

# Create synchronous session factory
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

# Synchronous dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()# app/config.py
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv(override=True)
from pydantic import Field
from functools import lru_cache
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    """Application settings loaded from environment variables."""
    
    # Server settings
    host: str = Field(..., env="HOST")
    port: int = Field(..., env="PORT")
    debug: bool = Field(False, env="DEBUG")
    secret_key: str = Field("default_secret_key", env="SECRET_KEY")

    # WhatsApp API settings
    whatsapp_api_url: str = Field(..., env="WHATSAPP_API_URL")
    whatsapp_phone_id: str = Field(..., env="WHATSAPP_PHONE_ID")
    whatsapp_phone_number: str = Field(..., env="WHATSAPP_PHONE_NUMBER")
    whatsapp_api_token: str = Field(..., env="WHATSAPP_API_TOKEN")
    webhook_verify_token: str = Field(..., env="WEBHOOK_VERIFY_TOKEN")

    # Turso Database settings
    turso_auth_token: str = Field(..., env="TURSO_AUTH_TOKEN")
    turso_database_url: str = Field(..., env="TURSO_DATABASE_URL")

    # Admin credentials
    admin_username: str = Field("ConvoCartAdmin", env="ADMIN_USERNAME")
    admin_password: str = Field("ConvoCartPassword", env="ADMIN_PASSWORD")
    algorithm: str = Field("HS256", env="ALGORITHM")
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        env_prefix = "" # No prefix, directly use env var names
        
    
    
@lru_cache()
def get_settings() -> Settings:
    """Get application settings."""
    settings = Settings()
    print(f"DEBUG: Pydantic Settings Loaded: {settings.model_dump_json()}")
    return settings
# app/main.py
import logging
from fastapi import FastAPI, Request, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from pathlib import Path
import uvicorn
from app.database import SessionLocal, engine, Base, get_db
# from app.routers import users, webhook
from app.config import Settings, get_settings
from app import models
from app.config import get_settings
from contextlib import asynccontextmanager

from app.routers import users, webhook

settings = get_settings()
# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

# Configure password hashing - import here to make configuration cleaner
from passlib.context import CryptContext
# Suppress the noisy bcrypt version warning
logging.getLogger("passlib.handlers.bcrypt").setLevel(logging.ERROR)


# Add this before creating the FastAPI app
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    Base.metadata.create_all(bind=engine)
    logger.info(f"Debug: {settings.debug}")

    # Create default admin user if not exists
    db = SessionLocal()
    try:
        admin = db.query(models.User).filter(
            models.User.username == settings.admin_username
        ).first()

        if not admin:
            try:
                # Create default super admin user with properly hashed password
                admin = models.User(
                    username=settings.admin_username,
                    password_hash=get_password_hash(settings.admin_password),
                    role=models.UserRole.SUPER_ADMIN,
                    is_active=True,
                    full_name="System Administrator"
                )
                db.add(admin)
                db.commit()
                logger.info("Created default super admin user")
            except Exception as e:
                logger.error(f"Error creating default admin user: {str(e)}")
                db.rollback()
        else:
            # Check if the existing user is a super admin
            if admin.role != models.UserRole.SUPER_ADMIN:
                # Update to super admin role if not already
                admin.role = models.UserRole.SUPER_ADMIN
                db.commit()
                logger.info("Updated default user to super admin role")
    finally:
        db.close()
    
    yield
    # Shutdown (if needed)
    
    
# Create password context with bcrypt
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

app = FastAPI(
    title="WhatsApp Order Bot",
    description="A simple ordering bot for WhatsApp Business API",
    version="1.0.0",
    lifespan=lifespan
)

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files
app.mount("/static", StaticFiles(directory=Path(__file__).parent / "static"), name="static")

# # Include routers
app.include_router(webhook.router, tags=["webhook"])
app.include_router(users.router, tags=["admin"])

# Initialize templates
templates = Jinja2Templates(directory=Path(__file__).parent / "templates")

def get_password_hash(password):
    """Hash a password for storing"""
    return pwd_context.hash(password)


    
    
@app.get("/")
async def root(request: Request):
    return templates.TemplateResponse(
        "intro.html",
        {
            "request": request,
            "title": "WhatsApp Order Bot ConvoCart",
            "message": "Welcome to the WhatsApp Order Bot"
        }
    )

if __name__ == "__main__":
    uvicorn.run("app.main:app", host=settings.host, port=settings.port, reload=settings.debug)
import json
import logging
import requests
from typing import Dict, Any, Optional, List
from app.config import get_settings

settings = get_settings()


logger = logging.getLogger(__name__)

class WhatsAppService:
    def __init__(self, db=None):
        """
        Initialize the WhatsApp service with configuration from database or environment variables
        """
        # Try to get configuration from database if provided
        if db:
            from app.models import Configuration
            # Get values from database with fallback to environment variables
            api_url = Configuration.get_value(db, 'whatsapp_api_url', settings.whatsapp_api_url )
            phone_id = Configuration.get_value(db, 'whatsapp_phone_id',settings.whatsapp_phone_id)
            api_token = Configuration.get_value(db, 'whatsapp_api_token', settings.whatsapp_api_token)
        else:
            # Use environment variables directly
            api_url = settings.whatsapp_api_url
            phone_id = settings.whatsapp_phone_id
            api_token = settings.whatsapp_api_token
            
        # Log configuration status (without sensitive values)
        logger.info(f"WhatsApp service initialized with API URL: {api_url}")
        logger.info(f"WhatsApp service initialized with Phone ID: {phone_id}")
        logger.debug(f"WhatsApp service API token configured: {'Yes' if api_token else 'No'}")
        
        # Set up the API URL and headers as in original implementation
        self.api_url = f"{api_url}/{phone_id}/messages"
        self.headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_token}"
        }

    def _truncate_string(self, text: str, max_length: int) -> str:
        """
        Truncate a string to max_length, adding '...' if truncated.
        """
        if not isinstance(text, str):
            return str(text)
        if len(text) > max_length:
            return text[:max_length - 3] + "..."
        return text

    def send_text_message(self, to: str, message: str) -> Dict[str, Any]:
        """
        Send a simple text message to a WhatsApp user
        """
        message = self._truncate_string(message, 4096) # WhatsApp text message limit
        payload = {
            "messaging_product": "whatsapp",
            "recipient_type": "individual",
            "to": to,
            "type": "text",
            "text": {
                "preview_url": False,
                "body": message
            }
        }
        
        return self._make_request(payload)
    
    def send_quick_reply_buttons(self, to: str, message: str, buttons: list) -> Dict[str, Any]:
        """
        Send interactive buttons message
        buttons should be a list of dictionaries with 'id' and 'title' keys
        """
        if len(buttons) > 3:
            logger.warning("WhatsApp only supports up to 3 quick reply buttons, truncating list")
            buttons = buttons[:3]
            
        button_items = [
            {
                "type": "reply",
                "reply": {
                    "id": self._truncate_string(button["id"], 256), # Button ID limit
                    "title": self._truncate_string(button["title"], 20) # Button title limit
                }
            } for button in buttons
        ]
        
        payload = {
            "messaging_product": "whatsapp",
            "recipient_type": "individual",
            "to": to,
            "type": "interactive",
            "interactive": {
                "type": "button",
                "body": {
                    "text": self._truncate_string(message, 1024) # Interactive message body limit
                },
                "action": {
                    "buttons": button_items
                }
            }
        }
        
        return self._make_request(payload)
    
    def send_list_message(self, to: str, message: str, sections: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Send an interactive list message
        sections: list of section dictionaries with 'title' and 'rows' keys
        """
        # Truncate message body
        message = self._truncate_string(message, 1024) # Interactive message body limit

        # Truncate section and row titles/descriptions
        for section in sections:
            section["title"] = self._truncate_string(section["title"], 24) # Section title limit
            for row in section.get("rows", []):
                row["id"] = self._truncate_string(row["id"], 256) # Row ID limit
                row["title"] = self._truncate_string(row["title"], 24) # Row title limit
                if "description" in row:
                    row["description"] = self._truncate_string(row["description"], 72) # Row description limit

        payload = {
            "messaging_product": "whatsapp",
            "recipient_type": "individual",
            "to": to,
            "type": "interactive",
            "interactive": {
                "type": "list",
                "body": {
                    "text": message
                },
                "action": {
                    "button": "View Options",
                    "sections": sections
                }
            }
        }
        
        return self._make_request(payload)
    
    def send_order_confirmation(self, to: str, order_details: Dict[str, Any]) -> Dict[str, Any]:
        """
        Send an order confirmation message with enhanced details and KSH currency
        """
        items_text = ""
        items = order_details.get('items', [])
        order_number = self._truncate_string(order_details.get('order_number', 'N/A'), 20) # Order number limit
        total_amount = order_details.get('total_amount', 0)
        group_name = self._truncate_string(order_details.get('group_name', 'Our store'), 100) # Group name limit
        
        if isinstance(items, list):
            for i, item in enumerate(items, 1):
                name = self._truncate_string(item.get('name', 'Unknown item'), 50) # Item name limit
                quantity = item.get('quantity', 1)
                price = item.get('price', 0)
                items_text += f"{i}. {name} x{quantity} - KSH {price:.2f}\n"
        else:
            # Just use the raw text if not in expected format
            items_text = self._truncate_string(str(items), 1000) # Items text limit
        
        confirmation_text = f"📝 *ORDER SAVED*\n"
        confirmation_text += f"Order #: {order_number}\n"
        confirmation_text += f"Store: {group_name}\n\n"
        confirmation_text += f"*Items:*\n{items_text}\n"
        
        if total_amount > 0:
            confirmation_text += f"*Total:* KSH {total_amount:.2f}\n\n"
        
        confirmation_text += "Thank you for your order! 🙏\n"
        confirmation_text += "Your group admin will confirm your order and update you shortly.\n\n"
        confirmation_text += "For payment please confirm the following.\n\n"
        
        # Add payment options buttons
        buttons = [
            {"id": "mpesa_message", "title": "Paid with M-Pesa"},
            {"id": "pay_cash", "title": "Pay on Delivery"},
            {"id": "cancel_order", "title": "Cancel Order"}
        ]
        
        return self.send_quick_reply_buttons(to, confirmation_text, buttons)

    def send_payment_confirmation(self, to: str, payment_details: Dict[str, Any]) -> Dict[str, Any]:
        """
        Send a payment confirmation message with enhanced details
        """
        payment_method = self._truncate_string(payment_details.get('method', 'Unknown'), 50) # Payment method limit
        order_number = self._truncate_string(payment_details.get('order_number', 'N/A'), 20) # Order number limit
        payment_ref = self._truncate_string(payment_details.get('payment_ref', 'N/A'), 50) # Payment ref limit
        amount = payment_details.get('amount', 0)
        
        if payment_method == 'mpesa':
            message = f"✅ *PAYMENT INFORMATION SAVED*\n\n"
            message += f"Order #: {order_number}\n"
            message += f"Payment Method: M-Pesa\n"
            message += f"Transaction Code: {payment_ref}\n"
            
            if amount > 0:
                message += f"Amount: KSH {amount:.2f}\n"
                
            message += "\n"
            # payment pending confirmation
            message += "Your payment is pending confirmation. Please wait for your group admin to confirm.\n\n"
            message += "Your order has been received and is being processed. Thank you!"
        else:  # cash on delivery
            message = f"✅ *ORDER CONFIRMED*\n\n"
            message += f"Order #: {order_number}\n"
            message += f"Payment Method: Cash on Delivery\n"
            
            if amount > 0:
                message += f"Amount to Pay: KSH {amount:.2f}\n"
                
            message += "\n"
            message += "Your order has been received and is being processed. You will pay upon delivery. Thank you!"
        
        return self.send_text_message(to, message)
    
    def send_order_status_update(self, to: str, order_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Send a comprehensive order status update message
        """
        order_number = self._truncate_string(order_data.get('order_number', 'N/A'), 20) # Order number limit
        status = order_data.get('status', 'unknown')
        group_name = self._truncate_string(order_data.get('group_name', 'Our store'), 100) # Group name limit
        total_amount = order_data.get('total_amount', 0)
        payment_method = self._truncate_string(order_data.get('payment_method', ''), 50) # Payment method limit
        payment_status = self._truncate_string(order_data.get('payment_status', ''), 50) # Payment status limit
        payment_ref = self._truncate_string(order_data.get('payment_ref', ''), 50) # Payment ref limit
        order_details = self._truncate_string(order_data.get('order_details', ''), 1000) # Order details limit
        created_at = order_data.get('created_at', '')
        
        # Status emoji mapping
        status_emoji = {
            'pending': '🕒',
            'processing': '⚙️',
            'completed': '✅',
            'cancelled': '❌',
            'refunded': '💰'
        }
        
        emoji = status_emoji.get(status.lower(), '')
        
        # Build message
        message = f"{emoji} *ORDER STATUS UPDATE*\n\n"
        message += f"Your order #{order_number} with {group_name} "
        
        # Status-specific message
        if status.lower() == 'pending':
            message += "is pending processing. We'll update you soon!"
        elif status.lower() == 'processing':
            message += "is now being processed. We're working on it!"
        elif status.lower() == 'completed':
            message += "has been completed. Thank you for your business!"
        elif status.lower() == 'cancelled':
            message += "has been cancelled. Please contact us if you have any questions."
        elif status.lower() == 'refunded':
            message += "has been refunded. The amount will be credited back to your account."
        else:
            message += f"status has been updated to: {status}"
        
        # Order details section
        message += "\n\n*Order Details:*"
        if created_at:
            message += f"\nDate: {created_at}"
        
        if total_amount > 0:
            message += f"\nAmount: KSH {total_amount:.2f}"
        
        # Payment information
        if payment_method:
            message += f"\nPayment Method: {payment_method}"
            
        if payment_status:
            message += f"\nPayment Status: {payment_status}"
            
        if payment_ref:
            message += f"\nReference: {payment_ref}"
        
        # Order items preview
        if order_details:
            message += f"\n\n*Items:*\n{order_details[:100]}"
            if len(order_details) > 100:
                message += "..."
        
        # Send the message
        return self.send_text_message(to, message)

    def send_payment_status_update(self, to: str, payment_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Send a payment status update notification
        """
        order_number = self._truncate_string(payment_data.get('order_number', 'N/A'), 20) # Order number limit
        payment_status = self._truncate_string(payment_data.get('payment_status', 'unknown'), 50) # Payment status limit
        payment_method = self._truncate_string(payment_data.get('payment_method', ''), 50) # Payment method limit
        payment_ref = self._truncate_string(payment_data.get('payment_ref', ''), 50) # Payment ref limit
        amount = payment_data.get('amount', 0)
        
        # Payment status emoji mapping
        status_emoji = {
            'unpaid': '⏳',
            'paid': '💵',
            'verified': '✅',
            'failed': '❌',
            'refunded': '↩️'
        }
        
        emoji = status_emoji.get(payment_status.lower(), '')
        
        # Build message
        message = f"{emoji} *PAYMENT STATUS UPDATE*\n\n"
        message += f"Order #: {order_number}\n"
        
        if payment_method:
            message += f"Payment Method: {payment_method}\n"
            
        if amount > 0:
            message += f"Amount: KSH {amount:.2f}\n"
            
        if payment_ref:
            message += f"Reference: {payment_ref}\n"
        
        message += f"\nPayment Status: {payment_status.title()}\n\n"
        
        # Status-specific message
        if payment_status.lower() == 'unpaid':
            message += "Your payment is pending. Please complete your payment to process your order."
        elif payment_status.lower() == 'paid':
            message += "We've received your payment and are verifying it. Your order will be processed soon."
        elif payment_status.lower() == 'verified':
            message += "Your payment has been verified. Thank you! Your order is being processed."
        elif payment_status.lower() == 'failed':
            message += "There was an issue with your payment. Please try again or contact support."
        elif payment_status.lower() == 'refunded':
            message += "Your payment has been refunded. The amount will be credited back to your account."
        
        # Send the message
        return self.send_text_message(to, message)

    def _make_request(self, payload: Dict[str, Any]) -> Dict[str, Any]:
        """
        Make a request to the WhatsApp API
        """
        try:
            response = requests.post(
                self.api_url,
                headers=self.headers,
                data=json.dumps(payload)
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Error sending WhatsApp message: {str(e)}")
            return {"error": str(e)}

    def process_webhook_event(self, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Process an incoming webhook event
        Returns customer phone number and message if a text message was received
        """
        try:
            # Check if this is a valid webhook event with message data
            if not data or "object" not in data or data["object"] != "whatsapp_business_account":
                return None
                
            # Extract entry data
            entries = data.get("entry", [])
            if not entries:
                return None
                
            # Process each entry (usually there's just one)
            for entry in entries:
                changes = entry.get("changes", [])
                for change in changes:
                    if change.get("field") != "messages":
                        continue
                        
                    value = change.get("value", {})
                    if "messages" not in value:
                        continue
                        
                    messages = value.get("messages", [])
                    if not messages:
                        continue
                        
                    # Process the first message
                    message = messages[0]
                    
                    # Get sender info
                    contacts = value.get("contacts", [])
                    contact_name = contacts[0].get("profile", {}).get("name") if contacts else "Unknown"
                    
                    message_type = message.get("type")
                    from_number = message.get("from")
                    
                    if message_type == "text":
                        # It's a text message
                        text_body = message.get("text", {}).get("body", "")
                        return {
                            "phone_number": from_number,
                            "name": contact_name,
                            "message": text_body,
                            "type": "text"
                        }
                    elif message_type == "interactive":
                        # It's an interactive message (button click, etc.)
                        interactive = message.get("interactive", {})
                        
                        if interactive.get("type") == "button_reply":
                            button_reply = interactive.get("button_reply", {})
                            button_id = button_reply.get("id", "")
                            button_title = button_reply.get("title", "")
                            
                            return {
                                "phone_number": from_number,
                                "name": contact_name,
                                "message": button_title,
                                "button_id": button_id,
                                "type": "button"
                            }
                        elif interactive.get("type") == "list_reply":
                            list_reply = interactive.get("list_reply", {})
                            list_id = list_reply.get("id", "")
                            list_title = list_reply.get("title", "")
                            
                            return {
                                "phone_number": from_number,
                                "name": contact_name,
                                "message": list_title,
                                "list_id": list_id,
                                "type": "list"
                            }
            
            return None
        except Exception as e:
            logger.error(f"Error processing webhook event: {str(e)}")
            return None

# Helper function to get an initialized WhatsApp service
def get_whatsapp_service(db=None):
    """
    Get a WhatsApp service instance with current configuration
    """
    return WhatsAppService(db)import json
import logging
import re
from typing import Dict, Any, Optional, List
from datetime import datetime
from fastapi import APIRouter, Request, Depends, Query, HTTPException
from sqlalchemy.orm import Session
from transitions import Machine
from app.database import get_db
from app.services.whatsapp import WhatsAppService
from app import models
from app.models import ConversationState
from app.config import get_settings

SETTINGS = get_settings()

router = APIRouter()
logger = logging.getLogger(__name__)

# Initialize WhatsApp service - will be updated when configuration changes
whatsapp_service = WhatsAppService()


class ConversationStateMachine:
    """State machine for managing conversation flow"""
    
    def __init__(self, session, customer, db, whatsapp_service, initial_state=None):
        self.session = session
        self.customer = customer
        self.db = db
        self.whatsapp_service = whatsapp_service
        self.event_data = None
        self.current_group_id = None
        
        # Define states using the existing ConversationState enum
        states = [state.value for state in ConversationState]
        
        # Define transitions
        transitions = [
            # From INITIAL state
            {'trigger': 'welcome', 'source': ConversationState.INITIAL.value, 'dest': ConversationState.WELCOME.value},
            {'trigger': 'skip_to_idle', 'source': ConversationState.INITIAL.value, 'dest': ConversationState.IDLE.value},
            
            # From WELCOME state
            {'trigger': 'to_idle', 'source': ConversationState.WELCOME.value, 'dest': ConversationState.IDLE.value},
            
            # From IDLE state - menu options
            {'trigger': 'start_order', 'source': ConversationState.IDLE.value, 'dest': ConversationState.AWAITING_ORDER_DETAILS.value},
            {'trigger': 'track_orders', 'source': ConversationState.IDLE.value, 'dest': ConversationState.IDLE.value, 'after': 'handle_track_order'},
            {'trigger': 'cancel_order', 'source': ConversationState.IDLE.value, 'dest': ConversationState.IDLE.value, 'after': 'handle_cancel_order'},
            {'trigger': 'contact_support', 'source': ConversationState.IDLE.value, 'dest': ConversationState.WAITING_FOR_SUPPORT.value, 'after': 'handle_contact_support'},
            
            # From AWAITING_ORDER_DETAILS
            {'trigger': 'order_received', 'source': ConversationState.AWAITING_ORDER_DETAILS.value, 'dest': ConversationState.AWAITING_PAYMENT.value, 'after': 'create_order'},
            {'trigger': 'order_invalid', 'source': ConversationState.AWAITING_ORDER_DETAILS.value, 'dest': ConversationState.AWAITING_ORDER_DETAILS.value},
            
            # From AWAITING_PAYMENT
            {'trigger': 'mpesa_selected', 'source': ConversationState.AWAITING_PAYMENT.value, 'dest': ConversationState.AWAITING_PAYMENT_CONFIRMATION.value},
            {'trigger': 'cash_selected', 'source': ConversationState.AWAITING_PAYMENT.value, 'dest': ConversationState.IDLE.value, 'after': 'handle_cash_payment'},
            
            # From AWAITING_PAYMENT_CONFIRMATION
            {'trigger': 'payment_confirmed', 'source': ConversationState.AWAITING_PAYMENT_CONFIRMATION.value, 'dest': ConversationState.IDLE.value, 'after': 'handle_mpesa_confirmation'},
            
            # Global transitions (from any state)
            {'trigger': 'help', 'source': '*', 'dest': '=', 'after': 'send_help_message'},  # '=' means stay in current state
            {'trigger': 'reset', 'source': '*', 'dest': ConversationState.IDLE.value},
        ]
        
        # Initialize the machine
        initial = initial_state or session.current_state
        self.machine = Machine(
            model=self,
            states=states,
            transitions=transitions,
            initial=initial,
            ignore_invalid_triggers=True  # Don't raise errors for invalid transitions
        )
    
    def set_event_data(self, event_data, current_group_id=None):
        """Set the current event data for processing"""
        self.event_data = event_data
        self.current_group_id = current_group_id
    
    def on_exit_state(self):
        """Called when exiting any state - update database"""
        new_state_enum = ConversationState(self.state)
        self.session.update_state(new_state_enum)
        self.db.commit()
    
    # Callback methods for transitions
    async def handle_track_order(self):
        """Handle order tracking request"""
        await handle_track_order(
            self.customer.phone_number,
            self.customer.id,
            self.db,
            self.whatsapp_service
        )
    
    async def handle_cancel_order(self):
        """Handle order cancellation"""
        await handle_cancel_order(
            self.customer.phone_number,
            self.customer.id,
            self.db,
            self.whatsapp_service
        )
    
    async def handle_contact_support(self):
        """Handle support contact request"""
        group_id = self.current_group_id or self.customer.active_group_id or self.customer.group_id
        group = self.db.query(models.Group).filter(models.Group.id == group_id).first()
        await handle_contact_support(
            self.customer.phone_number,
            group,
            self.whatsapp_service
        )
    
    async def create_order(self):
        """Create a new order"""
        message = self.event_data.get("message", "")
        group_id = self.current_group_id or self.customer.active_group_id or self.customer.group_id
        await create_order(
            self.customer.phone_number,
            self.customer.id,
            group_id,
            message,
            self.db,
            self.whatsapp_service
        )
    
    async def handle_cash_payment(self):
        """Handle cash payment selection"""
        await handle_cash_payment(
            self.customer.phone_number,
            self.customer.id,
            self.db,
            self.whatsapp_service
        )
    
    async def handle_mpesa_confirmation(self):
        """Handle M-Pesa payment confirmation"""
        message = self.event_data.get("message", "")
        await handle_mpesa_confirmation(
            self.customer.phone_number,
            self.customer.id,
            message,
            self.db,
            self.whatsapp_service
        )
    
    async def send_help_message(self):
        """Send help message"""
        group_id = self.current_group_id or self.customer.active_group_id or self.customer.group_id
        group = self.db.query(models.Group).filter(models.Group.id == group_id).first()
        await send_help_message(
            self.customer.phone_number,
            group,
            self.whatsapp_service
        )


@router.get("/webhook")
async def verify_webhook(
    hub_mode: Optional[str] = Query(None, alias="hub.mode"),
    hub_challenge: Optional[str] = Query(None, alias="hub.challenge"),
    hub_verify_token: Optional[str] = Query(None, alias="hub.verify_token"),
):
    """
    Verify the webhook endpoint for WhatsApp
    """
    if hub_mode == "subscribe" and hub_verify_token == SETTINGS.webhook_verify_token:
        logger.info("Webhook verified successfully")
        return int(hub_challenge)
    
    logger.warning("Webhook verification failed")
    raise HTTPException(status_code=403, detail="Verification failed")

@router.post("/webhook")
async def process_webhook(request: Request, db: Session = Depends(get_db)):
    """
    Process incoming webhook events from WhatsApp
    """
    try:
        data = await request.json()
        logger.info(f"Received webhook data: {data}")
        
        # Process the webhook event data
        event_data = whatsapp_service.process_webhook_event(data)
        logger.info(f"Processed event data: {event_data}")
        
        if not event_data:
            logger.warning("No event data extracted from webhook payload")
            return {"success": True, "message": "Event processed but no action taken"}
        
        # Get the phone number of the sender
        phone_number = event_data.get("phone_number")
        if not phone_number:
            logger.warning("No phone number found in event data")
            return {"success": False, "error": "Missing phone number"}
        
        # Look for the customer across all groups first
        customer = db.query(models.Customer).filter(
            models.Customer.phone_number == phone_number
        ).first()
        
        # Extract the message and its type
        message = event_data.get("message", "").strip()
        message_type = event_data.get("type")
        
        # Extract current group context
        current_group_id = None
        
        # Check if this is the initial click-to-chat message which contains the group info
        if message_type == "text" and message.startswith("order from group:"):
            group_identifier = message.replace("order from group:", "").strip()
            # Sanitize the group_identifier
            group_identifier = group_identifier.lower().replace(" ", "-")
            group_identifier = re.sub(r'[^a-z0-9_-]', '', group_identifier)
            logger.info(f"Looking for group with sanitized identifier: {group_identifier}")
            
            group = db.query(models.Group).filter(
                models.Group.identifier == group_identifier,
                models.Group.is_active == True
            ).first()
            
            if group:
                current_group_id = group.id
                
                # If customer doesn't exist yet, create them
                if not customer:
                    customer = models.Customer(
                        phone_number=phone_number,
                        name=event_data.get("name", "New Customer"),
                        group_id=current_group_id,
                        active_group_id=current_group_id  # Set active group to current group
                    )
                    db.add(customer)
                    db.commit()
                    db.refresh(customer)
                    logger.info(f"Created new customer with ID {customer.id} for phone {phone_number}")
                else:
                    # If customer exists, update their active_group_id
                    customer.active_group_id = current_group_id
                    db.commit()
                    logger.info(f"Updated customer {customer.id} with active_group_id {current_group_id}")
                    
                # Now we need to reset or create a new conversation session since this is a new interaction
                # But only if it's not from an existing active conversation
                if customer:
                    session = models.ConversationSession.get_or_create_session(db, customer.id)
                    # Override the state to INITIAL since this is a new group interaction
                    session.update_state(ConversationState.INITIAL)
                    db.commit()
            
        # If we still don't have a customer record, we can't proceed
        if not customer:
            logger.warning(f"No customer found and couldn't create one. Sending help message to {phone_number}")
            # Send a welcome message guiding them to use a proper link
            welcome_msg = "👋 Welcome to our Order Bot!\n\n"
            welcome_msg += "It seems you're trying to place an order, but we couldn't identify which business you're trying to order from.\n\n"
            welcome_msg += "Please use the link that the business shared with you to start your order properly."
            whatsapp_service.send_text_message(phone_number, welcome_msg)
            return {"success": True, "message": "Sent help message to new customer"}
        
        # Now handle the customer's message with conversation context
        await handle_customer_message_with_context(customer, event_data, db, current_group_id)
        
        return {"success": True, "message": "Webhook processed successfully"}
    except Exception as e:
        logger.error(f"Error processing webhook: {str(e)}")
        return {"success": False, "error": str(e)}
    
async def handle_customer_message_with_context(customer, event_data, db, current_group_id=None):
    """
    Process the customer message with conversation context awareness using state machine
    """
    phone_number = customer.phone_number
    message = event_data.get("message", "").strip()
    message_type = event_data.get("type")
    button_id = event_data.get("button_id", "") if message_type == "button" else None
    
    # Get or create conversation session
    session = models.ConversationSession.get_or_create_session(db, customer.id)
    
    # Prioritize explicitly provided group_id, then active_group_id, then default group_id
    group_id = current_group_id or customer.active_group_id or customer.group_id
    
    # Debug log to help diagnose issues
    logger.info(f"CONVERSATION CONTEXT: state={session.current_state}, customer_id={customer.id}, group_id={group_id}")
    logger.info(f"Processing message: type={message_type}, content_preview={message[:30]}...")
    
    group = db.query(models.Group).filter(models.Group.id == group_id).first()
    
    # Create state machine instance
    sm = ConversationStateMachine(
        session=session,
        customer=customer,
        db=db,
        whatsapp_service=whatsapp_service,
        initial_state=session.current_state
    )
    
    # Set event data
    sm.set_event_data(event_data, current_group_id)
    
    # First, handle system-wide commands that override conversation state
    if is_help_command(message, message_type, button_id):
        await sm.help()
        return
        
    # Handle state transitions based on current state and input
    current_state = session.current_state
    
    # INITIAL state handling
    if current_state == ConversationState.INITIAL.value:
        if message_type == "text" and message.startswith("order from group:"):
            # New conversation from click-to-chat link
            await send_welcome_message(phone_number, group, whatsapp_service)
            sm.welcome()
            return
        else:
            # We're in INITIAL state but didn't get an initial group message
            sm.skip_to_idle()
    
    # Detect intent from message or button press
    intent = detect_customer_intent(message, message_type, button_id, current_state)
    
    # Handle state transitions based on intent
    if intent == "place_order":
        if sm.start_order():
            place_order_msg = "Please type your order details, including:\n\n"
            place_order_msg += "- Item names\n- Quantities\n- Any special requests\n\n"
            place_order_msg += "Example: 2 t-shirts size L, 1 hoodie black size XL"
            whatsapp_service.send_text_message(phone_number, place_order_msg)
        return
        
    elif intent == "track_order":
        await sm.track_orders()
        return
        
    elif intent == "cancel_order":
        await sm.cancel_order()
        return
        
    elif intent == "contact_support":
        await sm.contact_support()
        return
    
    elif intent == "mpesa_payment":
        if sm.mpesa_selected():
            mpesa_msg = "Please send your payment to our M-Pesa number and then share the transaction message/code/confirmation with us."
            whatsapp_service.send_text_message(phone_number, mpesa_msg)
        return
        
    elif intent == "cash_payment":
        await sm.cash_selected()
        return
    
    # Handle state-specific message processing
    if current_state == ConversationState.AWAITING_ORDER_DETAILS.value:
        # User is providing order details
        if message_type == "text" and len(message) > 5:
            await sm.order_received()
            return
        else:
            # Not enough detail, ask again
            sm.order_invalid()
            whatsapp_service.send_text_message(
                phone_number, 
                "Please provide more details about your order. Include items, quantities, and any special requests."
            )
            return
    
    elif current_state == ConversationState.AWAITING_PAYMENT_CONFIRMATION.value:
        # User is providing payment confirmation
        if is_mpesa_message(message, message_type):
            await sm.payment_confirmed()
            return
    
    elif current_state == ConversationState.WELCOME.value:
        # We sent welcome message but didn't get a valid menu selection
        # Send default options
        send_default_options(phone_number, whatsapp_service)
        sm.to_idle()
        return
    
    # If we reach here, we couldn't determine what to do
    # Send default options
    send_default_options(phone_number, whatsapp_service)
    if current_state != ConversationState.IDLE.value:
        sm.reset()


# Keep all existing helper functions unchanged
def detect_customer_intent(message, message_type, button_id, current_state, completed_order=False):
    """
    Detect customer intent from message content and type
    """
    # First priority: Check button_id for explicit intent
    if button_id:
        if button_id == "place_order":
            return "place_order"
        elif button_id == "track_order":
            return "track_order"
        elif button_id == "cancel_order":
            return "cancel_order"
        elif button_id == "contact_support":
            return "contact_support"
        elif button_id in ["mpesa_message", "pay_with_m-pesa"]:
            # Don't allow payment changes for completed orders
            if completed_order:
                return "invalid_payment_for_completed"
            return "mpesa_payment"
        elif button_id == "pay_cash":
            # Don't allow payment changes for completed orders
            if completed_order:
                return "invalid_payment_for_completed"
            return "cash_payment"
    
    # Second priority: Check message text for intent
    if message_type == "text":
        # Normalize message text
        normalized_message = message.lower().strip()
        
        # Check for order placement intent
        if normalized_message in ["place order", "order", "new order", "i want to order"]:
            return "place_order"
            
        # Check for order tracking intent
        if normalized_message in ["track order", "track my order", "where is my order", "my orders", "status"]:
            return "track_order"
            
        # Check for order cancellation intent
        if normalized_message in ["cancel order", "cancel my order", "cancel"]:
            return "cancel_order"
            
        # Check for support intent
        if normalized_message in ["support", "help", "contact", "contact support", "talk to agent"]:
            return "contact_support"
            
        # Check for payment intent - Only if not a completed order
        if not completed_order and ("mpesa" in normalized_message or "m-pesa" in normalized_message or "pay" in normalized_message):
            return "mpesa_payment"
            
        if not completed_order and ("cash" in normalized_message or "deliver" in normalized_message or "cod" in normalized_message):
            return "cash_payment"
    
    # No clear intent detected
    return None


def is_help_command(message, message_type, button_id):
    """Check if message is a help command"""
    if message_type == "text":
        help_terms = ["help", "menu", "options", "commands", "assist", "support"]
        normalized_message = message.lower().strip()
        return any(term == normalized_message for term in help_terms)
    return False

def is_mpesa_message(message, message_type):
    """Check if message is an M-Pesa confirmation"""
    if message_type != "text":
        return False
        
    # Comprehensive pattern matching for M-Pesa transaction messages
    return (
        (len(message) >= 8 and len(message) <= 12 and message.isalnum()) or 
        message.upper().startswith("M-PESA") or 
        "TRANSACTION" in message.upper() or
        "CONFIRMED" in message.upper() or
        "RECEIVED KSH" in message.upper() or
        "MPESA" in message.upper()
    )

async def send_welcome_message(phone_number, group, whatsapp_service):
    """Send welcome message with options"""
    if not group:
        whatsapp_service.send_text_message(
            phone_number, 
            "Sorry, we couldn't identify the business you're trying to order from. Please use the correct link."
        )
        return
    
    # Send welcome message with quick options
    welcome_message = f"👋 Welcome to {group.name}!\n\n"
    
    if group.welcome_message:
        welcome_message += f"{group.welcome_message}\n\n"
    
    welcome_message += "What would you like to do?"
    
    buttons = [
        {"id": "place_order", "title": "Place Order"},
        {"id": "track_order", "title": "Track My Order"},
    ]
    
    whatsapp_service.send_quick_reply_buttons(phone_number, welcome_message, buttons)

async def send_help_message(phone_number, group, whatsapp_service):
    """Send help message with available options"""
    help_message = "Here are the commands you can use:\n\n"
    help_message += "• Type 'Place Order' to place a new order\n"
    help_message += "• Type 'Track Order' to check your orders\n"
    help_message += "• Type 'Cancel Order' to cancel a pending order\n"
    help_message += "• Type 'Help' to see this menu again\n\n"
    
    if group and group.contact_phone:
        help_message += f"Need more help? Contact {group.name} directly at {group.contact_phone}"
    
    whatsapp_service.send_text_message(phone_number, help_message)

def send_default_options(phone_number, whatsapp_service):
    """Send default options menu"""
    default_message = "What would you like to do? Please choose an option below:"
    
    buttons = [
        {"id": "place_order", "title": "Place Order"},
        {"id": "track_order", "title": "Track My Order"},
        {"id": "contact_support", "title": "Contact Support"}
    ]
    
    whatsapp_service.send_quick_reply_buttons(phone_number, default_message, buttons)

async def handle_track_order(phone_number, customer_id, db, whatsapp_service: WhatsAppService):
    """Handle order tracking request with consolidated details in a single message"""
    # Find recent orders for this customer
    recent_orders = db.query(models.Order).filter(
        models.Order.customer_id == customer_id
    ).order_by(models.Order.created_at.desc()).limit(3).all()
    
    if not recent_orders:
        whatsapp_service.send_text_message(
            phone_number,
            "You don't have any recent orders. Would you like to place a new order?"
        )
        return
    
    # Create a single consolidated message for all orders
    consolidated_message = "📋 *YOUR RECENT ORDERS*\n\n"
    
    # Add each order to the consolidated message
    for i, order in enumerate(recent_orders, 1):
        # Get group name
        group_name = "Our store"
        if order.group_id:
            group = db.query(models.Group).filter(models.Group.id == order.group_id).first()
            if group:
                group_name = group.name
        
        # Status emoji mapping
        status_emoji = {
            'pending': '🕒',
            'processing': '⚙️',
            'completed': '✅',
            'cancelled': '❌',
            'refunded': '💰'
        }
        
        emoji = status_emoji.get(order.status.value.lower(), '')
        
        # Add order header with separator if not the first order
        if i > 1:
            consolidated_message += "\n\n" + ("-" * 30) + "\n\n"
            
        consolidated_message += f"{emoji} *Order #{order.order_number}*\n"
        consolidated_message += f"Status: {order.status.value.title()}\n"
        consolidated_message += f"Store: {group_name}\n"
        consolidated_message += f"Date: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        
        if order.total_amount > 0:
            consolidated_message += f"Amount: KSH {order.total_amount:.2f}\n"
        
        # Payment information
        if hasattr(order, 'payment_method') and order.payment_method:
            payment_method = order.payment_method.value.replace('_', ' ').title()
            consolidated_message += f"Payment Method: {payment_method}\n"
            
            if hasattr(order, 'payment_status') and order.payment_status:
                payment_status = order.payment_status.value.title()
                consolidated_message += f"Payment Status: {payment_status}\n"
                
            if hasattr(order, 'payment_ref') and order.payment_ref:
                consolidated_message += f"Reference: {order.payment_ref}\n"
        
        # Order items preview (shortened)
        if order.order_details:
            consolidated_message += f"\nItems: {order.order_details[:50]}"
            if len(order.order_details) > 50:
                consolidated_message += "..."
    
    # Add footer
    consolidated_message += "\n\nTo place a new order, type 'Place Order'."
    
    # Send the consolidated message
    whatsapp_service.send_text_message(phone_number, consolidated_message)

async def handle_cancel_order(phone_number, customer_id, db, whatsapp_service):
    """Handle order cancellation request"""
    # Find the customer's last pending order
    last_order = db.query(models.Order).filter(
        models.Order.customer_id == customer_id,
        models.Order.status == models.OrderStatus.PENDING
    ).order_by(models.Order.created_at.desc()).first()
    
    if last_order:
        last_order.status = models.OrderStatus.CANCELLED
        db.commit()
        whatsapp_service.send_text_message(
            phone_number, 
            f"Your order #{last_order.order_number} has been cancelled. We hope to serve you again soon!"
        )
    else:
        whatsapp_service.send_text_message(
            phone_number,
            "You don't have any pending orders to cancel."
        )

async def handle_contact_support(phone_number, group, whatsapp_service):
    """Handle support contact request"""
    support_msg = "Need help with your order? You can contact support:\n\n"
    
    if group and group.contact_phone:
        support_msg += f"📞 Phone: {group.contact_phone}\n"
        
    if group and group.contact_email:
        support_msg += f"📧 Email: {group.contact_email}\n"
    else:
        support_msg += "📧 Email: support@example.com\n"
        
    support_msg += "\nOr reply with your question and we'll get back to you soon!"
    
    whatsapp_service.send_text_message(phone_number, support_msg)

async def handle_cash_payment(phone_number, customer_id, db, whatsapp_service):
    """Handle cash on delivery payment option"""
    # Update the most recent pending order to cash on delivery
    last_order = db.query(models.Order).filter(
        models.Order.customer_id == customer_id,
        models.Order.status == models.OrderStatus.PENDING
    ).order_by(models.Order.created_at.desc()).first()
    
    if last_order:
        last_order.payment_method = models.PaymentMethod.CASH_ON_DELIVERY
        db.commit()
        
        # Send confirmation
        whatsapp_service.send_payment_confirmation(
            phone_number,
            {
                "method": "cash",
                "order_number": last_order.order_number
            }
        )
    else:
        whatsapp_service.send_text_message(
            phone_number,
            "Sorry, we couldn't find a pending order to update. Please place a new order first."
        )

async def handle_mpesa_confirmation(phone_number, customer_id, message, db, whatsapp_service: WhatsAppService):
    """Handle M-Pesa confirmation message with improved notifications"""
    # Extract what might be the transaction code
    transaction_code = message.upper()
    
    if len(message) > 12:  # Long message - try to extract code
        # Try to extract just the code from messages like "M-PESA TRANSACTION AB12345678"
        match = re.search(r'[A-Z0-9]{8,12}', transaction_code)
        if match:
            transaction_code = match.group(0)
            logger.info(f"Extracted transaction code: {transaction_code}")

    # Validate transaction_code length
    if len(transaction_code) > 50:
        raise HTTPException(status_code=400, detail="Transaction code too long (max 50 characters)")
    
    # Find the customer's most recent pending order
    last_order = db.query(models.Order).filter(
        models.Order.customer_id == customer_id,
        models.Order.status == models.OrderStatus.PENDING
    ).order_by(models.Order.created_at.desc()).first()
    
    if last_order:
        # Update the order with payment information
        last_order.payment_method = models.PaymentMethod.MPESA
        last_order.payment_ref = transaction_code
        last_order.payment_status = models.PaymentStatus.PAID  # Mark as paid but not verified
        db.commit()
        logger.info(f"Updated order {last_order.order_number} with M-Pesa payment: {transaction_code}")
        
        # Get group information for more detailed messaging
        group_name = "Our store"
        if last_order.group_id:
            group = db.query(models.Group).filter(models.Group.id == last_order.group_id).first()
            if group:
                group_name = group.name
        
        # Use the payment status update template
        payment_data = {
            "order_number": last_order.order_number,
            "payment_status": last_order.payment_status.value,
            "payment_method": "M-Pesa",
            "payment_ref": transaction_code,
            "amount": last_order.total_amount
        }
        
        whatsapp_service.send_payment_status_update(phone_number, payment_data)
    else:
        logger.warning(f"Received M-Pesa payment but no pending order found for customer {customer_id}")
        whatsapp_service.send_text_message(
            phone_number,
            "Thank you for the payment information, but we couldn't find a pending order. Please place an order first."
        )

async def create_order(phone_number, customer_id, group_id, message, db, whatsapp_service: WhatsAppService):
    """Create a new order from customer details with improved notifications"""
    try:
        logger.info(f"Creating new order for customer {customer_id} in group {group_id}")
        
        # Validate message length for order_details
        if len(message) > 1000:
            raise HTTPException(status_code=400, detail="Order details too long (max 1000 characters)")

        # Create a new order with the text as details
        order = models.Order(
            customer_id=customer_id,
            group_id=group_id,
            order_details=message,
            status=models.OrderStatus.PENDING,
            total_amount=0.00  # This will be updated by the admin later
        )
        
        db.add(order)
        db.commit()
        db.refresh(order)
        logger.info(f"Created new order with ID {order.id}, number {order.order_number}")
        
        # Get group information for more detailed messaging
        group_name = "Our store"
        if group_id:
            group = db.query(models.Group).filter(models.Group.id == group_id).first()
            if group:
                group_name = group.name
        
        # Send order confirmation with payment options
        # We'll continue to use the specific order_confirmation template
        # because it includes the payment buttons
        whatsapp_service.send_order_confirmation(
            phone_number,
            {
                "order_number": order.order_number,
                "items": message,
                "total_amount": order.total_amount,
                "group_name": group_name  
            }
        )
    except Exception as e:
        logger.error(f"Error creating order: {str(e)}")
        whatsapp_service.send_text_message(
            phone_number,
            "Sorry, we couldn't process your order. Please try again or contact support."
        )import json
import logging
from datetime import datetime, timedelta
import re
from typing import Optional, List
from fastapi import APIRouter, Depends, HTTPException, status, Form, Request
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.templating import Jinja2Templates
from jose import JWTError, jwt
from sqlalchemy.orm import Session
from app.database import get_db
from app import models
from pathlib import Path
from urllib.parse import quote
from passlib.context import CryptContext  # Added for password hashing
from app.config import get_settings

settings = get_settings()


router = APIRouter()
logger = logging.getLogger(__name__)

# Setup templates
templates = Jinja2Templates(directory=Path(__file__).parent.parent / "templates")

# OAuth2 password bearer
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="admin/login")

# JWT settings
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60
WHATSAPP_PHONE_NUMBER = settings.whatsapp_phone_number
WHATSAPP_API_URL = settings.whatsapp_api_url
WHATSAPP_PHONE_ID = settings.whatsapp_phone_id
WHATSAPP_API_TOKEN = settings.whatsapp_api_token
WHATSAPP_VERIFY_TOKEN = settings.webhook_verify_token
WEBHOOK_VERIFY_TOKEN = settings.webhook_verify_token

# Password context for hashing and verification
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    """
    Verify a password against a hash
    """
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    """
    Hash a password for storing
    """
    return pwd_context.hash(password)


# Replace the old get_current_admin with this
async def get_current_admin(
    request: Request,
    db: Session = Depends(get_db)
):
    # Get token from cookie
    token = request.cookies.get("access_token")
    if not token:
        return RedirectResponse(url="/admin/login", status_code=303)
    
    # Remove "Bearer " prefix if present
    if token.startswith("Bearer "):
        token = token[7:]
    
    try:
        payload = jwt.decode(token, settings.secret_key, algorithms=[settings.algorithm])
        username: str = payload.get("sub")
        if username is None:
            return RedirectResponse(url="/admin/login", status_code=303)
    except JWTError:
        return RedirectResponse(url="/admin/login", status_code=303)
    
    user = db.query(models.User).filter(models.User.username == username).first()
    if user is None or user.role not in [models.UserRole.CLIENT_ADMIN, models.UserRole.SUPER_ADMIN]:
        return RedirectResponse(url="/admin/login", status_code=303)
    
    return user


@router.get("/admin/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """
    Render the login page
    """
    return templates.TemplateResponse("login.html", {"request": request})


@router.post("/admin/login")
async def login(
    form_data: OAuth2PasswordRequestForm = Depends(), 
    db: Session = Depends(get_db)
):
    """
    Login endpoint for admin users
    """
    def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
        """
        Create a JWT access token
        """
        to_encode = data.copy()
        if expires_delta:
            expire = datetime.utcnow() + expires_delta
        else:
            expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        
        to_encode.update({"exp": expire})
        encoded_jwt = jwt.encode(to_encode, settings.secret_key, algorithm=ALGORITHM)
        return encoded_jwt
    
    user = db.query(models.User).filter(models.User.username == form_data.username).first()
    
    # Check if user exists, has admin role, and password is correct
    if not user or user.role not in [models.UserRole.CLIENT_ADMIN, models.UserRole.SUPER_ADMIN] or not verify_password(form_data.password, user.password_hash):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # Update last login timestamp
    user.last_login = datetime.utcnow()
    db.commit()
    
    # Create access token
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    
    # Return token as cookie and redirect to dashboard
    response = RedirectResponse(url="/admin/dashboard", status_code=303)
    response.set_cookie(
        key="access_token", 
        value=f"Bearer {access_token}", 
        httponly=True,
        max_age=3600,  # 1 hour expiry
        samesite="lax"  # This helps with security but allows redirects
    )
    return response

@router.get("/admin/logout")
async def logout():
    """
    Logout and clear the session cookie
    """
    response = RedirectResponse(url="/admin/login", status_code=303)
    response.delete_cookie(key="access_token")
    return response


@router.get("/admin/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request, db: Session = Depends(get_db)):
    """
    Admin dashboard page
    """
    # Get the current admin user from the cookie
    current_admin = await get_current_admin(request, db)
    if isinstance(current_admin, RedirectResponse):
        return current_admin
    
    # Add debugging logs
    logger.info(f"Dashboard: User {current_admin.username}, role: {current_admin.role}")
    group_ids = [group.id for group in current_admin.groups]
    logger.info(f"User groups: {group_ids}")
    
    # Get all orders if super admin, or filter by groups if client admin
    query = db.query(models.Order)

    if current_admin.role != models.UserRole.SUPER_ADMIN:
        if not current_admin.groups:
            logger.info(f"User {current_admin.username} has no groups, showing no orders")
            query = query.filter(False)  # Empty result set
        else:
            group_ids = [group.id for group in current_admin.groups]
            logger.info(f"Filtering dashboard orders for groups: {group_ids}")
            query = query.filter(models.Order.group_id.in_(group_ids))
            logger.info(f"SQL Query: {str(query.statement.compile(dialect=db.bind.dialect))}")
        
    # Execute the query to get recent orders
    orders = query.order_by(models.Order.created_at.desc()).limit(10).all()
    
    # Get order statistics - use THE SAME filtering logic as for orders
    base_query = db.query(models.Order)
    if current_admin.role != models.UserRole.SUPER_ADMIN:
        if not current_admin.groups:
            # If admin has no groups, show zero counts
            base_query = base_query.filter(False)  # Empty result set
        else:
            group_ids = [group.id for group in current_admin.groups]
            base_query = base_query.filter(models.Order.group_id.in_(group_ids))
    
    total_orders = base_query.count()
    pending_orders = base_query.filter(models.Order.status == models.OrderStatus.PENDING).count()
    completed_orders = base_query.filter(models.Order.status == models.OrderStatus.COMPLETED).count()
    
    # Add pagination variables
    page_size = 10
    total_pages = (total_orders + page_size - 1) // page_size if total_orders > 0 else 1
    current_page = 1
    
    return templates.TemplateResponse(
        "dashboard.html",
        {
            "request": request,
            "admin": current_admin,
            "orders": orders,
            "total_orders": total_orders,
            "pending_orders": pending_orders,
            "completed_orders": completed_orders,
            "total_pages": total_pages,
            "current_page": current_page
        }
    )

@router.get("/admin/orders", response_class=HTMLResponse)
async def view_orders(
    request: Request,
    status: Optional[str] = None,
    page: int = 1,
    db: Session = Depends(get_db)
):
    """
    View and manage orders
    """
    # Get the current admin user from the cookie
    current_admin = await get_current_admin(request, db)
    if isinstance(current_admin, RedirectResponse):
        return current_admin
    # Add debugging logs
    logger.info(f"Orders view: User {current_admin.username}, role: {current_admin.role}")
    group_ids = [group.id for group in current_admin.groups]
    logger.info(f"User groups: {group_ids}")
    
    # Base query for orders - initialize FIRST
    query = db.query(models.Order)
    
    # Filter orders by user's groups if not super admin
    if current_admin.role != models.UserRole.SUPER_ADMIN:
        if not current_admin.groups:
            logger.info(f"User {current_admin.username} has no groups, showing no orders")
            query = query.filter(False)
        else:
            group_ids = [group.id for group in current_admin.groups]
            logger.info(f"Filtering orders for groups: {group_ids}")
            # Apply the filter BEFORE any execution
            query = query.filter(models.Order.group_id.in_(group_ids))
            logger.info(f"SQL Query: {str(query.statement.compile(dialect=db.bind.dialect))}")
    
    # Apply additional filters (status filter)
    if status:
        try:
            order_status = models.OrderStatus(status)
            query = query.filter(models.Order.status == order_status)
        except ValueError:
            # Invalid status, ignore filter
            pass
    
    # Get total count for pagination
    total_orders = query.count()
    logger.info(f"Total filtered orders: {total_orders}")
    
    page_size = 20  # Number of orders per page
    # Get paginated orders
    orders = query.order_by(models.Order.created_at.desc()) \
        .offset((page - 1) * page_size) \
        .limit(page_size) \
        .all()
    
    # Get customer information for each order
    customer_info = {}
    for order in orders:
        customer = db.query(models.Customer).filter(models.Customer.id == order.customer_id).first()
        if customer:
            customer_info[order.id] = customer
    
    # Calculate pagination info
    total_pages = (total_orders + page_size - 1) // page_size
    
    return templates.TemplateResponse(
        "orders.html",
        {
            "request": request,
            "admin": current_admin,
            "orders": orders,
            "customer_info": customer_info,
            "current_page": page,
            "total_pages": total_pages,
            "total_orders": total_orders,
            "status_filter": status,
            "order_statuses": [status.value for status in models.OrderStatus]
        }
    )


def check_admin_has_access_to_group(admin, group_id, db):
    """Check if an admin has access to a specific group"""
    if admin.role == models.UserRole.SUPER_ADMIN:
        return True
    
    # Check if admin is a member of this group
    return any(group.id == group_id for group in admin.groups)


@router.post("/admin/orders/{order_id}/status")
async def update_order_status(
    order_id: int,
    status: str = Form(...),
    payment_status: Optional[str] = Form(None),
    payment_ref: Optional[str] = Form(None),
    total_amount: Optional[float] = Form(None),
    notify_customer: bool = Form(False),
    request: Request = None,
    db: Session = Depends(get_db)
):
    # Get the current admin user
    current_admin = await get_current_admin(request, db)
    if isinstance(current_admin, RedirectResponse):
        return current_admin
    
    # Get the order
    order = db.query(models.Order).filter(models.Order.id == order_id).first()
    if not order:
        raise HTTPException(status_code=404, detail="Order not found")
    
    # Check if admin has access to this order's group
    if not check_admin_has_access_to_group(current_admin, order.group_id, db):
        raise HTTPException(status_code=403, detail="You don't have permission to update this order")

    # Get previous status for change detection
    previous_status = order.status
    previous_payment_status = order.payment_status
    
    try:
        # Update the order status using enum
        order.status = models.OrderStatus(status)
        
        # Update payment status if provided
        if payment_status:
            order.payment_status = models.PaymentStatus(payment_status)
        
        # Update payment reference if provided
        if payment_ref:
            if len(payment_ref) > 50:
                raise HTTPException(status_code=400, detail="Payment reference too long (max 50 characters)")
            order.payment_ref = payment_ref
        
        # Update total amount if provided
        if total_amount is not None:
            try:
                order.total_amount = float(total_amount)
            except ValueError:
                raise HTTPException(status_code=400, detail="Invalid amount value")
        
        # Add a timestamp for the update
        order.updated_at = datetime.utcnow()
        db.commit()
        
        logger.info(f"Order {order.order_number} updated by {current_admin.username}")
    except ValueError as e:
        raise HTTPException(status_code=400, detail=f"Invalid status value: {str(e)}")
    
    # Notify customer if requested
    if notify_customer:
        # Check if we can send a notification (prevent duplicates)
        if not hasattr(order, 'can_send_notification') or order.can_send_notification():
            try:
                # Get customer information
                customer = db.query(models.Customer).filter(models.Customer.id == order.customer_id).first()
                if customer:
                    # Import the WhatsApp service directly and initialize with DB session
                    from app.services.whatsapp import WhatsAppService
                    whatsapp_service = WhatsAppService(db)
                    
                    # Get group name for personalized messages
                    group_name = order.group.name if order.group else "Our store"
                    
                    # Determine if we should use order update or payment update notification
                    if previous_payment_status != order.payment_status and order.payment_method:
                        # Payment status has changed, so send a payment update notification
                        payment_data = {
                            "order_number": order.order_number,
                            "payment_status": order.payment_status.value,
                            "payment_method": order.payment_method.value.replace('_', ' ').title(),
                            "payment_ref": order.payment_ref or "",
                            "amount": order.total_amount
                        }
                        
                        # Send payment status update notification
                        whatsapp_service.send_payment_status_update(
                            customer.phone_number,
                            payment_data
                        )
                    else:
                        # Send a comprehensive order status update
                        order_data = {
                            "order_number": order.order_number,
                            "status": order.status.value,
                            "group_name": group_name,
                            "total_amount": order.total_amount,
                            "created_at": order.created_at.strftime('%Y-%m-%d %H:%M'),
                            "order_details": order.order_details
                        }
                        
                        # Add payment information if available
                        if order.payment_method:
                            order_data["payment_method"] = order.payment_method.value.replace('_', ' ').title()
                            
                            if order.payment_status:
                                order_data["payment_status"] = order.payment_status.value.title()
                            
                            if order.payment_ref:
                                order_data["payment_ref"] = order.payment_ref
            
                        # Send order status update notification
                        whatsapp_service.send_order_status_update(
                            customer.phone_number,
                            order_data
                        )
                    
                    # Record that we sent a notification
                    if hasattr(order, 'record_notification'):
                        order.record_notification()
                        db.commit()
                    else:
                        # Fallback for existing orders without the notification tracking fields
                        # Store the last notification time in session to prevent duplicates
                        session_key = f"last_notification_{order.id}"
                        request.session[session_key] = datetime.utcnow().isoformat()
                    
                    # If order is completed, ask for feedback
                    if order.status == models.OrderStatus.COMPLETED and previous_status != models.OrderStatus.COMPLETED:
                        buttons = [
                            {"id": "feedback_good", "title": "👍 Great!"},
                            {"id": "feedback_ok", "title": "👌 It was OK"},
                            {"id": "feedback_bad", "title": "👎 Had issues"}
                        ]
                        whatsapp_service.send_quick_reply_buttons(
                            customer.phone_number, 
                            "How was your experience with this order? We'd love your feedback!",
                            buttons
                        )
            except Exception as e:
                logger.error(f"Error sending notification: {str(e)}")
                # Continue with redirect even if notification fails
        else:
            logger.info(f"Skipping duplicate notification for order {order.order_number}")
    
    # Redirect back to the orders page
    return RedirectResponse(url="/admin/orders", status_code=303)



@router.get("/admin/groups", response_class=HTMLResponse)
async def list_groups(
    request: Request,
    category: Optional[str] = None,
    page: int = 1,
    db: Session = Depends(get_db)
):
    """
    List and manage groups
    """
    # Get the current admin user from the cookie
    current_admin = await get_current_admin(request, db)
    if isinstance(current_admin, RedirectResponse):
        return current_admin
    # Number of groups per page
    page_size = 20
    
    # Base query for groups
    query = db.query(models.Group)
    
    # Filter groups by user's associations if not super admin
    if current_admin.role != models.UserRole.SUPER_ADMIN:
        query = query.join(models.Group.users).filter(models.User.id == current_admin.id)
    
    # Get all categories for filter dropdown
    categories = db.query(models.Group.category).distinct().all()
    categories = [cat[0] for cat in categories if cat[0]]
    
    # Filter groups by category if provided
    if category:
        query = query.filter(models.Group.category == category)
    
    # Get total count for pagination
    total_groups = query.count()
    
    # Get paginated groups
    groups = query.order_by(models.Group.name) \
        .offset((page - 1) * page_size) \
        .limit(page_size) \
        .all()
    
    # Calculate pagination info
    total_pages = (total_groups + page_size - 1) // page_size
    
    # Get the WhatsApp phone number without the "+" for the link
    whatsapp_phone = settings.whatsapp_phone_number
    if whatsapp_phone and whatsapp_phone.startswith("+"):
        whatsapp_phone = whatsapp_phone[1:]
    
    return templates.TemplateResponse(
        "groups.html",
        {
            "request": request,
            "admin": current_admin,
            "groups": groups,
            "categories": categories,
            "current_page": page,
            "total_pages": total_pages,
            "total_groups": total_groups,
            "category_filter": category,
            "whatsapp_phone": whatsapp_phone
        }
    )

@router.get("/admin/groups/new", response_class=HTMLResponse)
async def new_group_form(
    request: Request,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Form to create a new group
    """
    # Get all categories for dropdown
    categories = db.query(models.Group.category).distinct().all()
    categories = [cat[0] for cat in categories if cat[0]]
    
    return templates.TemplateResponse(
        "group_form.html",
        {
            "request": request,
            "admin": current_admin,
            "categories": categories,
            "group": None,  # No existing group for a new form
        }
    )

# Helper functions for handling JSON with SQLite
def parse_json_from_db(json_str):
    """Parse a JSON string from the database into a Python object.
    Returns an empty dict/list if the input is None or invalid.
    """
    if not json_str:
        return {}
    
    try:
        return json.loads(json_str)
    except (json.JSONDecodeError, TypeError):
        # Return empty dict/list for invalid JSON
        return {}

def validate_json_input(json_str, expected_type=list):
    """Validate that a JSON string is valid and of the expected type.
    Raises HTTPException if validation fails.
    """
    try:
        parsed = json.loads(json_str)
        if not isinstance(parsed, expected_type):
            raise HTTPException(
                status_code=400, 
                detail=f"JSON data must be a {expected_type.__name__}"
            )
        return True
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Invalid JSON format")

@router.post("/admin/groups/new")
async def create_group(
    name: str = Form(...),
    identifier: str = Form(...),
    description: str = Form(""),
    category: str = Form(""),
    welcome_message: str = Form(""),
    is_active: bool = Form(True),
    request: Request = None,
    db: Session = Depends(get_db)
):
    """
    Create a new group
    """
    # Get the current admin user
    current_admin = await get_current_admin(request, db)
    if isinstance(current_admin, RedirectResponse):
        return current_admin
    
    # Sanitize the identifier
    sanitized_identifier = identifier.lower().replace(" ", "-")
    sanitized_identifier = re.sub(r'[^a-z0-9_-]', '', sanitized_identifier)
    
    # Check if identifier already exists
    existing = db.query(models.Group).filter(models.Group.identifier == sanitized_identifier).first()
    if existing:
        raise HTTPException(status_code=400, detail="Group identifier already exists")
    
    group = models.Group(
        name=name,
        identifier=sanitized_identifier,
        description=description,
        category=category,
        welcome_message=welcome_message,
        is_active=is_active
    )
    
    db.add(group)
    db.commit()
    db.refresh(group)  # Refresh to get the new ID
    
    # Add the current admin to this group if they're not a super admin
    if current_admin.role != models.UserRole.SUPER_ADMIN:
        current_admin.groups.append(group)
        db.commit()
    
    return RedirectResponse(url="/admin/groups", status_code=303)



@router.post("/admin/groups/{group_id}/edit")
async def update_group(
    group_id: int,
    name: str = Form(...),
    identifier: str = Form(...),
    description: str = Form(""),
    category: str = Form(""),
    welcome_message: str = Form(""),
    is_active: bool = Form(True),
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Update an existing group
    """
    # Get the group
    group = db.query(models.Group).filter(models.Group.id == group_id).first()
    if not group:
        raise HTTPException(status_code=404, detail="Group not found")
    
    # Sanitize the identifier
    sanitized_identifier = identifier.lower().replace(" ", "-")
    sanitized_identifier = re.sub(r'[^a-z0-9_-]', '', sanitized_identifier)
    
    # Check if identifier already exists (for another group)
    existing = db.query(models.Group).filter(
        models.Group.identifier == sanitized_identifier,
        models.Group.id != group_id
    ).first()
    if existing:
        raise HTTPException(status_code=400, detail="Group identifier already exists")
    
    
    # Update group - store JSON as string for SQLite compatibility
    group.name = name
    group.identifier = sanitized_identifier,
    group.description = description,
    group.description = description
    group.category = category
    group.welcome_message = welcome_message
    group.is_active = is_active
    group.updated_at = datetime.utcnow()
    
    db.commit()
    
    return RedirectResponse(url="/admin/groups", status_code=303)


# Template filter to properly parse JSON from db for display
@router.get("/admin/groups/{group_id}/edit", response_class=HTMLResponse)
async def edit_group_form(
    group_id: int,
    request: Request,
    db: Session = Depends(get_db)
):
    """
    Form to edit an existing group
    """
    # Get the current admin user
    current_admin = await get_current_admin(request, db)
    if isinstance(current_admin, RedirectResponse):
        return current_admin
    # Get the group
    group = db.query(models.Group).filter(models.Group.id == group_id).first()
    if not group:
        raise HTTPException(status_code=404, detail="Group not found")
    
    # Check permissions - only allow super admins or admins assigned to this group
    if current_admin.role != models.UserRole.SUPER_ADMIN:
        if group not in current_admin.groups:
            raise HTTPException(status_code=403, detail="You don't have permission to edit this group")
    
    # Get all categories for dropdown
    categories = db.query(models.Group.category).distinct().all()
    categories = [cat[0] for cat in categories if cat[0]]
    if group.category and group.category not in categories:
        categories.append(group.category)
    
    return templates.TemplateResponse(
        "group_form.html",
        {
            "request": request,
            "admin": current_admin,
            "group": group,
            "categories": categories,
        }
    )

@router.post("/admin/groups/{group_id}/delete")
async def delete_group(
    group_id: int,
    request: Request,
    db: Session = Depends(get_db)
):
    """
    Delete a group
    """
    # Get the current admin user
    current_admin = await get_current_admin(request, db)
    if isinstance(current_admin, RedirectResponse):
        return current_admin
    # Get the group
    group = db.query(models.Group).filter(models.Group.id == group_id).first()
    if not group:
        raise HTTPException(status_code=404, detail="Group not found")
    
    # Check permissions - only allow super admins or admins assigned to this group
    if current_admin.role != models.UserRole.SUPER_ADMIN:
        if group not in current_admin.groups:
            raise HTTPException(status_code=403, detail="You don't have permission to delete this group")
    
    # Delete the group
    db.delete(group)
    db.commit()
    
    return RedirectResponse(url="/admin/groups", status_code=303)

@router.get("/admin/settings", response_class=HTMLResponse)
async def settings_page(
    request: Request,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    System-wide settings page
    """
    try:
        # Get all configurations
        configs = db.query(models.Configuration).all()
        
        # Check for success or error messages from the query parameters
        success_message = request.query_params.get('success')
        error_message = request.query_params.get('error')
        
        # WhatsApp config keys that should be in the database
        whatsapp_config_keys = [
            'whatsapp_phone_number',
            'whatsapp_api_url',
            'whatsapp_phone_id',
            'whatsapp_api_token',
            'webhook_verify_token'
        ]
        
        # General config keys
        general_config_keys = [
            'business_name',
            'default_welcome_message'
        ]
        
        # Ensure all expected config keys exist in the database
        for key in whatsapp_config_keys + general_config_keys:
            config = db.query(models.Configuration).filter(models.Configuration.key == key).first()
            if not config:
                # Get default value from environment variables for WhatsApp settings
                default_value = ""
                description = ""
                
                if key == 'whatsapp_phone_number':
                    default_value = WHATSAPP_PHONE_NUMBER.replace('+', '') if WHATSAPP_PHONE_NUMBER else ''
                    description = 'WhatsApp Business Phone Number (without + prefix)'
                elif key == 'whatsapp_api_url':
                    default_value = WHATSAPP_API_URL or ''
                    description = 'WhatsApp API URL'
                elif key == 'whatsapp_phone_id':
                    default_value = WHATSAPP_PHONE_ID or ''
                    description = 'WhatsApp Phone ID'
                elif key == 'whatsapp_api_token':
                    default_value = WHATSAPP_API_TOKEN or ''
                    description = 'WhatsApp API Token'
                elif key == 'webhook_verify_token':
                    default_value = WEBHOOK_VERIFY_TOKEN or ''
                    description = 'Webhook Verification Token'
                elif key == 'business_name':
                    description = 'Business Name'
                elif key == 'default_welcome_message':
                    description = 'Default welcome message for new customers'
                
                # Create the configuration entry
                new_config = models.Configuration(
                    key=key,
                    value=default_value,
                    description=description
                )
                db.add(new_config)
                db.commit()
                
                # Add to the configs list
                configs.append(new_config)
        
        return templates.TemplateResponse(
            "settings.html",
            {
                "request": request,
                "admin": current_admin,
                "configs": configs,
                "success_message": success_message,
                "error_message": error_message
            }
        )
    except Exception as e:
        logger.error(f"Error loading settings page: {str(e)}")
        return templates.TemplateResponse(
            "settings.html",
            {
                "request": request,
                "admin": current_admin,
                "configs": [],
                "success_message": None,
                "error_message": f"Error loading settings: {str(e)}"
            }
        )

@router.post("/admin/settings/update")
async def update_settings(
    request: Request,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Update system settings
    """
    try:
        form_data = await request.form()
        
        # Get all form fields with 'config_' prefix
        updated_count = 0
        for key, value in form_data.items():
            if key.startswith('config_'):
                config_key = key.replace('config_', '')
                if len(config_key) > 255:
                    raise HTTPException(status_code=400, detail=f"Configuration key '{config_key}' too long (max 255 characters)")
                if len(value) > 10000: # Assuming a reasonable max length for text config values
                    raise HTTPException(status_code=400, detail=f"Configuration value for '{config_key}' too long (max 10000 characters)")
                models.Configuration.set_value(db, config_key, value)
                updated_count += 1
        
        # Redirect with success message
        return RedirectResponse(
            url=f"/admin/settings?success=Successfully updated {updated_count} settings", 
            status_code=303
        )
    except Exception as e:
        logger.error(f"Error updating settings: {str(e)}")
        return RedirectResponse(
            url=f"/admin/settings?error={str(e)}", 
            status_code=303
        )

@router.post("/admin/reload-whatsapp-config")
async def reload_whatsapp_config(
    request: Request,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Reload the WhatsApp service with the latest database configuration
    """
    # Only super admins can reload the configuration
    if current_admin.role != models.UserRole.SUPER_ADMIN:
        return JSONResponse(status_code=403, content={
            "success": False,
            "message": "Only super admins can reload WhatsApp configuration"
        })
    
    try:
        # Create a new WhatsApp service instance with the latest config
        from app.services.whatsapp import WhatsAppService
        
        # Update the webhook router's service instance
        import app.routers.webhook as webhook_router
        webhook_router.whatsapp_service = WhatsAppService(db)
        
        logger.info(f"WhatsApp configuration reloaded by admin: {current_admin.username}")
        
        return JSONResponse(content={
            "success": True,
            "message": "WhatsApp configuration reloaded successfully"
        })
    except Exception as e:
        logger.error(f"Error reloading WhatsApp configuration: {str(e)}")
        return JSONResponse(status_code=500, content={
            "success": False,
            "message": f"Error reloading configuration: {str(e)}"
        })


@router.post("/admin/test-whatsapp-connection")
async def test_whatsapp_connection(
    request: Request,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Test WhatsApp connection by sending a test message
    """
    # Only super admins can test the connection
    if current_admin.role != models.UserRole.SUPER_ADMIN:
        return JSONResponse(status_code=403, content={
            "success": False,
            "message": "Only super admins can test WhatsApp connection"
        })
    
    try:
        # Get request data
        data = await request.json()
        phone_number = data.get("phone_number")
        
        if not phone_number:
            return JSONResponse(status_code=400, content={
                "success": False,
                "message": "Phone number is required"
            })
        
        # Create a WhatsApp service instance with database configuration
        from app.services.whatsapp import WhatsAppService
        whatsapp_service = WhatsAppService(db)
        
        # Send a test message
        test_message = "🧪 This is a test message from your WhatsApp Order Bot. If you received this, your API configuration is working correctly! Time: " + datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        result = whatsapp_service.send_text_message(phone_number, test_message)
        
        # Check for errors in the result
        if "error" in result:
            return JSONResponse(status_code=400, content={
                "success": False,
                "message": f"Error sending test message: {result.get('error')}"
            })
        
        logger.info(f"Successfully sent test message to {phone_number}")
        
        return JSONResponse(content={
            "success": True,
            "message": "Test message sent successfully"
        })
    except Exception as e:
        logger.error(f"Error testing WhatsApp connection: {str(e)}")
        return JSONResponse(status_code=500, content={
            "success": False,
            "message": f"Error testing connection: {str(e)}"
        })
    

@router.get("/admin/groups/link-generator", response_class=HTMLResponse)
async def link_generator(
    request: Request,
    group_id: Optional[int] = None,
    db: Session = Depends(get_db)
):
    """
    WhatsApp link generator tool with optional pre-selected group
    """
    try:
        # Get the current admin user
        current_admin = await get_current_admin(request, db)
        if isinstance(current_admin, RedirectResponse):
            return current_admin
        # Filter groups based on admin role
        if current_admin.role != models.UserRole.SUPER_ADMIN:
            groups = db.query(models.Group).filter(
                models.Group.is_active == True,
                models.Group.users.any(models.User.id == current_admin.id)
            ).order_by(models.Group.name).all()
        else:
            groups = db.query(models.Group).filter(
                models.Group.is_active == True
            ).order_by(models.Group.name).all()
        
        if not groups:
            # Handle case where no groups exist yet
            return templates.TemplateResponse(
                "link_generator.html",
                {
                    "request": request,
                    "admin": current_admin,
                    "groups": [],
                    "whatsapp_phone": "",
                    "error_message": "No active groups found. Please create a group first."
                }
            )
        
        # Get the WhatsApp phone number from database settings
        whatsapp_phone = models.Configuration.get_value(db, 'whatsapp_phone_number', '')
        
        # If no phone number in database, try to get from environment
        if not whatsapp_phone and settings.whatsapp_phone_number:
            whatsapp_phone = settings.whatsapp_phone_number
            if whatsapp_phone.startswith("+"):
                whatsapp_phone = whatsapp_phone[1:]
            
            # Save this to the database for future use
            models.Configuration.set_value(
                db, 
                'whatsapp_phone_number', 
                whatsapp_phone, 
                'WhatsApp Business Phone Number (without + prefix)'
            )
            logger.info("WhatsApp phone number saved to database from environment variable")
        
        # Get pre-selected group if group_id is provided
        selected_group = None
        if group_id:
            selected_group = db.query(models.Group).filter(
                models.Group.id == group_id, 
                models.Group.is_active == True
            ).first()
        
        # Handle pre-generating link if group is selected
        generated_link = None
        generated_message = None
        if selected_group:
            phone = whatsapp_phone
            message_text = f"order from group:{selected_group.identifier}"
            encoded_message = quote(message_text)
            generated_link = f"https://wa.me/{phone}?text={encoded_message}"
            generated_message = message_text
        
        return templates.TemplateResponse(
            "link_generator.html",
            {
                "request": request,
                "admin": current_admin,
                "groups": groups,
                "whatsapp_phone": whatsapp_phone,
                "selected_group": selected_group,
                "generated_link": generated_link,
                "generated_message": generated_message
            }
        )
    except Exception as e:
        logger.error(f"Error in link generator: {str(e)}")
        return templates.TemplateResponse(
            "link_generator.html",
            {
                "request": request,
                "admin": current_admin,
                "groups": [],
                "whatsapp_phone": "",
                "error_message": f"An error occurred: {str(e)}"
            }
        )

# User Management Routes - SUPER_ADMIN only

def check_super_admin(user: models.User):
    """Check if user is a super admin"""
    if user.role != models.UserRole.SUPER_ADMIN:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Only super admins can manage users"
        )
    return True

@router.get("/admin/users", response_class=HTMLResponse)
async def list_users(
    request: Request,
    page: int = 1,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    List all users - SUPER_ADMIN only
    """
    # Check if current user is a super admin
    check_super_admin(current_admin)
    
    # Number of users per page
    page_size = 20
    
    # Get total count for pagination
    total_users = db.query(models.User).count()
    
    # Get paginated users
    users = db.query(models.User) \
        .order_by(models.User.created_at.desc()) \
        .offset((page - 1) * page_size) \
        .limit(page_size) \
        .all()
    
    # Calculate pagination info
    total_pages = (total_users + page_size - 1) // page_size
    
    return templates.TemplateResponse(
        "users.html",
        {
            "request": request,
            "admin": current_admin,
            "users": users,
            "current_page": page,
            "total_pages": total_pages,
            "total_users": total_users,
            "roles": [role.value for role in models.UserRole]
        }
    )

@router.get("/admin/users/new", response_class=HTMLResponse)
async def new_user_form(
    request: Request,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Form to create a new user - SUPER_ADMIN only
    """
    # Check if current user is a super admin
    check_super_admin(current_admin)
    
    # Get all available groups
    groups = db.query(models.Group).order_by(models.Group.name).all()
    
    return templates.TemplateResponse(
        "user_form.html",
        {
            "request": request,
            "admin": current_admin,
            "user": None,  # No existing user for a new form
            "groups": groups,
            "roles": [role.value for role in models.UserRole]
        }
    )

@router.post("/admin/users/new")
async def create_user(
    request: Request,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Create a new user - SUPER_ADMIN only
    """
    # Check if current user is a super admin
    check_super_admin(current_admin)
    
    # Get form data
    form_data = await request.form()
    username = form_data.get("username")
    password = form_data.get("password")
    email = form_data.get("email", None)
    phone_number = form_data.get("phone_number", None)
    full_name = form_data.get("full_name", None)
    role = form_data.get("role")
    is_active = form_data.get("is_active", "False") == "True"
    
    # Get selected groups
    group_ids = form_data.getlist("groups")
    
    # Basic validation
    if not username or not password or not role:
        raise HTTPException(status_code=400, detail="Missing required fields")
    
    # Check if username already exists
    existing = db.query(models.User).filter(models.User.username == username).first()
    if existing:
        raise HTTPException(status_code=400, detail="Username already exists")
    
    # Check if email is provided and already exists
    if email:
        existing_email = db.query(models.User).filter(models.User.email == email).first()
        if existing_email:
            raise HTTPException(status_code=400, detail="Email already exists")
    
    # Check if phone is provided and already exists
    if phone_number:
        existing_phone = db.query(models.User).filter(models.User.phone_number == phone_number).first()
        if existing_phone:
            raise HTTPException(status_code=400, detail="Phone number already exists")
    
    try:
        # Create new user with hashed password
        user = models.User(
            username=username,
            password_hash=get_password_hash(password),
            email=email,
            phone_number=phone_number,
            full_name=full_name,
            role=models.UserRole(role),
            is_active=is_active
        )
        
        db.add(user)
        db.commit()
        
        # Add user to selected groups
        if group_ids:
            for group_id in group_ids:
                group = db.query(models.Group).filter(models.Group.id == int(group_id)).first()
                if group:
                    user.groups.append(group)
            db.commit()
        
        return RedirectResponse(url="/admin/users", status_code=303)
    except ValueError as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@router.get("/admin/users/{user_id}/edit", response_class=HTMLResponse)
async def edit_user_form(
    user_id: int,
    request: Request,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Form to edit an existing user - SUPER_ADMIN only
    """
    # Check if current user is a super admin
    check_super_admin(current_admin)
    
    # Get the user
    user = db.query(models.User).filter(models.User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Get all available groups
    groups = db.query(models.Group).order_by(models.Group.name).all()
    
    # Get user's group IDs
    user_group_ids = [group.id for group in user.groups]
    
    return templates.TemplateResponse(
        "user_form.html",
        {
            "request": request,
            "admin": current_admin,
            "user": user,
            "groups": groups,
            "user_groups": user_group_ids,
            "roles": [role.value for role in models.UserRole]
        }
    )

@router.post("/admin/users/{user_id}/edit")
async def update_user(
    user_id: int,
    request: Request,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Update an existing user - SUPER_ADMIN only
    """
    # Check if current user is a super admin
    check_super_admin(current_admin)
    
    # Get the user
    user = db.query(models.User).filter(models.User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Get form data
    form_data = await request.form()
    username = form_data.get("username")
    password = form_data.get("password")  # Optional for edit
    email = form_data.get("email", None)
    phone_number = form_data.get("phone_number", None)
    full_name = form_data.get("full_name", None)
    role = form_data.get("role")
    is_active = form_data.get("is_active", "False") == "True"
    
    # Get selected groups
    group_ids = form_data.getlist("groups")
    
    # Basic validation
    if not username or not role:
        raise HTTPException(status_code=400, detail="Missing required fields")
    
    # Check if username already exists (for another user)
    existing = db.query(models.User).filter(
        models.User.username == username,
        models.User.id != user_id
    ).first()
    if existing:
        raise HTTPException(status_code=400, detail="Username already exists")
    
    # Check if email is provided and already exists
    if email:
        existing_email = db.query(models.User).filter(
            models.User.email == email,
            models.User.id != user_id
        ).first()
        if existing_email:
            raise HTTPException(status_code=400, detail="Email already exists")
    
    # Check if phone is provided and already exists
    if phone_number:
        existing_phone = db.query(models.User).filter(
            models.User.phone_number == phone_number,
            models.User.id != user_id
        ).first()
        if existing_phone:
            raise HTTPException(status_code=400, detail="Phone number already exists")
    
    try:
        # Update user fields
        user.username = username
        user.email = email
        user.phone_number = phone_number
        user.full_name = full_name
        user.role = models.UserRole(role)
        user.is_active = is_active
        
        # Update password if provided
        if password:
            user.password_hash = get_password_hash(password)
        
        # Clear existing groups and add selected ones
        user.groups = []
        if group_ids:
            for group_id in group_ids:
                group = db.query(models.Group).filter(models.Group.id == int(group_id)).first()
                if group:
                    user.groups.append(group)
        
        # Update timestamp
        user.updated_at = datetime.utcnow()
        
        db.commit()
        
        return RedirectResponse(url="/admin/users", status_code=303)
    except ValueError as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/admin/users/{user_id}/reset-password")
async def reset_user_password(
    user_id: int,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Generate a password reset token for a user - SUPER_ADMIN only
    """
    # Check if current user is a super admin
    check_super_admin(current_admin)
    
    # Get the user
    user = db.query(models.User).filter(models.User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Generate a reset token
    token = user.generate_reset_token()
    db.commit()
    
    # Redirect back to edit page with the token
    return templates.TemplateResponse(
        "user_form.html",
        {
            "request": {"url": {"path": f"/admin/users/{user_id}/edit"}},
            "admin": current_admin,
            "user": user,
            "groups": db.query(models.Group).order_by(models.Group.name).all(),
            "user_groups": [group.id for group in user.groups],
            "roles": [role.value for role in models.UserRole],
            "reset_token": token
        }
    )

@router.post("/admin/users/{user_id}/toggle-active")
async def toggle_user_active(
    user_id: int,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Toggle a user's active status - SUPER_ADMIN only
    """
    # Check if current user is a super admin
    check_super_admin(current_admin)
    
    # Get the user
    user = db.query(models.User).filter(models.User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Prevent deactivating yourself
    if user.id == current_admin.id:
        raise HTTPException(status_code=400, detail="You cannot deactivate your own account")
    
    # Toggle active status
    user.is_active = not user.is_active
    db.commit()
    
    return RedirectResponse(url="/admin/users", status_code=303)

@router.post("/admin/users/{user_id}/delete")
async def delete_user(
    user_id: int,
    current_admin: models.User = Depends(get_current_admin),
    db: Session = Depends(get_db)
):
    """
    Delete a user - SUPER_ADMIN only
    """
    # Check if current user is a super admin
    check_super_admin(current_admin)
    
    # Get the user
    user = db.query(models.User).filter(models.User.id == user_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Prevent deleting yourself
    if user.id == current_admin.id:
        raise HTTPException(status_code=400, detail="You cannot delete your own account")
    
    # Delete the user
    db.delete(user)
    db.commit()

    return RedirectResponse(url="/admin/users", status_code=303)<!-- app/templates/user_form.html -->
{% extends "base.html" %}

{% block title %}{{ "Edit" if user else "New" }} User | WhatsApp Order Bot{% endblock %}

{% block content %}
<div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <h1 class="text-2xl font-bold mb-6">{{ "Edit" if user else "Create New" }} User</h1>
    
    <form method="POST" class="space-y-6">
        <!-- Basic User Information -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username *</label>
                <input type="text" name="username" id="username" required
                    value="{{ user.username if user else '' }}"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <p class="text-xs text-gray-500 mt-1">Unique username for login (no spaces)</p>
            </div>
            
            <div>
                <label for="full_name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                <input type="text" name="full_name" id="full_name"
                    value="{{ user.full_name if user else '' }}"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <p class="text-xs text-gray-500 mt-1">User's full name</p>
            </div>
            
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
                <input type="email" name="email" id="email"
                    value="{{ user.email if user else '' }}"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <p class="text-xs text-gray-500 mt-1">Valid email address for notifications</p>
            </div>
            
            <div>
                <label for="phone_number" class="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
                <input type="tel" name="phone_number" id="phone_number"
                    value="{{ user.phone_number if user else '' }}"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <p class="text-xs text-gray-500 mt-1">Valid phone number (e.g., +254712345678)</p>
            </div>
            
            <div>
                <label for="password" class="block text-sm font-medium text-gray-700 mb-1">{{ "New Password" if user else "Password *" }}</label>
                <input type="password" name="password" id="password" {{ "required" if not user else "" }}
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <p class="text-xs text-gray-500 mt-1">
                    {% if user %}
                    Leave blank to keep current password
                    {% else %}
                    Strong password (min 8 characters)
                    {% endif %}
                </p>
            </div>
            
            <div>
                <label for="role" class="block text-sm font-medium text-gray-700 mb-1">User Role *</label>
                <select name="role" id="role" required
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    {% for role_value in roles %}
                    <option value="{{ role_value }}" {% if user and user.role.value == role_value %}selected{% endif %}>
                        {{ role_value|replace('_', ' ')|title }}
                    </option>
                    {% endfor %}
                </select>
                <p class="text-xs text-gray-500 mt-1">Determines user permissions</p>
            </div>
            
            <div>
                <label for="is_active" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <div class="mt-1">
                    <label class="inline-flex items-center">
                        <input type="checkbox" name="is_active" id="is_active" value="True"
                            {% if user is none or user.is_active %}checked{% endif %}
                            class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <span class="ml-2">Active</span>
                    </label>
                </div>
                <p class="text-xs text-gray-500 mt-1">Inactive users cannot log in</p>
            </div>
        </div>
        
        <!-- Group Assignments -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Assign to Groups</label>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 mt-2">
                {% for group in groups %}
                <label class="inline-flex items-center p-2 border rounded-md hover:bg-gray-50">
                    <input type="checkbox" name="groups" value="{{ group.id }}"
                        {% if user and group.id in user_groups %}checked{% endif %}
                        class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                    <span class="ml-2">{{ group.name }}</span>
                    {% if group.category %}
                    <span class="ml-1 text-xs text-gray-500">({{ group.category }})</span>
                    {% endif %}
                </label>
                {% endfor %}
            </div>
            <p class="text-xs text-gray-500 mt-1">Select which groups this user can manage</p>
        </div>
        
        <div class="flex justify-between pt-4">
            <a href="/admin/users" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">
                Cancel
            </a>
            
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                {{ "Update" if user else "Create" }} User
            </button>
        </div>
    </form>
</div>

{% if user %}
<div class="bg-white rounded-lg shadow-md p-6">
    <h2 class="text-xl font-bold mb-4">Account Options</h2>
    
    <div class="flex flex-col sm:flex-row gap-4">
        <form method="POST" action="/admin/users/{{ user.id }}/reset-password" class="flex-1"
              onsubmit="return confirm('Generate password reset token for this user?');">
            <button type="submit" class="w-full px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700">
                <i class="fas fa-key mr-2"></i>
                Generate Password Reset Token
            </button>
        </form>
        
        {% if admin.id != user.id %}
        <form method="POST" action="/admin/users/{{ user.id }}/delete" class="flex-1"
              onsubmit="return confirm('Are you sure you want to delete this user? This action cannot be undone.');">
            <button type="submit" class="w-full px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                <i class="fas fa-trash-alt mr-2"></i>
                Delete User
            </button>
        </form>
        {% endif %}
    </div>
    
    {% if reset_token %}
    <div class="mt-4 p-4 bg-yellow-50 border-l-4 border-yellow-500 rounded">
        <p class="font-medium">Password Reset Token Generated</p>
        <p class="text-sm mt-1">Share this token with the user. It will expire in 24 hours.</p>
        <div class="flex mt-2">
            <input type="text" value="{{ reset_token }}" readonly 
                   class="flex-grow p-2 border border-gray-300 rounded-l-md bg-gray-50 font-mono text-sm"
                   id="reset-token-input"
                   onclick="this.select()">
            <button onclick="copyToClipboard('reset-token-input')" 
                    class="px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700">
                Copy
            </button>
        </div>
    </div>
    {% endif %}
</div>
{% endif %}

{% block scripts %}
<script>
// Copy to clipboard function
function copyToClipboard(elementId) {
    const element = document.getElementById(elementId);
    element.select();
    document.execCommand('copy');
    
    // Show a brief "Copied!" message
    const originalValue = element.value;
    element.value = "Copied!";
    setTimeout(() => {
        element.value = originalValue;
    }, 1000);
}

// Validate email format when changing
document.getElementById('email').addEventListener('change', function() {
    if (this.value && !this.value.match(/^[^@]+@[^@]+\.[^@]+$/)) {
        alert('Please enter a valid email address');
        this.focus();
    }
});
</script>
{% endblock %}
{% endblock %}<!-- app/templates/users.html -->
{% extends "base.html" %}

{% block title %}Manage Users | WhatsApp Order Bot{% endblock %}

{% block content %}
<div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">System Users</h1>
        
        <div>
            <a href="/admin/users/new" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 flex items-center">
                <i class="fas fa-user-plus mr-2"></i>
                Add New User
            </a>
        </div>
    </div>
    
    {% if users %}
    <div class="overflow-x-auto">
        <table class="w-full border-collapse">
            <thead>
                <tr class="bg-gray-100">
                    <th class="border p-2 text-left">ID</th>
                    <th class="border p-2 text-left">Username</th>
                    <th class="border p-2 text-left">Full Name</th>
                    <th class="border p-2 text-left">Contact</th>
                    <th class="border p-2 text-left">Role</th>
                    <th class="border p-2 text-left">Status</th>
                    <th class="border p-2 text-left">Last Login</th>
                    <th class="border p-2 text-left">Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for user in users %}
                <tr class="hover:bg-gray-50 {% if user.id == admin.id %}bg-blue-50{% endif %}">
                    <td class="border p-2">{{ user.id }}</td>
                    <td class="border p-2 font-medium">
                        {{ user.username }}
                        {% if user.id == admin.id %}
                        <span class="ml-1 text-xs text-blue-600">(you)</span>
                        {% endif %}
                    </td>
                    <td class="border p-2">{{ user.full_name or '-' }}</td>
                    <td class="border p-2">
                        {% if user.email %}
                        <div class="flex items-center text-gray-600">
                            <i class="fas fa-envelope w-4 mr-1"></i>
                            <span class="text-sm">{{ user.email }}</span>
                        </div>
                        {% endif %}
                        
                        {% if user.phone_number %}
                        <div class="flex items-center text-gray-600 mt-1">
                            <i class="fas fa-phone w-4 mr-1"></i>
                            <span class="text-sm">{{ user.phone_number }}</span>
                        </div>
                        {% endif %}
                        
                        {% if not user.email and not user.phone_number %}
                        <span class="text-gray-400">No contact info</span>
                        {% endif %}
                    </td>
                    <td class="border p-2">
                        <span class="px-2 py-1 rounded-full text-xs 
                            {% if user.role.value == 'super_admin' %}bg-purple-100 text-purple-800
                            {% elif user.role.value == 'client_admin' %}bg-blue-100 text-blue-800
                            {% endif %}">
                            {{ user.role.value|replace('_', ' ')|title }}
                        </span>
                    </td>
                    <td class="border p-2">
                        <span class="px-2 py-1 rounded-full text-xs 
                            {% if user.is_active %}bg-green-100 text-green-800
                            {% else %}bg-red-100 text-red-800{% endif %}">
                            {{ "Active" if user.is_active else "Inactive" }}
                        </span>
                    </td>
                    <td class="border p-2">
                        {% if user.last_login %}
                        {{ user.last_login.strftime('%Y-%m-%d') }}
                        <div class="text-xs text-gray-500">{{ user.last_login.strftime('%H:%M') }}</div>
                        {% else %}
                        <span class="text-gray-400">Never</span>
                        {% endif %}
                    </td>
                    <td class="border p-2">
                        <div class="flex space-x-1">
                            <a href="/admin/users/{{ user.id }}/edit" class="bg-blue-600 text-white px-2 py-1 rounded text-xs hover:bg-blue-700">
                                Edit
                            </a>
                            
                            {% if user.id != admin.id %}
                            <form method="POST" action="/admin/users/{{ user.id }}/toggle-active" class="inline">
                                <button type="submit" class="{% if user.is_active %}bg-yellow-600{% else %}bg-green-600{% endif %} text-white px-2 py-1 rounded text-xs hover:{% if user.is_active %}bg-yellow-700{% else %}bg-green-700{% endif %}">
                                    {{ "Deactivate" if user.is_active else "Activate" }}
                                </button>
                            </form>
                            {% endif %}
                        </div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    
    <!-- Pagination -->
    {% if total_pages > 1 %}
    <div class="flex justify-between items-center mt-6">
        <div>
            Showing page {{ current_page }} of {{ total_pages }}
            ({{ total_users }} total users)
        </div>
        
        <div class="flex space-x-2">
            {% if current_page > 1 %}
            <a href="/admin/users?page={{ current_page - 1 }}" 
               class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">
                Previous
            </a>
            {% endif %}
            
            {% if current_page < total_pages %}
            <a href="/admin/users?page={{ current_page + 1 }}" 
               class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">
                Next
            </a>
            {% endif %}
        </div>
    </div>
    {% endif %}
    
    {% else %}
    <div class="text-center py-8">
        <p class="text-gray-500 italic">No users found.</p>
        <a href="/admin/users/new" class="mt-4 inline-block px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
            Create Your First User
        </a>
    </div>
    {% endif %}
</div>

<div class="bg-white rounded-lg shadow-md p-6">
    <h2 class="text-xl font-bold mb-4">User Roles & Permissions</h2>
    
    <div class="space-y-4">
        <div class="p-4 border rounded-lg bg-purple-50">
            <h3 class="font-bold text-purple-800">Super Admin</h3>
            <p class="text-sm mt-1">Full system access with the ability to:</p>
            <ul class="list-disc list-inside text-sm mt-1 ml-2 text-gray-700">
                <li>Manage all users (create, edit, delete)</li>
                <li>Access all groups and their data</li>
                <li>Configure system-wide settings</li>
                <li>Access all orders and customers</li>
            </ul>
        </div>
        
        <div class="p-4 border rounded-lg bg-blue-50">
            <h3 class="font-bold text-blue-800">Client Admin</h3>
            <p class="text-sm mt-1">Standard administrative access with the ability to:</p>
            <ul class="list-disc list-inside text-sm mt-1 ml-2 text-gray-700">
                <li>Manage groups they are assigned to</li>
                <li>Process orders related to their groups</li>
                <li>Contact customers for their groups</li>
                <li>Generate WhatsApp order links</li>
            </ul>
        </div>
    </div>
    
    <div class="mt-4 p-4 bg-yellow-50 border-l-4 border-yellow-500 rounded">
        <p class="font-medium">Security Note</p>
        <p class="text-sm mt-1">
            Only grant Super Admin access to trusted individuals. Super Admins have complete control over the system,
            including the ability to create and manage other users.
        </p>
    </div>
</div>
{% endblock %}<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}WhatsApp Order Bot Admin{% endblock %}</title>
    <!-- Tailwind CSS -->
    <link href="/static/css/output.css" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/static/img/favicon.png">
    {% block head %}{% endblock %}
</head>
<body class="flex flex-col min-h-screen bg-gray-50">
    <header class="bg-primary-500 text-white shadow-md">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <a href="/admin/dashboard" class="flex items-center space-x-2">
                    <i class="fab fa-whatsapp text-2xl"></i>
                    <span class="font-heading font-bold text-xl">WA Order Bot</span>
                </a>
                {% if not admin %}
                <a href="/admin/login" class="flex justify-end items-center space-x-2">
                    <span class="font-heading font-bold text-xl">login</span>
                </a>
                {% endif %}
                
                {% if admin %}
                <nav class="hidden md:flex space-x-6">
                    <a href="/admin/dashboard" class="flex items-center space-x-1 hover:text-white/80 transition-colors {{ 'border-b-2 border-white pb-1' if request.url.path == '/admin/dashboard' else '' }}">
                        <i class="fas fa-tachometer-alt"></i>
                        <span>Dashboard</span>
                    </a>
                    <a href="/admin/orders" class="flex items-center space-x-1 hover:text-white/80 transition-colors {{ 'border-b-2 border-white pb-1' if request.url.path == '/admin/orders' else '' }}">
                        <i class="fas fa-shopping-cart"></i>
                        <span>Orders</span>
                    </a>
                    <a href="/admin/groups" class="flex items-center space-x-1 hover:text-white/80 transition-colors {{ 'border-b-2 border-white pb-1' if request.url.path.startswith('/admin/groups') else '' }}">
                        <i class="fas fa-users"></i>
                        <span>Groups</span>
                    </a>
                    {% if admin.role == 'super_admin' %}
                    <a href="/admin/users" class="flex items-center space-x-1 hover:text-white/80 transition-colors {{ 'border-b-2 border-white pb-1' if request.url.path.startswith('/admin/users') else '' }}">
                        <i class="fas fa-user-cog"></i>
                        <span>Users</span>
                    </a>
                    {% endif %}
                    <a href="/admin/settings" class="flex items-center space-x-1 hover:text-white/80 transition-colors {{ 'border-b-2 border-white pb-1' if request.url.path == '/admin/settings' else '' }}">
                        <i class="fas fa-cog"></i>
                        <span>Settings</span>
                    </a>
                    <a href="/admin/logout" class="flex items-center space-x-1 hover:text-white/80 transition-colors">
                        <i class="fas fa-sign-out-alt"></i>
                        <span>Logout</span>
                    </a>
                </nav>
                
                <!-- Mobile menu button -->
                <button id="mobile-menu-button" class="md:hidden flex items-center p-2 rounded-md hover:bg-primary-600 focus:outline-none">
                    <i class="fas fa-bars text-white text-lg"></i>
                </button>
                {% endif %}
            </div>
            
            <!-- Mobile menu, show/hide based on menu state -->
            {% if admin %}
            <div id="mobile-menu" class="md:hidden hidden pb-3">
                <div class="flex flex-col space-y-3">
                    <a href="/admin/dashboard" class="flex items-center space-x-2 py-2 px-3 rounded-md hover:bg-primary-600 {{ 'bg-primary-600' if request.url.path == '/admin/dashboard' else '' }}">
                        <i class="fas fa-tachometer-alt w-5"></i>
                        <span>Dashboard</span>
                    </a>
                    <a href="/admin/orders" class="flex items-center space-x-2 py-2 px-3 rounded-md hover:bg-primary-600 {{ 'bg-primary-600' if request.url.path == '/admin/orders' else '' }}">
                        <i class="fas fa-shopping-cart w-5"></i>
                        <span>Orders</span>
                    </a>
                    <a href="/admin/groups" class="flex items-center space-x-2 py-2 px-3 rounded-md hover:bg-primary-600 {{ 'bg-primary-600' if request.url.path.startswith('/admin/groups') else '' }}">
                        <i class="fas fa-users w-5"></i>
                        <span>Groups</span>
                    </a>
                    {% if admin.role == 'super_admin' %}
                    <a href="/admin/users" class="flex items-center space-x-2 py-2 px-3 rounded-md hover:bg-primary-600 {{ 'bg-primary-600' if request.url.path.startswith('/admin/users') else '' }}">
                        <i class="fas fa-user-cog w-5"></i>
                        <span>Users</span>
                    </a>
                    {% endif %}
                    <a href="/admin/settings" class="flex items-center space-x-2 py-2 px-3 rounded-md hover:bg-primary-600 {{ 'bg-primary-600' if request.url.path == '/admin/settings' else '' }}">
                        <i class="fas fa-cog w-5"></i>
                        <span>Settings</span>
                    </a>
                    <a href="/admin/logout" class="flex items-center space-x-2 py-2 px-3 rounded-md hover:bg-primary-600">
                        <i class="fas fa-sign-out-alt w-5"></i>
                        <span>Logout</span>
                    </a>
                </div>
            </div>
            {% endif %}
        </div>
    </header>
    
    <main class="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {% block content %}{% endblock %}
    </main>
    
    <footer class="bg-gray-800 text-gray-300 py-6">
        <div class="container mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex flex-col md:flex-row md:justify-between items-center">
                <div class="mb-4 md:mb-0">
                    <div class="flex items-center justify-center md:justify-start">
                        <i class="fab fa-whatsapp text-whatsapp-default text-2xl mr-2"></i>
                        <span class="font-semibold">WhatsApp Order Bot</span>
                    </div>
                    <p class="text-sm mt-1 text-center md:text-left">&copy; 2025 All rights reserved.</p>
                </div>
                {% if admin %}
                <div class="text-sm">
                    <span>Logged in as: <strong>{{ admin.username }}</strong> ({{ admin.role.value }})</span>
                </div>
                {% endif %}
            </div>
        </div>
    </footer>
    
    <script>
        // Mobile menu toggle
        document.getElementById('mobile-menu-button').addEventListener('click', function() {
            const menu = document.getElementById('mobile-menu');
            menu.classList.toggle('hidden');
        });
        
        // Close mobile menu when clicking outside
        document.addEventListener('click', function(event) {
            const menu = document.getElementById('mobile-menu');
            const button = document.getElementById('mobile-menu-button');
            
            if (!menu.contains(event.target) && !button.contains(event.target) && !menu.classList.contains('hidden')) {
                menu.classList.add('hidden');
            }
        });
    </script>
    
    {% block scripts %}{% endblock %}
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ConvoCart - Chat Commerce Solutions</title>
    <meta name="description" content="ConvoCart helps businesses sell directly through WhatsApp with automated ordering, payments, and customer management.">
    <!-- Tailwind CSS -->
    <link href="/static/css/output.css" rel="stylesheet">
    <!-- Font imports -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@500;600;700;800&display=swap" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Custom styles -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        .font-display {
            font-family: 'Poppins', sans-serif;
        }

        .hero-gradient {
            background: linear-gradient(90deg, rgba(37, 179, 80, 0.1) 0%, rgba(0, 149, 218, 0.1) 100%);
        }

        .feature-card:hover {
            transform: translateY(-5px);
        }

        .coming-soon-badge {
            position: absolute;
            top: 12px;
            right: 12px;
            padding: 4px 10px;
            background-color: #0095da;
            color: white;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
        }
    </style>
</head>
<body class="bg-white text-gray-800">
    <!-- Navigation -->
    <nav class="bg-white shadow-sm fixed w-full z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <a href="#" class="flex items-center">
                        <div class="flex items-center space-x-1 text-primary-500">
                            <i class="fa-brands fa-whatsapp text-xl"></i>
                            <span class="font-display font-bold text-xl">ConvoCart</span>
                        </div>
                    </a>
                </div>
                <div class="hidden md:flex md:items-center md:space-x-8">
                    <a href="#features" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">Features</a>
                    <a href="#how-it-works" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">How It Works</a>
                    <a href="#services" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">Services</a>
                    <a href="#pricing" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">Pricing</a>
                    <a href="#contact" class="text-gray-600 hover:text-primary-500 px-3 py-2 font-medium text-sm">Contact</a>
                    <a href="/admin/login" class="bg-primary-500 text-white py-2 px-4 rounded-lg font-medium text-sm hover:bg-primary-600 ml-3 transition-all duration-200">Get Started</a>
                </div>
                <div class="flex items-center md:hidden">
                    <button id="mobile-menu-button" class="text-gray-500 hover:text-gray-700 focus:outline-none">
                        <i class="fas fa-bars text-xl"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Mobile menu, show/hide based on menu state -->
        <div id="mobile-menu" class="hidden md:hidden bg-white shadow-md">
            <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                <a href="#features" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">Features</a>
                <a href="#how-it-works" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">How It Works</a>
                <a href="#services" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">Services</a>
                <a href="#pricing" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">Pricing</a>
                <a href="#contact" class="block px-3 py-2 rounded-md text-base font-medium text-gray-600 hover:text-primary-500 hover:bg-gray-50">Contact</a>
                <a href="/admin/login" class="block px-3 py-2 mt-4 rounded-md text-base font-medium bg-primary-500 text-white hover:bg-primary-600">Get Started</a>
            </div>
        </div>
    </nav>

    <!-- Hero Section -->
    <section class="pt-24 pb-16 hero-gradient">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex flex-col lg:flex-row items-center">
                <div class="lg:w-1/2 lg:pr-12 mb-8 lg:mb-0">
                    <span class="inline-block bg-secondary-100 text-secondary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Simple. Seamless. Scalable.</span>
                    <h1 class="text-4xl md:text-5xl lg:text-6xl font-display font-bold mb-6 leading-tight">Sell Directly Through WhatsApp</h1>
                    <p class="text-lg text-gray-600 mb-8">ConvoCart turns your WhatsApp account into a powerful sales channel. Accept orders, process payments, and grow your business - all through simple chat conversations.</p>
                    <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4">
                        <a href="#" class="inline-flex items-center justify-center bg-primary-500 text-white py-3 px-6 rounded-lg font-medium text-base hover:bg-primary-600 transition-all duration-200">
                            Start Free Trial
                            <i class="fas fa-arrow-right ml-2"></i>
                        </a>
                        <a href="#" class="inline-flex items-center justify-center border border-gray-300 bg-white text-gray-700 py-3 px-6 rounded-lg font-medium text-base hover:bg-gray-50 transition-all duration-200">
                            <i class="fas fa-play-circle mr-2 text-primary-500"></i>
                            Watch Demo
                        </a>
                    </div>
                    <div class="mt-8 flex items-center">
                        <div class="flex -space-x-2">
                            <img src="https://randomuser.me/api/portraits/women/32.jpg" alt="Customer" class="w-8 h-8 rounded-full border-2 border-white">
                            <img src="https://randomuser.me/api/portraits/men/43.jpg" alt="Customer" class="w-8 h-8 rounded-full border-2 border-white">
                            <img src="https://randomuser.me/api/portraits/women/21.jpg" alt="Customer" class="w-8 h-8 rounded-full border-2 border-white">
                            <img src="https://randomuser.me/api/portraits/men/16.jpg" alt="Customer" class="w-8 h-8 rounded-full border-2 border-white">
                        </div>
                        <div class="ml-3">
                            <div class="flex items-center">
                                <div class="flex items-center">
                                    <i class="fas fa-star text-yellow-400"></i>
                                    <i class="fas fa-star text-yellow-400"></i>
                                    <i class="fas fa-star text-yellow-400"></i>
                                    <i class="fas fa-star text-yellow-400"></i>
                                    <i class="fas fa-star-half-alt text-yellow-400"></i>
                                </div>
                                <span class="ml-1 text-sm font-medium">4.8/5</span>
                            </div>
                            <p class="text-xs text-gray-500">Trusted by 500+ businesses</p>
                        </div>
                    </div>
                </div>
                <div class="lg:w-1/2">
                    <div class="relative">
                        <div class="absolute inset-0 bg-gradient-to-r from-primary-200 to-secondary-200 rounded-3xl transform rotate-3 scale-105 opacity-30"></div>
                        <div class="relative bg-white rounded-3xl shadow-xl overflow-hidden border border-gray-100">
                            <div class="bg-whatsapp-dark text-white p-4 flex items-center">
                                <i class="fa-brands fa-whatsapp text-2xl mr-3"></i>
                                <div>
                                    <p class="font-medium">WhatsApp Business</p>
                                    <p class="text-xs text-white/80">Online</p>
                                </div>
                            </div>
                            <div class="bg-gray-100 p-4 h-96 overflow-y-auto">
                                <div class="bg-white rounded-lg p-3 mb-3 max-w-xs shadow-sm">
                                    <p class="text-sm">Hi! I'd like to order from your store.</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:32 AM</p>
                                </div>
                                <div class="bg-whatsapp-light rounded-lg p-3 mb-3 ml-auto max-w-xs shadow-sm">
                                    <p class="text-sm">Welcome to ConvoCart Demo Store! 👋 What would you like to order today?</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:33 AM</p>
                                </div>
                                <div class="bg-white rounded-lg p-3 mb-3 max-w-xs shadow-sm">
                                    <p class="text-sm">I want to order a large pepperoni pizza and a bottle of cola.</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:34 AM</p>
                                </div>
                                <div class="bg-whatsapp-light rounded-lg p-3 mb-3 ml-auto max-w-xs shadow-sm">
                                    <p class="text-sm">Great choice! Your order summary:</p>
                                    <p class="text-sm">• 1x Large Pepperoni Pizza: $12.99</p>
                                    <p class="text-sm">• 1x Cola (1L): $2.50</p>
                                    <p class="text-sm font-medium">Total: $15.49</p>
                                    <p class="text-sm mt-2">Would you like to confirm this order?</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:35 AM</p>
                                </div>
                                <div class="flex space-x-2 mb-3">
                                    <button class="bg-primary-500 text-white rounded-lg px-4 py-2 text-sm font-medium">Confirm Order</button>
                                    <button class="bg-gray-200 text-gray-800 rounded-lg px-4 py-2 text-sm font-medium">Edit Order</button>
                                </div>
                                <div class="bg-white rounded-lg p-3 mb-3 max-w-xs shadow-sm">
                                    <p class="text-sm">Confirm Order</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:36 AM</p>
                                </div>
                                <div class="bg-whatsapp-light rounded-lg p-3 ml-auto max-w-xs shadow-sm">
                                    <p class="text-sm">🎉 Your order has been confirmed!</p>
                                    <p class="text-sm">Order #1234</p>
                                    <p class="text-sm mt-2">Your order will be ready in 30 minutes. You can pay at delivery.</p>
                                    <p class="text-sm mt-2">Thank you for shopping with ConvoCart Demo Store!</p>
                                    <p class="text-xs text-gray-500 text-right mt-1">11:36 AM</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Trusted By -->
    <!-- <section class="py-8 bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <p class="text-center text-gray-500 text-sm font-medium mb-6">TRUSTED BY INNOVATIVE COMPANIES</p>
            <div class="flex flex-wrap justify-center items-center gap-8 sm:gap-12 opacity-80">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
                <img src="/api/placeholder/120/40" alt="Company logo" class="h-8 object-contain grayscale">
            </div>
        </div>
    </section> -->

    <!-- Features Section -->
    <section id="features" class="py-16">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-primary-100 text-primary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Features</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Everything You Need to Sell Via WhatsApp</h2>
                <p class="text-lg text-gray-600">Our powerful platform lets you accept orders, manage inventory, and delight customers - all through WhatsApp.</p>
            </div>

            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                <!-- Feature 1 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-shopping-cart text-primary-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Order Management</h3>
                    <p class="text-gray-600 mb-4">Receive, process, and track orders automatically through WhatsApp. No more missed sales opportunities.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 2 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-secondary-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-credit-card text-secondary-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Payment Processing</h3>
                    <p class="text-gray-600 mb-4">Accept payments securely via multiple methods, including mobile money, credit cards, and bank transfers.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 3 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-boxes text-yellow-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Inventory Management</h3>
                    <p class="text-gray-600 mb-4">Track your inventory in real-time. Get alerts when stock is low and manage products easily.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 4 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-chart-bar text-green-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Analytics Dashboard</h3>
                    <p class="text-gray-600 mb-4">Gain insights into your sales, customer behavior, and business performance with detailed analytics.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 5 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-users text-purple-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Customer Management</h3>
                    <p class="text-gray-600 mb-4">Build and manage your customer database, track purchase history, and send personalized offers.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>

                <!-- Feature 6 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-robot text-red-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Automated Responses</h3>
                    <p class="text-gray-600 mb-4">Set up automated responses for common queries, order confirmations, and shipping updates.</p>
                    <a href="#" class="text-primary-500 font-medium inline-flex items-center hover:text-primary-600">
                        Learn more
                        <i class="fas fa-arrow-right ml-1 text-sm"></i>
                    </a>
                </div>
            </div>
        </div>
    </section>

<!-- How It Works - Redesigned -->
<section id="how-it-works" class="py-20 bg-gradient-to-br from-gray-50 to-white relative overflow-hidden">
    <!-- Background Elements -->
    <div class="absolute top-0 right-0 w-64 h-64 bg-primary-50 rounded-full opacity-70 -mr-32 -mt-16"></div>
    <div class="absolute bottom-0 left-0 w-48 h-48 bg-secondary-50 rounded-full opacity-70 -ml-20 -mb-20"></div>
    
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div class="text-center max-w-3xl mx-auto mb-16">
            <span class="inline-block bg-secondary-100 text-secondary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">How It Works</span>
            <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Sell on WhatsApp in 3 Simple Steps</h2>
            <p class="text-lg text-gray-600">Our streamlined process gets you from signup to sales in minutes, not days</p>
        </div>
        
        <!-- Process Timeline -->
        <div class="hidden lg:block absolute left-1/2 top-1/2 w-[calc(100%-240px)] h-2 bg-gray-200 -translate-x-1/2 -translate-y-20 rounded-full z-0">
            <div class="absolute left-0 h-full w-1/3 bg-primary-500 rounded-l-full"></div>
            <div class="absolute left-1/3 h-full w-1/3 bg-primary-400"></div>
            <div class="absolute left-2/3 h-full w-1/3 bg-primary-300 rounded-r-full"></div>
        </div>
        
        <div class="grid lg:grid-cols-3 gap-10 lg:gap-8 relative z-10">
            <!-- Step 1 -->
            <div class="group">
                <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-8 h-full border border-gray-100 relative overflow-hidden transform group-hover:-translate-y-2">
                    <!-- Step Number -->
                    <div class="absolute -right-4 -top-4 w-24 h-24 bg-primary-500 opacity-10 rounded-full"></div>
                    <div class="absolute right-4 top-4 text-4xl font-bold text-primary-500 opacity-30">01</div>
                    
                    <!-- Icon -->
                    <div class="w-16 h-16 bg-primary-100 rounded-2xl flex items-center justify-center mb-6 transform transition-transform group-hover:rotate-6">
                        <i class="fas fa-link text-primary-600 text-2xl"></i>
                    </div>
                    
                    <h3 class="text-xl font-semibold mb-4">Get Your WhatsApp Link</h3>
                    <p class="text-gray-600 mb-6">After signing up, we generate a custom click-to-chat link specifically for your business. This link will connect customers directly to your WhatsApp ordering bot.</p>
                    
                    <div class="bg-gray-50 border border-gray-100 rounded-lg p-4 mb-4">
                        <div class="flex items-center text-xs text-gray-500">
                            <i class="fas fa-code text-primary-400 mr-2"></i>
                            <code>https://wa.me/1234567890?text=order+from+group:yourstore</code>
                        </div>
                    </div>
                    
                    <ul class="space-y-2 text-sm">
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Custom link with your business name</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Pre-filled welcome message</span>
                        </li>
                    </ul>
                </div>
            </div>
            
            <!-- Step 2 -->
            <div class="group">
                <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-8 h-full border border-gray-100 relative overflow-hidden transform group-hover:-translate-y-2">
                    <!-- Step Number -->
                    <div class="absolute -right-4 -top-4 w-24 h-24 bg-primary-500 opacity-10 rounded-full"></div>
                    <div class="absolute right-4 top-4 text-4xl font-bold text-primary-500 opacity-30">02</div>
                    
                    <!-- Icon -->
                    <div class="w-16 h-16 bg-primary-100 rounded-2xl flex items-center justify-center mb-6 transform transition-transform group-hover:rotate-6">
                        <i class="fas fa-thumbtack text-primary-600 text-2xl"></i>
                    </div>
                    
                    <h3 class="text-xl font-semibold mb-4">Pin It to Your Commerce Group</h3>
                    <p class="text-gray-600 mb-6">Share your link by pinning it to your WhatsApp group where customers browse products. This creates a seamless shopping experience from browsing to ordering.</p>
                    
                    <div class="bg-whatsapp-light border border-green-200 rounded-lg p-4 mb-4">
                        <div class="flex items-start text-sm">
                            <div class="flex-shrink-0 w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white">
                                <i class="fas fa-store text-xs"></i>
                            </div>
                            <div class="ml-3">
                                <p class="font-medium text-gray-800">Fashion Store Group</p>
                                <p class="text-xs text-gray-600 mt-1">Click here to place your order: <span class="text-blue-500">https://wa.me/1234...</span></p>
                                <p class="text-xs text-gray-400 mt-1">📌 Pinned message</p>
                            </div>
                        </div>
                    </div>
                    
                    <ul class="space-y-2 text-sm">
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Increased visibility for your customers</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>One-click access to ordering</span>
                        </li>
                    </ul>
                </div>
            </div>
            
            <!-- Step 3 -->
            <div class="group">
                <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 p-8 h-full border border-gray-100 relative overflow-hidden transform group-hover:-translate-y-2">
                    <!-- Step Number -->
                    <div class="absolute -right-4 -top-4 w-24 h-24 bg-primary-500 opacity-10 rounded-full"></div>
                    <div class="absolute right-4 top-4 text-4xl font-bold text-primary-500 opacity-30">03</div>
                    
                    <!-- Icon -->
                    <div class="w-16 h-16 bg-primary-100 rounded-2xl flex items-center justify-center mb-6 transform transition-transform group-hover:rotate-6">
                        <i class="fas fa-shopping-bag text-primary-600 text-2xl"></i>
                    </div>
                    
                    <h3 class="text-xl font-semibold mb-4">Start Receiving Orders</h3>
                    <p class="text-gray-600 mb-6">When customers click your link, our AI-powered bot guides them through the ordering process. You receive structured orders that are easy to manage.</p>
                    
                    <div class="flex justify-center mb-4">
                        <div class="flex flex-col items-center space-y-1">
                            <div class="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-user text-green-600"></i>
                            </div>
                            <div class="text-xs text-gray-500">Customer</div>
                            <i class="fas fa-arrow-down text-gray-400"></i>
                        </div>
                        <div class="w-14 h-0.5 bg-gray-200 self-center mx-1 mt-4"></div>
                        <div class="flex flex-col items-center space-y-1">
                            <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-robot text-blue-600"></i>
                            </div>
                            <div class="text-xs text-gray-500">Bot</div>
                            <i class="fas fa-arrow-down text-gray-400"></i>
                        </div>
                        <div class="w-14 h-0.5 bg-gray-200 self-center mx-1 mt-4"></div>
                        <div class="flex flex-col items-center space-y-1">
                            <div class="w-10 h-10 bg-primary-100 rounded-full flex items-center justify-center">
                                <i class="fas fa-store text-primary-600"></i>
                            </div>
                            <div class="text-xs text-gray-500">You</div>
                        </div>
                    </div>
                    
                    <ul class="space-y-2 text-sm">
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Automated order processing</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check-circle text-green-500 mt-1 mr-2"></i>
                            <span>Instant customer notifications</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        
        <div class="mt-14 flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-6">
            <a href="/admin/login" class="bg-primary-500 text-white py-3 px-8 rounded-lg font-medium text-base hover:bg-primary-600 transition-all duration-200 inline-flex items-center shadow-lg shadow-primary-500/20 transform hover:-translate-y-1">
                <i class="fas fa-rocket mr-2"></i>
                Get Started Now
            </a>
            <a href="#" class="text-gray-700 py-3 px-6 rounded-lg font-medium text-base hover:text-primary-600 transition-all duration-200 inline-flex items-center">
                <i class="fas fa-play-circle mr-2 text-primary-500"></i>
                Watch Demo
            </a>
        </div>
        
        <!-- Stats -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-16">
            <div class="bg-white/80 backdrop-blur-sm rounded-xl border border-gray-100 shadow-sm p-6 text-center">
                <div class="text-3xl font-bold text-primary-500 mb-2">
                    <span class="inline-block bg-primary-100 w-12 h-12 rounded-full flex items-center justify-center mb-3 mx-auto">
                        <i class="fas fa-bolt text-primary-600"></i>
                    </span>
                    <span>2 min</span>
                </div>
                <p class="text-gray-600">Average setup time</p>
            </div>
            
            <div class="bg-white/80 backdrop-blur-sm rounded-xl border border-gray-100 shadow-sm p-6 text-center">
                <div class="text-3xl font-bold text-primary-500 mb-2">
                    <span class="inline-block bg-primary-100 w-12 h-12 rounded-full flex items-center justify-center mb-3 mx-auto">
                        <i class="fas fa-shopping-cart text-primary-600"></i>
                    </span>
                    <span>30%</span>
                </div>
                <p class="text-gray-600">Average sales increase</p>
            </div>
            
            <div class="bg-white/80 backdrop-blur-sm rounded-xl border border-gray-100 shadow-sm p-6 text-center">
                <div class="text-3xl font-bold text-primary-500 mb-2">
                    <span class="inline-block bg-primary-100 w-12 h-12 rounded-full flex items-center justify-center mb-3 mx-auto">
                        <i class="fas fa-headset text-primary-600"></i>
                    </span>
                    <span>24/7</span>
                </div>
                <p class="text-gray-600">Automated order taking</p>
            </div>
        </div>
    </div>
</section>

    <!-- Services Section -->
    <section id="services" class="py-16">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-primary-100 text-primary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Our Services</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Comprehensive Commerce Solutions</h2>
                <p class="text-lg text-gray-600">We're building a complete ecosystem for chat-based commerce.</p>
            </div>

            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
                <!-- Service 1: Main Service -->
                <div class="bg-white rounded-xl shadow-sm border border-primary-200 p-6 transition-all duration-200 feature-card">
                    <div class="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fa-brands fa-whatsapp text-primary-600 text-2xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">WhatsApp Order Bot</h3>
                    <p class="text-gray-600 mb-4">Our flagship service that turns your WhatsApp into a complete ordering system for your business.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                            <span class="text-gray-600">Automated order processing</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                            <span class="text-gray-600">Customer management system</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                            <span class="text-gray-600">Payment integrations</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                            <span class="text-gray-600">Analytics dashboard</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-primary-500 text-white py-2 px-4 rounded-lg font-medium text-sm hover:bg-primary-600 inline-block transition-all duration-200">
                        Learn More
                    </a>
                </div>

                <!-- Service 2: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-secondary-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-mobile-alt text-secondary-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Multi-Channel Chat Commerce</h3>
                    <p class="text-gray-600 mb-4">Expand your business to Messenger, Telegram, and Instagram DMs with a unified management platform.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Single dashboard for all platforms</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Cross-platform analytics</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Unified customer database</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Automated cross-channel marketing</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Join Waitlist
                    </a>
                </div>

                <!-- Service 3: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-chart-pie text-purple-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Advanced Analytics Suite</h3>
                    <p class="text-gray-600 mb-4">Gain deeper insights into your business with our comprehensive analytics and reporting tools.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Custom reporting dashboards</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Customer behavior analysis</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Sales forecasting</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Performance benchmarking</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Join Waitlist
                    </a>
                </div>

                <!-- Service 4: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-truck text-green-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Logistics Integration</h3>
                    <p class="text-gray-600 mb-4">Seamlessly connect your orders with delivery services for end-to-end order management.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Automatic delivery dispatch</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Real-time delivery tracking</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Delivery partner management</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Delivery cost optimization</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Join Waitlist
                    </a>
                </div>

                <!-- Service 5: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-bullhorn text-yellow-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Marketing Automation</h3>
                    <p class="text-gray-600 mb-4">Create targeted marketing campaigns to engage customers and drive more sales.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Customer segmentation</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Scheduled broadcast messages</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Automated follow-ups</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Campaign performance tracking</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Join Waitlist
                    </a>
                </div>

                <!-- Service 6: Coming Soon -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 transition-all duration-200 feature-card relative">
                    <div class="coming-soon-badge">Coming Soon</div>
                    <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4">
                        <i class="fas fa-sitemap text-red-600 text-xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-3">Enterprise Solutions</h3>
                    <p class="text-gray-600 mb-4">Custom solutions for large businesses with complex requirements and multiple locations.</p>
                    <ul class="space-y-2 mb-6">
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Multi-location management</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Advanced user roles & permissions</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Custom integrations</span>
                        </li>
                        <li class="flex items-start">
                            <i class="fas fa-check text-gray-400 mt-1 mr-2"></i>
                            <span class="text-gray-400">Dedicated account management</span>
                        </li>
                    </ul>
                    <a href="#" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-lg font-medium text-sm inline-block transition-all duration-200 cursor-not-allowed">
                        Contact Sales
                    </a>
                </div>
            </div>
        </div>
    </section>

    <!-- Pricing Section -->
    <section id="pricing" class="py-16 bg-gray-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-secondary-100 text-secondary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Pricing</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Simple, Transparent Pricing</h2>
                <p class="text-lg text-gray-600">Choose the plan that's right for your business. No hidden fees or long-term contracts.</p>
            </div> -->

            <div class="grid md:grid-cols-3 gap-8">
                <!-- Basic Plan -->
                <!-- <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="p-6">
                        <h3 class="text-xl font-semibold mb-2">Basic</h3>
                        <p class="text-gray-600 mb-6">Perfect for small businesses just getting started</p>
                        <div class="flex items-baseline mb-6">
                            <span class="text-4xl font-bold">$29</span>
                            <span class="text-gray-500 ml-2">/month</span>
                        </div>
                        <ul class="space-y-3 mb-6">
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Up to 300 orders/month</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Basic analytics</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">1 WhatsApp number</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Email support</span>
                            </li>
                            <li class="flex items-start text-gray-400">
                                <i class="fas fa-times mt-1 mr-2"></i>
                                <span>Advanced features</span>
                            </li>
                        </ul>
                    </div>
                    <div class="px-6 pb-6">
                        <a href="#" class="block w-full py-3 px-4 rounded-lg border border-primary-500 text-primary-500 font-medium text-center hover:bg-primary-50 transition-all duration-200">
                            Choose Basic
                        </a>
                    </div>
                </div> -->

                <!-- Pro Plan -->
                <!-- <div class="bg-white rounded-xl shadow-xl border-2 border-primary-500 overflow-hidden relative transform md:-translate-y-4">
                    <div class="bg-primary-500 text-white text-sm font-semibold py-1 text-center">
                        MOST POPULAR
                    </div>
                    <div class="p-6">
                        <h3 class="text-xl font-semibold mb-2">Professional</h3>
                        <p class="text-gray-600 mb-6">Ideal for growing businesses with regular orders</p>
                        <div class="flex items-baseline mb-6">
                            <span class="text-4xl font-bold">$79</span>
                            <span class="text-gray-500 ml-2">/month</span>
                        </div>
                        <ul class="space-y-3 mb-6">
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Up to 1,000 orders/month</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Advanced analytics</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">2 WhatsApp numbers</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Priority email & chat support</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">All advanced features</span>
                            </li>
                        </ul>
                    </div>
                    <div class="px-6 pb-6">
                        <a href="#" class="block w-full py-3 px-4 rounded-lg bg-primary-500 text-white font-medium text-center hover:bg-primary-600 transition-all duration-200">
                            Choose Professional
                        </a>
                    </div>
                </div> -->

                <!-- Enterprise Plan -->
                <!-- <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <div class="p-6">
                        <h3 class="text-xl font-semibold mb-2">Enterprise</h3>
                        <p class="text-gray-600 mb-6">For large businesses with high volume needs</p>
                        <div class="flex items-baseline mb-6">
                            <span class="text-4xl font-bold">$199</span>
                            <span class="text-gray-500 ml-2">/month</span>
                        </div>
                        <ul class="space-y-3 mb-6">
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Unlimited orders</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Custom analytics & reporting</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">5 WhatsApp numbers</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">24/7 priority support</span>
                            </li>
                            <li class="flex items-start">
                                <i class="fas fa-check text-primary-500 mt-1 mr-2"></i>
                                <span class="text-gray-600">Custom integrations</span>
                            </li>
                        </ul>
                    </div>
                    <div class="px-6 pb-6">
                        <a href="#" class="block w-full py-3 px-4 rounded-lg border border-primary-500 text-primary-500 font-medium text-center hover:bg-primary-50 transition-all duration-200">
                            Contact Sales
                        </a>
                    </div>
                </div> -->
            </div>

            <div class="bg-white rounded-xl shadow-sm mt-12 p-8 text-center">
                <h3 class="text-xl font-semibold mb-3">Need a custom solution?</h3>
                <p class="text-gray-600 mb-6 max-w-2xl mx-auto">We offer tailored solutions for businesses with specific requirements. Contact our sales team to discuss your needs.</p>
                <a href="https://wa.me/254793601115" class="bg-primary-500 text-white py-3 px-6 rounded-lg font-medium text-base hover:bg-primary-600 transition-all duration-200 inline-flex items-center" target="_blank">
                    <i class="fab fa-whatsapp mr-2"></i>
                    Contact Sales
                </a>
            </div>
        </div>
    </section>

    <!-- Testimonials Section -->
    <section class="py-16">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-primary-100 text-primary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Testimonials</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">What Our Customers Say</h2>
                <p class="text-lg text-gray-600">Don't just take our word for it. Here's what businesses like yours have achieved with ConvoCart.</p>
            </div>

            <div class="grid md:grid-cols-3 gap-8">
                <!-- Testimonial 1 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                    <div class="flex items-center mb-4">
                        <div class="flex text-yellow-400">
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                        </div>
                        <span class="text-gray-500 ml-2">5.0</span>
                    </div>
                    <p class="text-gray-600 mb-6">"Since implementing ConvoCart, our orders have increased by 40%. Customers love the simplicity of ordering through WhatsApp, and we've significantly reduced our operational costs."</p>
                    <div class="flex items-center">
                        <img src="https://randomuser.me/api/portraits/women/32.jpg" alt="Customer" class="w-12 h-12 rounded-full">
                        <div class="ml-3">
                            <h4 class="font-semibold">Sarah Johnson</h4>
                            <p class="text-sm text-gray-500">Cafe Owner</p>
                        </div>
                    </div>
                </div>

                <!-- Testimonial 2 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                    <div class="flex items-center mb-4">
                        <div class="flex text-yellow-400">
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                        </div>
                        <span class="text-gray-500 ml-2">5.0</span>
                    </div>
                    <p class="text-gray-600 mb-6">"As a small boutique, we were struggling with customer outreach. ConvoCart has transformed our business by making it easy for customers to browse our catalog and place orders directly through WhatsApp."</p>
                    <div class="flex items-center">
                        <img src="https://randomuser.me/api/portraits/men/43.jpg" alt="Customer" class="w-12 h-12 rounded-full">
                        <div class="ml-3">
                            <h4 class="font-semibold">Michael Chen</h4>
                            <p class="text-sm text-gray-500">Fashion Retailer</p>
                        </div>
                    </div>
                </div>

                <!-- Testimonial 3 -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                    <div class="flex items-center mb-4">
                        <div class="flex text-yellow-400">
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star"></i>
                            <i class="fas fa-star-half-alt"></i>
                        </div>
                        <span class="text-gray-500 ml-2">4.5</span>
                    </div>
                    <p class="text-gray-600 mb-6">"The analytics provided by ConvoCart have been invaluable for understanding our customers better. We've been able to tailor our offerings based on real data, resulting in a 25% increase in repeat purchases."</p>
                    <div class="flex items-center">
                        <img src="https://randomuser.me/api/portraits/women/21.jpg" alt="Customer" class="w-12 h-12 rounded-full">
                        <div class="ml-3">
                            <h4 class="font-semibold">Priya Patel</h4>
                            <p class="text-sm text-gray-500">Grocery Store Manager</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- FAQ Section -->
    <section class="py-16 bg-gray-50">
        <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto mb-16">
                <span class="inline-block bg-secondary-100 text-secondary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">FAQ</span>
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Frequently Asked Questions</h2>
                <p class="text-lg text-gray-600">Have questions? We're here to help.</p>
            </div>

            <div class="bg-white rounded-xl shadow-sm border border-gray-100 divide-y divide-gray-200">
                <!-- FAQ Item 1 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(1)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">How does ConvoCart work with my WhatsApp Business account?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-1" class="mt-3 text-gray-600 hidden">
                        <p>ConvoCart integrates seamlessly with your WhatsApp Business API account. After a simple setup process, our platform handles all incoming messages, processes orders automatically, and provides you with a dashboard to manage everything. Your customers interact with your business through WhatsApp just like they normally would, but behind the scenes, our system is organizing and processing their orders.</p>
                    </div>
                </div>

                <!-- FAQ Item 2 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(2)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">Do I need technical knowledge to set up ConvoCart?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-2" class="mt-3 text-gray-600 hidden">
                        <p>Not at all! We've designed ConvoCart to be user-friendly and easy to set up, even if you have no technical background. Our step-by-step onboarding process guides you through connecting your WhatsApp account, setting up your product catalog, and customizing your automated responses. If you ever need help, our support team is always available to assist you.</p>
                    </div>
                </div>

                <!-- FAQ Item 3 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(3)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">What payment methods can my customers use?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-3" class="mt-3 text-gray-600 hidden">
                        <p>ConvoCart supports a wide range of payment methods to give your customers flexibility. This includes major credit and debit cards, mobile money services, bank transfers, and cash on delivery. We're constantly adding new payment options to ensure you can serve customers regardless of their preferred payment method. All online payments are processed securely through our PCI-compliant payment system.</p>
                    </div>
                </div>

                <!-- FAQ Item 4 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(4)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">Can I customize the automated responses?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-4" class="mt-3 text-gray-600 hidden">
                        <p>Absolutely! ConvoCart allows you to fully customize all automated messages to match your brand voice and specific requirements. You can create custom welcome messages, order confirmations, follow-up messages, and more. Our system also supports dynamic content insertion, so you can personalize messages with customer names, order details, and other relevant information.</p>
                    </div>
                </div>

                <!-- FAQ Item 5 -->
                <div class="p-6">
                    <button class="flex w-full text-left" onclick="toggleFAQ(5)">
                        <div class="flex-1">
                            <h3 class="text-lg font-semibold">Is there a limit to how many orders I can process?</h3>
                        </div>
                        <div class="ml-2">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </button>
                    <div id="faq-5" class="mt-3 text-gray-600 hidden">
                        <p>Our Basic and Professional plans have monthly order limits as specified in our pricing section. If you consistently exceed these limits, we recommend upgrading to a higher tier or our Enterprise plan, which offers unlimited orders. Our system is built to scale with your business, so you can start with a lower tier and upgrade as your order volume grows.</p>
                    </div>
                </div>
            </div>

            <div class="text-center mt-8">
                <p class="text-gray-600">Still have questions?</p>
                <a href="#contact" class="text-primary-500 font-medium hover:text-primary-600">Contact our support team</a>
            </div>
        </div>
    </section>

    <!-- CTA Section -->
    <section class="py-16 bg-primary-500 text-white">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="text-center max-w-3xl mx-auto">
                <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Ready to Transform Your Business?</h2>
                <p class="text-lg text-white/90 mb-8">Join thousands of businesses using ConvoCart to sell more and delight customers through WhatsApp.</p>
                <div class="flex flex-col sm:flex-row justify-center space-y-3 sm:space-y-0 sm:space-x-4">
                    <a href="#" class="bg-white text-primary-600 py-3 px-6 rounded-lg font-medium text-base hover:bg-gray-100 transition-all duration-200">
                        Start Free Trial
                    </a>
                    <a href="#" class="border border-white text-white py-3 px-6 rounded-lg font-medium text-base hover:bg-white/10 transition-all duration-200">
                        Schedule Demo
                    </a>
                </div>
                <p class="mt-6 text-white/80 text-sm">No credit card required. 14-day free trial.</p>
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="py-16">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="grid md:grid-cols-2 gap-12">
                <div>
                    <span class="inline-block bg-primary-100 text-primary-800 py-1 px-3 rounded-full text-sm font-medium mb-4">Contact Us</span>
                    <h2 class="text-3xl md:text-4xl font-display font-bold mb-5">Get in Touch</h2>
                    <p class="text-lg text-gray-600 mb-8">Have questions or ready to get started? Our team is here to help you implement the perfect WhatsApp commerce solution for your business.</p>
                    
                    <div class="space-y-6">
                        <div class="flex items-start">
                            <div class="bg-primary-100 rounded-full p-3 mr-4">
                                <i class="fas fa-envelope text-primary-600"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold mb-1">Email Us</h3>
                                <p class="text-gray-600">info@convocart.com</p>
                            </div>
                        </div>
                        
                        <div class="flex items-start">
                            <div class="bg-primary-100 rounded-full p-3 mr-4">
                                <i class="fas fa-phone-alt text-primary-600"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold mb-1">Call Us</h3>
                                <p class="text-gray-600">+254 793 601 115</p>
                            </div>
                        </div>
                        
                        <div class="flex items-start">
                            <div class="bg-primary-100 rounded-full p-3 mr-4">
                                <i class="fas fa-map-marker-alt text-primary-600"></i>
                            </div>
                            <div>
                                <h3 class="font-semibold mb-1">Visit Us</h3>
                                <p class="text-gray-600">Westlands Business Park, Nairobi, Kenya</p>
                            </div>
                        </div>
                    </div>

                    <div class="mt-8">
                        <h3 class="font-semibold mb-3">Follow Us</h3>
                        <div class="flex space-x-4">
                            <a href="#" class="bg-gray-100 hover:bg-gray-200 text-gray-600 h-10 w-10 rounded-full flex items-center justify-center transition-all duration-200">
                                <i class="fab fa-facebook-f"></i>
                            </a>
                            <a href="#" class="bg-gray-100 hover:bg-gray-200 text-gray-600 h-10 w-10 rounded-full flex items-center justify-center transition-all duration-200">
                                <i class="fab fa-twitter"></i>
                            </a>
                            <a href="#" class="bg-gray-100 hover:bg-gray-200 text-gray-600 h-10 w-10 rounded-full flex items-center justify-center transition-all duration-200">
                                <i class="fab fa-instagram"></i>
                            </a>
                            <a href="#" class="bg-gray-100 hover:bg-gray-200 text-gray-600 h-10 w-10 rounded-full flex items-center justify-center transition-all duration-200">
                                <i class="fab fa-linkedin-in"></i>
                            </a>
                        </div>
                    </div>
                </div>
                
                <div>
                    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                        <h3 class="text-xl font-semibold mb-6">Send Us a Message</h3>
                        <form>
                            <div class="grid grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                                    <input type="text" id="name" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500" readonly>
                                </div>
                                <div>
                                    <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                                    <input type="email" id="email" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500" readonly>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label for="company" class="block text-sm font-medium text-gray-700 mb-1">Company</label>
                                <input type="text" id="company" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500" readonly>
                            </div>
                            <div class="mb-4">
                                <label for="subject" class="block text-sm font-medium text-gray-700 mb-1">Subject</label>
                                <input type="text" id="subject" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500" readonly>
                            </div>
                            <div class="mb-4">
                                <label for="message" class="block text-sm font-medium text-gray-700 mb-1">Message</label>
                                <textarea id="message" rows="4" class="w-full border border-gray-300 rounded-lg p-2 focus:ring-primary-500 focus:border-primary-500" readonly></textarea>
                            </div>
                            <button type="submit" class="w-full bg-primary-500 text-white py-3 px-4 rounded-lg font-medium hover:bg-primary-600 transition-all duration-200">
                                Send Message
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-12">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8">
                <div class="lg:col-span-2">
                    <div class="flex items-center space-x-2 mb-4">
                        <i class="fa-brands fa-whatsapp text-xl"></i>
                        <span class="font-display font-bold text-xl">ConvoCart</span>
                    </div>
                    <p class="text-gray-400 mb-6 max-w-md">ConvoCart helps businesses sell directly through WhatsApp with automated ordering, payments, and customer management.</p>
                    <div class="flex space-x-4">
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">
                            <i class="fab fa-facebook-f"></i>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">
                            <i class="fab fa-twitter"></i>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">
                            <i class="fab fa-instagram"></i>
                        </a>
                        <a href="#" class="text-gray-400 hover:text-white transition-colors">
                            <i class="fab fa-linkedin-in"></i>
                        </a>
                    </div>
                </div>
                
                <div>
                    <h4 class="font-semibold text-lg mb-4">Company</h4>
                    <ul class="space-y-3">
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">About Us</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Blog</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Careers</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Press</a></li>
                    </ul>
                </div>
                
                <div>
                    <h4 class="font-semibold text-lg mb-4">Product</h4>
                    <ul class="space-y-3">
                        <li><a href="#features" class="text-gray-400 hover:text-white transition-colors">Features</a></li>
                        <li><a href="#pricing" class="text-gray-400 hover:text-white transition-colors">Pricing</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Documentation</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">API</a></li>
                    </ul>
                </div>
                
                <div>
                    <h4 class="font-semibold text-lg mb-4">Support</h4>
                    <ul class="space-y-3">
                        <li><a href="#contact" class="text-gray-400 hover:text-white transition-colors">Contact Us</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Help Center</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Privacy Policy</a></li>
                        <li><a href="#" class="text-gray-400 hover:text-white transition-colors">Terms of Service</a></li>
                    </ul>
                </div>
            </div>
            
            <div class="mt-12 pt-8 border-t border-gray-700 flex flex-col md:flex-row md:justify-between md:items-center">
                <p class="text-gray-400">&copy; 2025 ConvoCart. All rights reserved.</p>
                <div class="mt-4 md:mt-0">
                    <select class="bg-gray-700 text-gray-300 rounded px-3 py-1 border border-gray-600">
                        <option>English</option>
                        <option>Français</option>
                        <option>Español</option>
                        <option>Swahili</option>
                    </select>
                </div>
            </div>
        </div>
    </footer>

    <script>
        // Mobile menu toggle
        document.getElementById('mobile-menu-button').addEventListener('click', function() {
            const menu = document.getElementById('mobile-menu');
            menu.classList.toggle('hidden');
        });
        
        // FAQ toggles
        function toggleFAQ(id) {
            const content = document.getElementById(`faq-${id}`);
            content.classList.toggle('hidden');
        }
    </script>
</body>
</html><!-- app/templates/settings.html -->
{% extends "base.html" %}
{% block title %}Settings | WhatsApp Order Bot{% endblock %}
{% block content %}
<div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <h1 class="text-2xl font-bold mb-6">System Settings</h1>
{% if success_message %}
<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
    <p>{{ success_message }}</p>
</div>
{% endif %}

{% if error_message %}
<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
    <p>{{ error_message }}</p>
</div>
{% endif %}

<form method="POST" action="/admin/settings/update">
    <div class="space-y-6">
        {% if admin.role.value == 'super_admin' %}
        <!-- WhatsApp Settings -->
        <div>
            <h2 class="text-xl font-semibold mb-4 border-b pb-2">WhatsApp API Settings</h2>
            
            <div class="mb-4">
                <label for="config_whatsapp_phone_number" class="block text-sm font-medium text-gray-700 mb-1">
                    WhatsApp Business Phone Number
                </label>
                <div class="flex">
                    <span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500">+</span>
                    <input type="text" id="config_whatsapp_phone_number" name="config_whatsapp_phone_number" 
                           value="{{ configs|selectattr('key', 'equalto', 'whatsapp_phone_number')|map(attribute='value')|first or '' }}" 
                           class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300 focus:ring-blue-500 focus:border-blue-500" 
                           placeholder="1234567890">
                </div>
                <p class="mt-1 text-sm text-gray-500">Enter your WhatsApp Business phone number without the + prefix.</p>
            </div>
            
            <div class="mb-4">
                <label for="config_whatsapp_api_url" class="block text-sm font-medium text-gray-700 mb-1">
                    WhatsApp API URL
                </label>
                <input type="text" id="config_whatsapp_api_url" name="config_whatsapp_api_url" 
                       value="{{ configs|selectattr('key', 'equalto', 'whatsapp_api_url')|map(attribute='value')|first or '' }}" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" 
                       placeholder="https://graph.facebook.com/v18.0">
                <p class="mt-1 text-sm text-gray-500">The base URL for the WhatsApp Business API.</p>
            </div>
            
            <div class="mb-4">
                <label for="config_whatsapp_phone_id" class="block text-sm font-medium text-gray-700 mb-1">
                    WhatsApp Phone ID
                </label>
                <input type="text" id="config_whatsapp_phone_id" name="config_whatsapp_phone_id" 
                       value="{{ configs|selectattr('key', 'equalto', 'whatsapp_phone_id')|map(attribute='value')|first or '' }}" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" 
                       placeholder="123456789012345">
                <p class="mt-1 text-sm text-gray-500">The Phone Number ID from your WhatsApp Business account.</p>
            </div>
            
            <div class="mb-4">
                <label for="config_whatsapp_api_token" class="block text-sm font-medium text-gray-700 mb-1">
                    WhatsApp API Token
                </label>
                <div class="flex">
                    <input type="password" id="config_whatsapp_api_token" name="config_whatsapp_api_token" 
                           value="{{ configs|selectattr('key', 'equalto', 'whatsapp_api_token')|map(attribute='value')|first or '' }}" 
                           class="flex-1 min-w-0 block w-full px-3 py-2 rounded-l-md border border-gray-300 focus:ring-blue-500 focus:border-blue-500" 
                           placeholder="••••••••••••••••••••••••">
                    <button type="button" id="toggle_token" class="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                <p class="mt-1 text-sm text-gray-500">Your WhatsApp Business API access token (begins with "EAA"). This is required for sending messages.</p>
                <p class="mt-1 text-sm text-red-500">Note: If messages fail with a 401 error, double check that your token is valid and not expired.</p>
            </div>
            
            <div class="mb-4">
                <label for="config_webhook_verify_token" class="block text-sm font-medium text-gray-700 mb-1">
                    Webhook Verify Token
                </label>
                <div class="flex">
                    <input type="password" id="config_webhook_verify_token" name="config_webhook_verify_token" 
                           value="{{ configs|selectattr('key', 'equalto', 'webhook_verify_token')|map(attribute='value')|first or '' }}" 
                           class="flex-1 min-w-0 block w-full px-3 py-2 rounded-l-md border border-gray-300 focus:ring-blue-500 focus:border-blue-500" 
                           placeholder="••••••••••••••••••••••••">
                    <button type="button" id="toggle_webhook_token" class="inline-flex items-center px-3 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
                <p class="mt-1 text-sm text-gray-500">The verification token for WhatsApp webhooks.</p>
            </div>
            
            <div class="mt-6">
                <h3 class="text-lg font-medium text-gray-700 mb-2">Test WhatsApp Connection</h3>
                <div class="flex items-center mb-2">
                    <input type="text" id="test_phone_number" placeholder="Phone number with country code"
                           class="mr-2 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                    <button type="button" id="test_connection" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">
                        Send Test Message
                    </button>
                </div>
                <p class="text-sm text-gray-500">Enter a phone number with country code (e.g., +254712345678) to test if your WhatsApp API configuration is working.</p>
                <div id="test_result" class="mt-2 hidden"></div>
            </div>
            
            <div class="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-info-circle text-yellow-500"></i>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-yellow-800">Important Note</h3>
                        <div class="mt-2 text-sm text-yellow-700">
                            <p>After saving, use the "Reload WhatsApp Config" button to apply changes without restarting the application.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {% endif %}
        
        <!-- General Settings -->
        <div>
            <h2 class="text-xl font-semibold mb-4 border-b pb-2">General Settings</h2>
            
            <div class="mb-4">
                <label for="config_business_name" class="block text-sm font-medium text-gray-700 mb-1">
                    Business Name
                </label>
                <input type="text" id="config_business_name" name="config_business_name" 
                       value="{{ configs|selectattr('key', 'equalto', 'business_name')|map(attribute='value')|first or '' }}" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" 
                       placeholder="Your Business Name">
            </div>
            
            <div class="mb-4">
                <label for="config_default_welcome_message" class="block text-sm font-medium text-gray-700 mb-1">
                    Default Welcome Message
                </label>
                <textarea id="config_default_welcome_message" name="config_default_welcome_message" rows="3"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" 
                          placeholder="Welcome to our service! How can we help you today?">{{ configs|selectattr('key', 'equalto', 'default_welcome_message')|map(attribute='value')|first or '' }}</textarea>
                <p class="mt-1 text-sm text-gray-500">This message will be sent when a user first interacts with your bot.</p>
            </div>
        </div>
        
        <!-- Form buttons -->
        <div class="flex justify-between">
            {% if admin.role.value == 'super_admin' %}
            <button type="button" id="reload_config" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 flex items-center">
                <i class="fas fa-sync-alt mr-2"></i> Reload WhatsApp Config
            </button>
            {% else %}
            <div></div>
            {% endif %}
            
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                Save Settings
            </button>
        </div>
    </div>
</form>
</div>
{% endblock %}
{% block scripts %}
<script>
    // Toggle password visibility for API token
    document.getElementById('toggle_token')?.addEventListener('click', function() {
        const tokenInput = document.getElementById('config_whatsapp_api_token');
        const icon = this.querySelector('i');
        
        if (tokenInput.type === 'password') {
            tokenInput.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            tokenInput.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    });
    
    // Toggle password visibility for webhook token
    document.getElementById('toggle_webhook_token')?.addEventListener('click', function() {
        const tokenInput = document.getElementById('config_webhook_verify_token');
        const icon = this.querySelector('i');
        
        if (tokenInput.type === 'password') {
            tokenInput.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            tokenInput.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    });
    
    // Reload WhatsApp configuration
    document.getElementById('reload_config')?.addEventListener('click', function() {
        const button = this;
        const originalText = button.innerHTML;
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Reloading...';
        
        fetch('/admin/reload-whatsapp-config', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const successDiv = document.createElement('div');
                successDiv.className = 'fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded shadow-lg z-50';
                successDiv.innerHTML = '<strong>Success!</strong> WhatsApp configuration reloaded.';
                document.body.appendChild(successDiv);
                
                setTimeout(() => {
                    successDiv.remove();
                }, 3000);
            } else {
                throw new Error(data.message || 'Failed to reload configuration');
            }
        })
        .catch(error => {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded shadow-lg z-50';
            errorDiv.innerHTML = `<strong>Error:</strong> ${error.message}`;
            document.body.appendChild(errorDiv);
            
            setTimeout(() => {
                errorDiv.remove();
            }, 5000);
        })
        .finally(() => {
            button.disabled = false;
            button.innerHTML = originalText;
        });
    });
    
    // Test WhatsApp connection
    document.getElementById('test_connection')?.addEventListener('click', function() {
        const button = this;
        const originalText = button.innerHTML;
        const phoneNumber = document.getElementById('test_phone_number').value;
        const resultElement = document.getElementById('test_result');
        
        if (!phoneNumber) {
            resultElement.className = 'mt-2 p-3 bg-red-100 border border-red-400 text-red-700 rounded';
            resultElement.innerHTML = '<strong>Error:</strong> Please enter a phone number to test';
            resultElement.classList.remove('hidden');
            return;
        }
        
        // Format phone number if needed (ensure it has a + prefix)
        let formattedPhone = phoneNumber;
        if (!formattedPhone.startsWith('+')) {
            formattedPhone = '+' + formattedPhone;
        }
        
        button.disabled = true;
        button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Sending...';
        resultElement.classList.add('hidden');
        
        fetch('/admin/test-whatsapp-connection', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ phone_number: formattedPhone })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                resultElement.className = 'mt-2 p-3 bg-green-100 border border-green-400 text-green-700 rounded';
                resultElement.innerHTML = '<strong>Success!</strong> Test message sent successfully. Check the phone to verify receipt.';
            } else {
                resultElement.className = 'mt-2 p-3 bg-red-100 border border-red-400 text-red-700 rounded';
                resultElement.innerHTML = `<strong>Error:</strong> ${data.message}<br><br>
                <strong>Troubleshooting:</strong><br>
                - Make sure your WhatsApp API token is valid and not expired<br>
                - Verify your WhatsApp Phone ID is correct<br>
                - Check that the phone number is properly formatted with country code<br>
                - Ensure your business account has proper permissions`;
            }
            resultElement.classList.remove('hidden');
        })
        .catch(error => {
            resultElement.className = 'mt-2 p-3 bg-red-100 border border-red-400 text-red-700 rounded';
            resultElement.innerHTML = `<strong>Error:</strong> ${error.message}`;
            resultElement.classList.remove('hidden');
        })
        .finally(() => {
            button.disabled = false;
            button.innerHTML = originalText;
        });
    });
</script>
{% endblock %}<!-- app/templates/groups.html -->
{% extends "base.html" %}

{% block title %}Manage Groups | WhatsApp Order Bot{% endblock %}

{% block content %}
<div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">Groups</h1>
        
        <div class="flex space-x-2">
            <a href="/admin/groups/new" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
                Add New Group
            </a>
            {% if admin.role.value == 'super_admin' %}
            <a href="/admin/groups/link-generator" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700">
                Generate Links
            </a>
            {% endif %}
        </div>
    </div>
    
    {% if categories %}
    <div class="mb-6">
        <div class="flex space-x-2 flex-wrap">
            <a href="/admin/groups" class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 {% if not category_filter %}font-bold{% endif %} mb-2">
                All Categories
            </a>
            {% for cat in categories %}
            <a href="/admin/groups?category={{ cat }}" class="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200 {% if category_filter == cat %}font-bold{% endif %} mb-2">
                {{ cat }}
            </a>
            {% endfor %}
        </div>
    </div>
    {% endif %}
    
    {% if groups %}
    <div class="overflow-x-auto">
        <table class="w-full border-collapse">
            <thead>
                <tr class="bg-gray-100">
                    <th class="border p-2 text-left">ID</th>
                    <th class="border p-2 text-left">Name</th>
                    <th class="border p-2 text-left">Identifier</th>
                    <th class="border p-2 text-left">Category</th>
                    <th class="border p-2 text-left">Status</th>
                    <th class="border p-2 text-left">WhatsApp Link</th>
                    <th class="border p-2 text-left">Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for group in groups %}
                <tr class="hover:bg-gray-50">
                    <td class="border p-2">{{ group.id }}</td>
                    <td class="border p-2">{{ group.name }}</td>
                    <td class="border p-2">{{ group.identifier }}</td>
                    <td class="border p-2">{{ group.category or '-' }}</td>
                    <td class="border p-2">
                        <span class="px-2 py-1 rounded-full text-xs 
                            {% if group.is_active %}bg-green-100 text-green-800{% else %}bg-red-100 text-red-800{% endif %}">
                            {{ "Active" if group.is_active else "Inactive" }}
                        </span>
                    </td>
                    <td class="border p-2">
                        {% if whatsapp_phone and group.identifier %}
                        <div class="flex items-center">
                            <input type="text" 
                                   readonly 
                                   value="https://wa.me/{{ whatsapp_phone }}?text=order%20from%20group%3A{{ group.identifier }}" 
                                   id="link-{{ group.id }}"
                                   class="text-xs px-2 py-1 border rounded mr-1 flex-grow overflow-hidden"
                                   onclick="this.select()">
                            <button 
                                onclick="copyToClipboard('link-{{ group.id }}')" 
                                class="bg-gray-200 hover:bg-gray-300 px-2 py-1 rounded text-xs">
                                Copy
                            </button>
                        </div>
                        {% else %}
                        <span class="text-xs text-gray-600">Phone or identifier missing</span>
                        {% endif %}
                    </td>
                    <td class="border p-2">
                        <div class="flex space-x-1">
                            <a href="/admin/groups/{{ group.id }}/edit" class="bg-blue-600 text-white px-2 py-1 rounded text-xs hover:bg-blue-700">
                                Edit
                            </a>
                            <form method="POST" action="/admin/groups/{{ group.id }}/delete" onsubmit="return confirm('Are you sure you want to delete this group?');">
                                <button type="submit" class="bg-red-600 text-white px-2 py-1 rounded text-xs hover:bg-red-700">
                                    Delete
                                </button>
                            </form>
                        </div>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    
    <!-- Pagination -->
    {% if total_pages > 1 %}
    <div class="flex justify-between items-center mt-6">
        <div>
            Showing page {{ current_page }} of {{ total_pages }}
            ({{ total_groups }} total groups)
        </div>
        
        <div class="flex space-x-2">
            {% if current_page > 1 %}
            <a href="/admin/groups?page={{ current_page - 1 }}{% if category_filter %}&category={{ category_filter }}{% endif %}" 
               class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">
                Previous
            </a>
            {% endif %}
            
            {% if current_page < total_pages %}
            <a href="/admin/groups?page={{ current_page + 1 }}{% if category_filter %}&category={{ category_filter }}{% endif %}" 
               class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">
                Next
            </a>
            {% endif %}
        </div>
    </div>
    {% endif %}
    
    {% else %}
    <div class="text-center py-8">
        <p class="text-gray-500 italic">No groups found.</p>
        <a href="/admin/groups/new" class="mt-4 inline-block px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
            Create Your First Group
        </a>
    </div>
    {% endif %}
</div>

{% block scripts %}
<script>
function copyToClipboard(elementId) {
    const element = document.getElementById(elementId);
    element.select();
    document.execCommand('copy');
    
    // Optional: Show a brief "Copied!" message
    const originalValue = element.value;
    element.value = "Copied!";
    setTimeout(() => {
        element.value = originalValue;
    }, 1000);
}
</script>
{% endblock %}
{% endblock %}<!-- app/templates/dashboard.html -->
{% extends "base.html" %}

{% block title %}Admin Dashboard | WhatsApp Order Bot{% endblock %}

{% block content %}
    <!-- Admin navigation -->
    <div class="mb-6">
        <nav class="flex flex-wrap gap-2">
            <a href="/admin/dashboard" class="btn btn-primary flex items-center">
                <i class="fas fa-tachometer-alt mr-2"></i>
                Dashboard
            </a>
            <a href="/admin/orders" class="btn btn-outline flex items-center">
                <i class="fas fa-shopping-cart mr-2"></i>
                Orders
            </a>
            <a href="/admin/groups" class="btn btn-outline flex items-center">
                <i class="fas fa-users mr-2"></i>
                Groups
            </a>
            {% if admin.role.value == 'super_admin' %}
            <a href="/admin/users" class="btn btn-outline flex items-center">
                <i class="fas fa-user-cog mr-2"></i>
                Users
            </a>
            <a href="/admin/groups/link-generator" class="btn btn-outline flex items-center">
                <i class="fas fa-link mr-2"></i>
                Link Generator
            </a>
            {% endif %}

            <a href="/admin/settings" class="btn btn-outline flex items-center">
                <i class="fas fa-cog mr-2"></i>
                Settings
            </a>
        </nav>
    </div>

    <!-- Welcome section with user info -->
    <div class="card mb-6">
        <div class="flex flex-col md:flex-row items-start md:items-center justify-between">
            <div>
                <h1 class="text-2xl font-bold text-gray-800">Welcome, {{ admin.full_name or admin.username }}</h1>
                <p class="text-gray-600">
                    {{ admin.role.value|replace('_', ' ')|title }} Account • 
                    {% if admin.last_login %}
                    Last login: {{ admin.last_login.strftime('%Y-%m-%d %H:%M') }}
                    {% else %}
                    First login
                    {% endif %}
                </p>
            </div>
            <div class="mt-4 md:mt-0 flex items-center">
                <div class="h-12 w-12 rounded-full bg-primary-100 flex items-center justify-center text-primary-600 font-bold text-xl">
                    {{ admin.username[:1]|upper }}
                </div>
            </div>
        </div>
    </div>

    <!-- Stats overview -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
        <div class="card bg-white p-6">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm font-medium text-gray-500">Total Orders</p>
                    <p class="text-3xl font-bold text-gray-900 mt-1">{{ total_orders }}</p>
                </div>
                <div class="rounded-full p-3 bg-blue-50">
                    <i class="fas fa-shopping-bag text-blue-500"></i>
                </div>
            </div>
        </div>
        
        <div class="card bg-white p-6">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm font-medium text-gray-500">Pending Orders</p>
                    <p class="text-3xl font-bold text-yellow-600 mt-1">{{ pending_orders }}</p>
                </div>
                <div class="rounded-full p-3 bg-yellow-50">
                    <i class="fas fa-clock text-yellow-500"></i>
                </div>
            </div>
        </div>
        
        <div class="card bg-white p-6">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm font-medium text-gray-500">Completed Orders</p>
                    <p class="text-3xl font-bold text-green-600 mt-1">{{ completed_orders }}</p>
                </div>
                <div class="rounded-full p-3 bg-green-50">
                    <i class="fas fa-check-circle text-green-500"></i>
                </div>
            </div>
        </div>
        
        <div class="card bg-white p-6">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm font-medium text-gray-500">Completion Rate</p>
                    <p class="text-3xl font-bold text-indigo-600 mt-1">
                        {% if total_orders > 0 %}
                        {{ "%.1f"|format(completed_orders / total_orders * 100) }}%
                        {% else %}
                        N/A
                        {% endif %}
                    </p>
                </div>
                <div class="rounded-full p-3 bg-indigo-50">
                    <i class="fas fa-chart-line text-indigo-500"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent orders -->
    <div class="card">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-xl font-bold text-gray-800">Recent Orders</h2>
            <a href="/admin/orders" class="text-primary-600 hover:text-primary-700 font-medium flex items-center">
                <span>View all</span>
                <i class="fas fa-arrow-right ml-1"></i>
            </a>
        </div>

        {% if orders %}
        <div class="overflow-x-auto">
            <table class="w-full border-collapse">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border p-2 text-left">Order #</th>
                        <th class="border p-2 text-left">Customer</th>
                        {% if admin.role.value == 'super_admin' %}
                        <th class="border p-2 text-left">Group</th>
                        {% endif %}
                        <th class="border p-2 text-left">Status</th>
                        <th class="border p-2 text-left">Payment</th>
                        <th class="border p-2 text-left">Amount</th>
                        <th class="border p-2 text-left">Date</th>
                        <th class="border p-2 text-left">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for order in orders %}
                    <tr class="hover:bg-gray-50">
                        <td class="border p-2">{{ order.order_number }}</td>
                        <td class="border p-2">
                            {% if order.customer %}
                                {{ order.customer.name }}<br>
                                <span class="text-xs text-gray-600">{{ order.customer.phone_number }}</span>
                            {% else %}
                                Customer #{{ order.customer_id }}
                            {% endif %}
                        </td>
                        {% if admin.role.value == 'super_admin' %}
                        <td class="border p-2">
                            {% if order.group %}
                                {{ order.group.name }}
                            {% else %}
                                Group #{{ order.group_id }}
                            {% endif %}
                        </td>
                        {% endif %}
                        <td class="border p-2">
                            <span class="px-2 py-1 rounded-full text-xs 
                                {% if order.status.value == 'pending' %}bg-yellow-100 text-yellow-800
                                {% elif order.status.value == 'processing' %}bg-blue-100 text-blue-800
                                {% elif order.status.value == 'completed' %}bg-green-100 text-green-800
                                {% elif order.status.value == 'cancelled' %}bg-red-100 text-red-800
                                {% elif order.status.value == 'refunded' %}bg-purple-100 text-purple-800
                                {% endif %}">
                                {{ order.status.value }}
                            </span>
                        </td>
                        <td class="border p-2">
                            {% if order.payment_method %}
                                <span class="text-sm">
                                    {{ order.payment_method.value|replace('_', ' ')|title }}
                                    <span class="ml-1 px-1 py-0 text-xs rounded-full 
                                        {% if order.payment_status.value == 'paid' %}bg-blue-100 text-blue-800
                                        {% elif order.payment_status.value == 'verified' %}bg-green-100 text-green-800
                                        {% elif order.payment_status.value == 'unpaid' %}bg-yellow-100 text-yellow-800
                                        {% elif order.payment_status.value == 'failed' %}bg-red-100 text-red-800
                                        {% elif order.payment_status.value == 'refunded' %}bg-purple-100 text-purple-800
                                        {% endif %}">
                                        {{ order.payment_status.value }}
                                    </span>
                                </span>
                                {% if order.payment_ref %}
                                <br><span class="text-xs text-gray-600">Ref: {{ order.payment_ref }}</span>
                                {% endif %}
                            {% else %}
                                <span class="text-xs text-gray-500">Not specified</span>
                            {% endif %}
                        </td>
                        <td class="border p-2">Ksh {{ "%.2f"|format(order.total_amount) }}</td>
                        <td class="border p-2" title="{{ order.created_at }}">
                            {{ order.created_at.strftime('%Y-%m-%d %H:%M') }}
                        </td>
                        <td class="border p-2">
                            <a href="/admin/orders?id={{ order.id }}" class="text-blue-600 hover:text-blue-800">
                                View
                            </a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {% else %}
        <div class="text-center py-8">
            <p class="text-gray-500 italic">No orders found.</p>
        </div>
        {% endif %}
    </div>
    {% if admin.role.value == 'super_admin' %}
    <!-- Quick links section -->
    <div class="mt-8">
        <h2 class="text-xl font-bold text-gray-800 mb-4">Quick Actions</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <a href="/admin/groups/link-generator" class="card bg-white p-5 flex flex-col items-center justify-center hover:bg-gray-50 transition-colors">
                <div class="rounded-full bg-purple-100 p-4 mb-3">
                    <i class="fas fa-link text-purple-600 text-xl"></i>
                </div>
                <h3 class="font-bold text-gray-800">Generate WhatsApp Links</h3>
                <p class="text-sm text-gray-500 text-center mt-1">Create sharing links for your customer groups</p>
            </a>
            
            <a href="/admin/groups/new" class="card bg-white p-5 flex flex-col items-center justify-center hover:bg-gray-50 transition-colors">
                <div class="rounded-full bg-green-100 p-4 mb-3">
                    <i class="fas fa-users text-green-600 text-xl"></i>
                </div>
                <h3 class="font-bold text-gray-800">Create New Group</h3>
                <p class="text-sm text-gray-500 text-center mt-1">Set up a new customer group</p>
            </a>
            
            <a href="/admin/settings" class="card bg-white p-5 flex flex-col items-center justify-center hover:bg-gray-50 transition-colors">
                <div class="rounded-full bg-blue-100 p-4 mb-3">
                    <i class="fas fa-cog text-blue-600 text-xl"></i>
                </div>
                <h3 class="font-bold text-gray-800">System Settings</h3>
                <p class="text-sm text-gray-500 text-center mt-1">Configure WhatsApp and system settings</p>
            </a>
        </div>
    </div>
    {% endif %}

{% endblock %}<!-- app/templates/orders.html -->
{% extends "base.html" %}

{% block title %}Manage Orders | WhatsApp Order Bot{% endblock %}

{% block content %}
<div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">Orders</h1>
        
        <div class="flex space-x-2">
            <a href="/admin/orders" class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 {% if not status_filter %}font-bold{% endif %}">
                All
            </a>
            <a href="/admin/orders?status=pending" class="px-3 py-1 bg-yellow-100 rounded hover:bg-yellow-200 {% if status_filter == 'pending' %}font-bold{% endif %}">
                Pending
            </a>
            <a href="/admin/orders?status=processing" class="px-3 py-1 bg-blue-100 rounded hover:bg-blue-200 {% if status_filter == 'processing' %}font-bold{% endif %}">
                Processing
            </a>
            <a href="/admin/orders?status=completed" class="px-3 py-1 bg-green-100 rounded hover:bg-green-200 {% if status_filter == 'completed' %}font-bold{% endif %}">
                Completed
            </a>
            <a href="/admin/orders?status=cancelled" class="px-3 py-1 bg-red-100 rounded hover:bg-red-200 {% if status_filter == 'cancelled' %}font-bold{% endif %}">
                Cancelled
            </a>
            <a href="/admin/orders?status=refunded" class="px-3 py-1 bg-purple-100 rounded hover:bg-purple-200 {% if status_filter == 'refunded' %}font-bold{% endif %}">
                Refunded
            </a>
        </div>
    </div>
    
        {% if orders %}
    <div class="overflow-x-auto">
        <table class="w-full border-collapse">
            <thead>
                <tr class="bg-gray-100">
                    <th class="border p-2 text-left">Order #</th>
                    <th class="border p-2 text-left">Customer</th>
                    {% if admin.role.value == 'super_admin' %}
                    <th class="border p-2 text-left">Group</th>
                    {% endif %}
                    <th class="border p-2 text-left">Details</th>
                    <th class="border p-2 text-left">Status</th>
                    <th class="border p-2 text-left">Payment</th>
                    <th class="border p-2 text-left">Amount</th>
                    <th class="border p-2 text-left">Date</th>
                    <th class="border p-2 text-left">Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for order in orders %}
                <tr class="hover:bg-gray-50">
                    <td class="border p-2">{{ order.order_number }}</td>
                    <td class="border p-2">
                        {% if order.id in customer_info %}
                            {{ customer_info[order.id].name }}<br>
                            <span class="text-xs text-gray-600">{{ customer_info[order.id].phone_number }}</span>
                        {% else %}
                            Customer #{{ order.customer_id }}
                        {% endif %}
                    </td>
                    {% if admin.role.value == 'super_admin' %}
                    <td class="border p-2">
                        {% if order.group %}
                            {{ order.group.name }}
                        {% else %}
                            Group #{{ order.group_id }}
                        {% endif %}
                    </td>
                    {% endif %}
                    <td class="border p-2">{{ order.order_details[:50] }}{% if order.order_details|length > 50 %}...{% endif %}</td>
                    <td class="border p-2">
                        <span class="px-2 py-1 rounded-full text-xs 
                            {% if order.status.value == 'pending' %}bg-yellow-100 text-yellow-800
                            {% elif order.status.value == 'processing' %}bg-blue-100 text-blue-800
                            {% elif order.status.value == 'completed' %}bg-green-100 text-green-800
                            {% elif order.status.value == 'cancelled' %}bg-red-100 text-red-800
                            {% elif order.status.value == 'refunded' %}bg-purple-100 text-purple-800
                            {% endif %}">
                            {{ order.status.value }}
                        </span>
                    </td>
                    <td class="border p-2">
                        {% if order.payment_method %}
                            <span class="text-sm">
                                {{ order.payment_method.value|replace('_', ' ')|title }}
                                <span class="ml-1 px-1 py-0 text-xs rounded-full 
                                    {% if order.payment_status.value == 'paid' %}bg-blue-100 text-blue-800
                                    {% elif order.payment_status.value == 'verified' %}bg-green-100 text-green-800
                                    {% elif order.payment_status.value == 'unpaid' %}bg-yellow-100 text-yellow-800
                                    {% elif order.payment_status.value == 'failed' %}bg-red-100 text-red-800
                                    {% elif order.payment_status.value == 'refunded' %}bg-purple-100 text-purple-800
                                    {% endif %}">
                                    {{ order.payment_status.value }}
                                </span>
                            </span>
                            {% if order.payment_ref %}
                            <br><span class="text-xs text-gray-600">Ref: {{ order.payment_ref }}</span>
                            {% endif %}
                        {% else %}
                            <span class="text-xs text-gray-500">Not specified</span>
                        {% endif %}
                    </td>
                    <td class="border p-2 text-xs">Ksh {{ "%.2f"|format(order.total_amount) }}</td>
                    <td class="border p-2" title="{{ order.created_at }}">
                        {{ order.created_at.strftime('%Y-%m-%d %H:%M') }}
                    </td>
                    <td class="border p-2">
                        <form method="POST" action="/admin/orders/{{ order.id }}/status" class="order-update-form flex flex-col space-y-2" data-order-id="{{ order.id }}">
                            <div class="flex space-x-1">
                                <select name="status" class="text-sm border rounded px-2 py-1">
                                    {% for status in order_statuses %}
                                    <option value="{{ status }}" {% if order.status.value == status %}selected{% endif %}>
                                        {{ status|title }}
                                    </option>
                                    {% endfor %}
                                </select>
                                <button type="submit" class="update-btn bg-blue-600 text-white px-2 py-1 rounded text-sm hover:bg-blue-700">
                                    Update
                                </button>
                            </div>
                            <div class="flex space-x-1">
                                <select name="payment_status" class="text-sm border rounded px-2 py-1">
                                    {% for status in ['unpaid', 'paid', 'verified', 'failed', 'refunded'] %}
                                    <option value="{{ status }}" {% if order.payment_status and order.payment_status.value == status %}selected{% endif %}>
                                        {{ status|title }}
                                    </option>
                                    {% endfor %}
                                </select>
                                <input type="text" name="payment_ref" placeholder="Payment ref" 
                                    value="{{ order.payment_ref or '' }}" class="text-sm border rounded px-2 py-1 w-24">
                            </div>
                            <div class="flex space-x-1">
                                <div class="flex items-center">
                                    <span class="text-xs mr-1">KSH</span>
                                    <input type="number" name="total_amount" placeholder="Amount" 
                                        value="{{ order.total_amount or 0 }}" step="0.01" min="0"
                                        class="text-sm border rounded px-2 py-1 w-24">
                                </div>
                                <div class="flex items-center ml-2">
                                    <input type="checkbox" name="notify_customer" id="notify_{{ order.id }}" value="True" class="mr-2">
                                    <label for="notify_{{ order.id }}" class="text-xs">Notify customer</label>
                                </div>
                            </div>
                            <div class="update-feedback hidden mt-2 p-1 text-xs rounded"></div>
                        </form>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    
    <!-- Pagination -->
    {% if total_pages > 1 %}
    <div class="flex justify-between items-center mt-6">
        <div>
            Showing page {{ current_page }} of {{ total_pages }}
            ({{ total_orders }} total orders)
        </div>
        
        <div class="flex space-x-2">
            {% if current_page > 1 %}
            <a href="/admin/orders?page={{ current_page - 1 }}{% if status_filter %}&status={{ status_filter }}{% endif %}" 
               class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">
                Previous
            </a>
            {% endif %}
            
            {% if current_page < total_pages %}
            <a href="/admin/orders?page={{ current_page + 1 }}{% if status_filter %}&status={{ status_filter }}{% endif %}" 
               class="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300">
                Next
            </a>
            {% endif %}
        </div>
    </div>
    {% endif %}
    
    {% else %}
    <div class="text-center py-8">
        <p class="text-gray-500 italic">No orders found.</p>
    </div>
    {% endif %}
</div>
{% endblock %}

{% block scripts %}
<script>
    // Debounce function to prevent multiple rapid submissions
    document.addEventListener('DOMContentLoaded', function() {
        const forms = document.querySelectorAll('.order-update-form');
        
        forms.forEach(form => {
            let isSubmitting = false;
            const feedbackDiv = form.querySelector('.update-feedback');
            
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (isSubmitting) {
                    return; // Prevent multiple submissions
                }
                
                // Visual feedback
                const submitButton = form.querySelector('.update-btn');
                const originalText = submitButton.textContent;
                submitButton.textContent = 'Updating...';
                submitButton.disabled = true;
                isSubmitting = true;
                
                // Submit the form using fetch API
                fetch(form.action, {
                    method: 'POST',
                    body: new FormData(form)
                })
                .then(response => {
                    if (response.redirected) {
                        // Success! Show feedback first, then redirect after a short delay
                        feedbackDiv.textContent = 'Update successful!';
                        feedbackDiv.classList.remove('hidden', 'bg-red-100', 'text-red-800');
                        feedbackDiv.classList.add('bg-green-100', 'text-green-800');
                        
                        setTimeout(() => {
                            window.location.href = response.url;
                        }, 500);
                    } else {
                        return response.text().then(text => {
                            throw new Error(text || 'An error occurred');
                        });
                    }
                })
                .catch(error => {
                    // Show error feedback
                    feedbackDiv.textContent = error.message || 'Update failed. Please try again.';
                    feedbackDiv.classList.remove('hidden', 'bg-green-100', 'text-green-800');
                    feedbackDiv.classList.add('bg-red-100', 'text-red-800');
                    
                    // Reset button
                    submitButton.textContent = originalText;
                    submitButton.disabled = false;
                    isSubmitting = false;
                });
            });
        });
    });
</script>
{% endblock %}<!-- app/templates/login.html -->
{% extends "base.html" %}

{% block title %}Admin Login | WhatsApp Order Bot{% endblock %}

{% block content %}
<div class="flex justify-center items-center py-12">
    <div class="card w-full max-w-md">
        <div class="text-center mb-8">
            <div class="inline-flex justify-center items-center w-20 h-20 bg-primary-100 rounded-full mb-4">
                <i class="fas fa-lock text-primary-500 text-3xl"></i>
            </div>
            <h1 class="text-2xl font-bold text-gray-800">Admin Login</h1>
            <p class="text-gray-500 mt-2">Sign in to access your dashboard</p>
        </div>
        
        <form method="POST" action="/admin/login" class="space-y-6">
            <div>
                <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-user text-gray-400"></i>
                    </div>
                    <input type="text" name="username" id="username" required
                        class="form-input pl-10"
                        placeholder="Enter your username">
                </div>
            </div>
            
            <div>
                <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <i class="fas fa-lock text-gray-400"></i>
                    </div>
                    <input type="password" name="password" id="password" required
                        class="form-input pl-10"
                        placeholder="Enter your password">
                </div>
            </div>
            
            <div>
                <button type="submit" 
                    class="btn btn-primary w-full">
                    <i class="fas fa-sign-in-alt mr-2"></i>
                    Sign In
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}<!-- Fixed app/templates/link_generator.html -->
{% extends "base.html" %}

{% block title %}WhatsApp Link Generator | WhatsApp Order Bot{% endblock %}

{% block content %}
<div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <h1 class="text-2xl font-bold mb-6">WhatsApp Click-to-Chat Link Generator</h1>
    
    <div class="mb-8">
        <p class="mb-4">
            Generate WhatsApp click-to-chat links for your groups. Share these links in WhatsApp group chats
            to let customers quickly connect to your ordering bot.
        </p>
        
        {% if error_message %}
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
            <p class="font-bold">Error</p>
            <p>{{ error_message }}</p>
            {% if error_message == "No active groups found. Please create a group first." %}
            <p class="mt-2">
                <a href="/admin/groups/new" class="text-red-700 underline">Create a new group</a>
            </p>
            {% endif %}
        </div>
        {% elif whatsapp_phone %}
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4">
            <p class="font-bold">All links use our business WhatsApp number: +{{ whatsapp_phone }}</p>
            <p>Each link will direct customers to the same WhatsApp number, but with different group identifiers.</p>
        </div>
        {% else %}
        <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4">
            <p class="font-bold">Warning: WhatsApp phone number not configured</p>
            <p>Please configure your WhatsApp business phone number in <a href="/admin/settings" class="underline">Settings</a>.</p>
        </div>
        {% endif %}
    </div>
    
    {% if groups %}
    <div class="mb-8">
        <h2 class="text-xl font-semibold mb-4">Generate Link</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="md:col-span-2">
                <label for="group-select" class="block text-sm font-medium text-gray-700 mb-1">Select a Group</label>
                <select id="group-select" class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                    <option value="">-- Select a Group --</option>
                    {% for group in groups %}
                    <option value="{{ group.identifier }}" {% if selected_group and selected_group.id == group.id %}selected{% endif %}>
                        {{ group.name }}{% if group.category %} ({{ group.category }}){% endif %}
                    </option>
                    {% endfor %}
                </select>
            </div>
            
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Actions</label>
                <button id="generate-btn" 
                        class="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400" 
                        {% if not selected_group %}disabled{% endif %}>
                    Generate Link
                </button>
            </div>
        </div>
    </div>
    
    <div id="link-result" class="{% if not generated_link %}hidden{% endif %} mb-8">
        <h2 class="text-xl font-semibold mb-4">Your WhatsApp Click-to-Chat Link</h2>
        
        <div class="border border-gray-300 rounded-lg p-4 bg-gray-50">
            <div class="mb-4">
                <label for="whatsapp-link" class="block text-sm font-medium text-gray-700 mb-1">Link URL</label>
                <div class="flex">
                    <input type="text" id="whatsapp-link" readonly 
                        class="flex-grow px-3 py-2 border border-gray-300 rounded-l-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        value="{{ generated_link }}"
                        onclick="this.select()">
                    <button onclick="copyToClipboard('whatsapp-link')" 
                        class="px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700">
                        Copy
                    </button>
                </div>
            </div>
            
            <div class="mb-4">
                <p class="text-sm font-medium text-gray-700 mb-1">Preview</p>
                <div class="p-3 bg-white border border-gray-300 rounded-md">
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
                        </svg>
                        <span id="link-preview" class="text-blue-600 underline">
                            {% if selected_group %}Chat with {{ selected_group.name }}{% endif %}
                        </span>
                    </div>
                </div>
            </div>
            
            <div class="mb-4">
                <label for="whatsapp-message" class="block text-sm font-medium text-gray-700 mb-1">Message Preview</label>
                <div class="p-3 bg-white border border-gray-300 rounded-md">
                    <div class="inline-block px-3 py-2 bg-green-100 rounded-lg max-w-xs">
                        <span id="message-preview">{{ generated_message }}</span>
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">Share Options</label>
                <div class="flex flex-wrap gap-2">
                    <a id="wa-share-link" href="{% if generated_link %}https://api.whatsapp.com/send?text={{ 'Join our ordering system by clicking this link: ' | urlencode }}{{ generated_link | urlencode }}{% endif %}" target="_blank"
                       class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12.031 6.172c-3.181 0-5.767 2.586-5.768 5.766-.001 1.298.38 2.27 1.019 3.287l-.582 2.128 2.182-.573c.978.58 1.911.928 3.145.929 3.178 0 5.767-2.587 5.768-5.766.001-3.187-2.575-5.77-5.764-5.771zm3.392 8.244c-.144.405-.837.774-1.17.824-.299.045-.677.063-1.092-.069-.252-.08-.575-.187-.988-.365-1.739-.751-2.874-2.502-2.961-2.617-.087-.116-.708-.94-.708-1.793s.448-1.273.607-1.446c.159-.173.346-.217.462-.217l.332.006c.106.005.249-.04.39.298.144.347.491 1.2.534 1.287.043.087.072.188.014.304-.058.116-.087.188-.173.289l-.26.304c-.087.086-.177.18-.076.354.101.174.449.741.964 1.201.662.591 1.221.774 1.394.86s.274.072.376-.043c.101-.116.433-.506.549-.68.116-.173.231-.145.39-.087s1.011.477 1.184.564.289.13.332.202c.045.72.045.418-.1.824zm-3.423-14.416c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm.029 18.88c-1.161 0-2.305-.292-3.318-.844l-3.677.964.984-3.595c-.607-1.052-.927-2.246-.926-3.468.001-3.825 3.113-6.937 6.937-6.937 1.856.001 3.598.723 4.907 2.034 1.31 1.311 2.031 3.054 2.03 4.908-.001 3.825-3.113 6.938-6.937 6.938z"/>
                        </svg>
                        Share on WhatsApp
                    </a>
                    <button onclick="copyToClipboard('whatsapp-link')" 
                            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                        Copy Link
                    </button>
                    <a href="/admin/groups" class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Manage Groups
                    </a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="mt-8">
        <h2 class="text-xl font-semibold mb-4">How to Use</h2>
        
        <ol class="list-decimal list-inside space-y-2 pl-4">
            <li>Select a group from the dropdown menu and click "Generate Link"</li>
            <li>Copy the generated link using the "Copy" button</li>
            <li>Share the link in your WhatsApp group chat</li>
            <li>When customers click the link, they'll be taken directly to a chat with your business number</li>
            <li>The pre-filled text will be sent automatically, which identifies which group they came from</li>
            <li>Your bot will respond with the appropriate welcome message and options</li>
        </ol>
        
    </div>
    {% endif %}
</div>
{% endblock %}

{% block scripts %}
<script>
// Store the WhatsApp phone number in a variable
var whatsappPhone = "{{ whatsapp_phone }}";

// Enable/disable generate button based on selection
document.getElementById('group-select')?.addEventListener('change', function() {
    const generateBtn = document.getElementById('generate-btn');
    if (generateBtn) {
        generateBtn.disabled = !this.value;
    }
});

// Generate link when button is clicked
document.getElementById('generate-btn')?.addEventListener('click', function() {
    const groupSelect = document.getElementById('group-select');
    if (!groupSelect) return;
    
    const groupIdentifier = groupSelect.value;
    if (!groupIdentifier) return;
    
    // Get the selected group name for preview
    const selectedOption = groupSelect.options[groupSelect.selectedIndex];
    const groupName = selectedOption.text;
    
    // Create the WhatsApp link
    const messageText = `order from group:${groupIdentifier}`;
    const encodedMessage = encodeURIComponent(messageText);
    const whatsappLink = `https://wa.me/${whatsappPhone}?text=${encodedMessage}`;
    
    // Update the UI - safely with null checks
    const linkInput = document.getElementById('whatsapp-link');
    const linkPreview = document.getElementById('link-preview');
    const messagePreview = document.getElementById('message-preview');
    const shareLink = document.getElementById('wa-share-link');
    const resultSection = document.getElementById('link-result');
    
    if (linkInput) linkInput.value = whatsappLink;
    if (linkPreview) linkPreview.textContent = `Chat with ${groupName}`;
    if (messagePreview) messagePreview.textContent = messageText;
    if (shareLink) shareLink.href = `https://api.whatsapp.com/send?text=${encodeURIComponent('Join our ordering system by clicking this link: ' + whatsappLink)}`;
    
    // Show the result section
    if (resultSection) resultSection.classList.remove('hidden');
});

function copyToClipboard(elementId) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    element.select();
    document.execCommand('copy');
    
    // Show a brief "Copied!" message
    const originalValue = element.value;
    element.value = "Copied!";
    setTimeout(() => {
        element.value = originalValue;
    }, 1000);
}
</script>
{% endblock %}<!-- app/templates/group_form.html -->
{% extends "base.html" %}

{% block title %}{{ "Edit" if group else "New" }} Group | WhatsApp Order Bot{% endblock %}

{% block content %}
<div class="bg-white rounded-lg shadow-md p-6 mb-6">
    <h1 class="text-2xl font-bold mb-6">{{ "Edit" if group else "Create New" }} Group</h1>
    
    <form method="POST" class="space-y-6">
        <!-- Basic Group Information -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Group Name *</label>
                <input type="text" name="name" id="name" required
                    value="{{ group.name if group else '' }}"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <p class="text-xs text-gray-500 mt-1">Name of the group as it will appear in the admin panel</p>
            </div>
            
            <div>
                <label for="identifier" class="block text-sm font-medium text-gray-700 mb-1">Group Identifier *</label>
                <input type="text" name="identifier" id="identifier" required
                    value="{{ group.identifier if group else '' }}"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <p class="text-xs text-gray-500 mt-1">Unique identifier used in WhatsApp links (no spaces, lowercase)</p>
            </div>
            
            <div>
                <label for="category" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <input type="text" name="category" id="category" list="category-list"
                    value="{{ group.category if group else '' }}"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                <datalist id="category-list">
                    {% for cat in categories %}
                    <option value="{{ cat }}">
                    {% endfor %}
                </datalist>
                <p class="text-xs text-gray-500 mt-1">Category for grouping (e.g., food, retail, services)</p>
            </div>
            
            <div>
                <label for="is_active" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <div class="mt-1">
                    <label class="inline-flex items-center">
                        <input type="checkbox" name="is_active" id="is_active" value="True"
                            {% if group is none or group.is_active %}checked{% endif %}
                            class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <span class="ml-2">Active</span>
                    </label>
                </div>
                <p class="text-xs text-gray-500 mt-1">Only active groups will appear in the link generator</p>
            </div>
        </div>
        
        <div>
            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea name="description" id="description" rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">{{ group.description if group else '' }}</textarea>
            <p class="text-xs text-gray-500 mt-1">Brief description of this group (for admin reference only)</p>
        </div>
        
        <div>
            <label for="welcome_message" class="block text-sm font-medium text-gray-700 mb-1">Welcome Message</label>
            <textarea name="welcome_message" id="welcome_message" rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">{{ group.welcome_message if group else '' }}</textarea>
            <p class="text-xs text-gray-500 mt-1">Custom welcome message sent when users click the WhatsApp link (leave empty for default)</p>
        </div>
        
        <div class="flex justify-between pt-4">
            <a href="/admin/groups" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">
                Cancel
            </a>
            
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
                {{ "Update" if group else "Create" }} Group
            </button>
        </div>
    </form>
</div>

{% block scripts %}
<script>
// Automatically generate the identifier from the name
document.getElementById('name').addEventListener('input', function() {
    // Only update the identifier if it hasn't been manually edited
    const identifierInput = document.getElementById('identifier');
    if (!identifierInput.dataset.manuallyEdited) {
        const name = this.value.trim();
        const identifier = name.toLowerCase()
            .replace(/[^a-z0-9]/gi, '-') // Replace non-alphanumeric with dashes
            .replace(/-+/g, '-')         // Replace multiple dashes with single dash
            .replace(/^-|-$/g, '');      // Remove leading and trailing dashes
        
        identifierInput.value = identifier;
    }
});

document.getElementById('identifier').addEventListener('input', function() {
    // Mark as manually edited
    this.dataset.manuallyEdited = 'true';
});
</script>
{% endblock %}
{% endblock %}