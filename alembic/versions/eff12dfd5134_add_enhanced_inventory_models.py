"""Add enhanced inventory models

Revision ID: eff12dfd5134
Revises: f4e015994771
Create Date: 2025-09-29 06:49:53.521460

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'eff12dfd5134'
down_revision: Union[str, None] = 'f4e015994771'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('business_templates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('business_type', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('default_units', sa.Text(), nullable=True),
    sa.Column('typical_products', sa.Text(), nullable=True),
    sa.Column('pricing_structure', sa.Text(), nullable=True),
    sa.Column('inventory_settings', sa.Text(), nullable=True),
    sa.Column('common_suppliers', sa.Text(), nullable=True),
    sa.Column('seasonal_factors', sa.Text(), nullable=True),
    sa.Column('regulatory_requirements', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('business_type')
    )
    op.create_table('inventory_locations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('location_type', sa.String(length=50), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('max_capacity', sa.Float(), nullable=True),
    sa.Column('capacity_unit', sa.Enum('PIECES', 'ITEMS', 'UNITS', 'BOXES', 'PACKETS', 'BOTTLES', 'BAGS', 'SACKS', 'GRAMS', 'KILOGRAMS', 'TONNES', 'POUNDS', 'MILLILITERS', 'LITERS', 'GALLONS', 'MILLIMETERS', 'CENTIMETERS', 'METERS', 'KILOMETERS', 'INCHES', 'FEET', 'YARDS', 'SQUARE_METERS', 'SQUARE_FEET', 'ACRES', 'HECTARES', 'BUNDLES', 'CRATES', 'JERRYCANS', 'CARTONS', name='unitofmeasure'), nullable=True),
    sa.Column('storage_conditions', sa.Text(), nullable=True),
    sa.Column('manager_name', sa.String(length=100), nullable=True),
    sa.Column('manager_phone', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('suppliers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('contact_person', sa.String(length=100), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('supplier_type', sa.String(length=100), nullable=True),
    sa.Column('products_category', sa.Text(), nullable=True),
    sa.Column('payment_terms', sa.String(length=200), nullable=True),
    sa.Column('location_region', sa.String(length=100), nullable=True),
    sa.Column('minimum_order', sa.Float(), nullable=True),
    sa.Column('minimum_order_unit', sa.Enum('PIECES', 'ITEMS', 'UNITS', 'BOXES', 'PACKETS', 'BOTTLES', 'BAGS', 'SACKS', 'GRAMS', 'KILOGRAMS', 'TONNES', 'POUNDS', 'MILLILITERS', 'LITERS', 'GALLONS', 'MILLIMETERS', 'CENTIMETERS', 'METERS', 'KILOMETERS', 'INCHES', 'FEET', 'YARDS', 'SQUARE_METERS', 'SQUARE_FEET', 'ACRES', 'HECTARES', 'BUNDLES', 'CRATES', 'JERRYCANS', 'CARTONS', name='unitofmeasure'), nullable=True),
    sa.Column('delivery_days', sa.Integer(), nullable=True),
    sa.Column('rating', sa.Float(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ai_inventory_insights',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('insight_type', sa.String(length=50), nullable=True),
    sa.Column('insight_data', sa.Text(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('applied_at', sa.DateTime(), nullable=True),
    sa.Column('applied_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['applied_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pricing_tiers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('tier_name', sa.String(length=50), nullable=False),
    sa.Column('min_quantity', sa.Float(), nullable=False),
    sa.Column('max_quantity', sa.Float(), nullable=True),
    sa.Column('unit_price', sa.Float(), nullable=False),
    sa.Column('pricing_unit', sa.Enum('PIECES', 'ITEMS', 'UNITS', 'BOXES', 'PACKETS', 'BOTTLES', 'BAGS', 'SACKS', 'GRAMS', 'KILOGRAMS', 'TONNES', 'POUNDS', 'MILLILITERS', 'LITERS', 'GALLONS', 'MILLIMETERS', 'CENTIMETERS', 'METERS', 'KILOMETERS', 'INCHES', 'FEET', 'YARDS', 'SQUARE_METERS', 'SQUARE_FEET', 'ACRES', 'HECTARES', 'BUNDLES', 'CRATES', 'JERRYCANS', 'CARTONS', name='unitofmeasure'), nullable=False),
    sa.Column('discount_percentage', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_unit_conversions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('base_unit', sa.Enum('PIECES', 'ITEMS', 'UNITS', 'BOXES', 'PACKETS', 'BOTTLES', 'BAGS', 'SACKS', 'GRAMS', 'KILOGRAMS', 'TONNES', 'POUNDS', 'MILLILITERS', 'LITERS', 'GALLONS', 'MILLIMETERS', 'CENTIMETERS', 'METERS', 'KILOMETERS', 'INCHES', 'FEET', 'YARDS', 'SQUARE_METERS', 'SQUARE_FEET', 'ACRES', 'HECTARES', 'BUNDLES', 'CRATES', 'JERRYCANS', 'CARTONS', name='unitofmeasure'), nullable=False),
    sa.Column('base_quantity', sa.Float(), nullable=False),
    sa.Column('alt_unit', sa.Enum('PIECES', 'ITEMS', 'UNITS', 'BOXES', 'PACKETS', 'BOTTLES', 'BAGS', 'SACKS', 'GRAMS', 'KILOGRAMS', 'TONNES', 'POUNDS', 'MILLILITERS', 'LITERS', 'GALLONS', 'MILLIMETERS', 'CENTIMETERS', 'METERS', 'KILOMETERS', 'INCHES', 'FEET', 'YARDS', 'SQUARE_METERS', 'SQUARE_FEET', 'ACRES', 'HECTARES', 'BUNDLES', 'CRATES', 'JERRYCANS', 'CARTONS', name='unitofmeasure'), nullable=False),
    sa.Column('alt_quantity', sa.Float(), nullable=False),
    sa.Column('conversion_factor', sa.Float(), nullable=False),
    sa.Column('usage_context', sa.String(length=50), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_stocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('variant_id', sa.Integer(), nullable=True),
    sa.Column('current_stock', sa.Float(), nullable=False),
    sa.Column('reserved_stock', sa.Float(), nullable=False),
    sa.Column('available_stock', sa.Float(), nullable=False),
    sa.Column('min_stock_level', sa.Float(), nullable=False),
    sa.Column('max_stock_level', sa.Float(), nullable=True),
    sa.Column('reorder_point', sa.Float(), nullable=False),
    sa.Column('average_cost', sa.Float(), nullable=True),
    sa.Column('last_purchase_cost', sa.Float(), nullable=True),
    sa.Column('expiry_date', sa.DateTime(), nullable=True),
    sa.Column('batch_number', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['inventory_locations.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['variant_id'], ['product_variants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('product_stocks')
    op.drop_table('product_unit_conversions')
    op.drop_table('pricing_tiers')
    op.drop_table('ai_inventory_insights')
    op.drop_table('suppliers')
    op.drop_table('inventory_locations')
    op.drop_table('business_templates')
    # ### end Alembic commands ###
